{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Arch Notebook","text":"<p>CPU todo</p> <ul> <li> MDP modern papers</li> </ul> <p>AI todo</p> <ul> <li> attention; flash attention</li> </ul> <p>GPU todo</p> <ul> <li> basics</li> </ul> <p>NVLINK todo</p> <ul> <li> basics</li> </ul>"},{"location":"AI/attention/flash_attention/","title":"References","text":"<ul> <li>Flash Attention \u4e3a\u4ec0\u4e48\u90a3\u4e48\u5feb\uff1f\u539f\u7406\u8bb2\u89e3_\u54d4\u54e9\u54d4\u54e9_bilibili</li> </ul>"},{"location":"Benchmark/Simpoint/","title":"Simpoint","text":"<ul> <li>\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u6a21\u62df\u5668gem5\u5e94\u8be5\u600e\u4e48\u5b66\uff1f - \u963f\u6bd4\u738b\u7684\u56de\u7b54 - \u77e5\u4e4e https://www.zhihu.com/question/434274699/answer/1900904680059535935</li> </ul>"},{"location":"CPU/Backend/LSU/basics/","title":"LSU Basics","text":""},{"location":"CPU/Backend/LSU/basics/#load-store-unit-lsu-responsibilities","title":"Load Store Unit (LSU) Responsibilities","text":"<ul> <li>Generate address (not fully encoded by instruction)</li> <li>Translate address (virtual to physical)</li> <li>Resolve address conflicts (i.e., dependencies through memory)</li> <li>Execute access (actual load/store)</li> </ul>"},{"location":"CPU/Backend/LSU/basics/#challenges-in-memory-access","title":"Challenges in Memory Access","text":""},{"location":"CPU/Backend/LSU/basics/#challenge-1-timing-of-memory-access-by-store-instructions","title":"Challenge #1: Timing of Memory Access by Store Instructions","text":"<ul> <li>When can a store actually write to the memory?</li> <li>How does it affect the order of stores?</li> </ul>"},{"location":"CPU/Backend/LSU/basics/#challenge-2-dependencies-through-memory","title":"Challenge #2: Dependencies Through Memory","text":"<ul> <li>A.k.a., memory disambiguation</li> <li>load(a) should return the value written by the latest store(a, v)</li> <li>Will discuss multi-core issues in a later lecture</li> <li>Same set of dependencies as registers:</li> <li>RAW: store(a, v); load(a);</li> <li>WAW (only with OoO): store(a, v); store(a, v');</li> <li>WAR (only with OoO): load(a); store(a, v);</li> </ul>"},{"location":"CPU/Backend/LSU/basics/#why-dependencies-are-hard","title":"Why Dependencies Are Hard","text":"<ul> <li>Memory addresses are much wider than register names</li> <li>5 bits vs. 64 bits</li> <li>Memory dependencies are not static</li> <li>Address of a load (or store) instruction may change (e.g., loop)</li> <li>Addresses need to be calculated and translated first</li> <li>Cannot do much too early</li> <li>Load/stores take longer relative to other instructions</li> <li>Cache/TLB misses can take 100s of cycles</li> <li>Higher cost of stalling</li> </ul>"},{"location":"CPU/Backend/LSU/basics/#loadstore-lifetime","title":"Load/Store Lifetime","text":"<ul> <li>Ordering between loads/stores is about the timing of accessing memory</li> <li>We call a load/store \"accessed\" if it has accessed the memory</li> <li>Loads access before commit</li> </ul>"},{"location":"CPU/Backend/LSU/basics/#options-of-memory-disambiguation","title":"Options of Memory Disambiguation","text":"Scheme Speculative? Notes Total Ordering No All loads/stores access in program order. Load Ordering, Store Ordering No All stores access in order. All loads access in order. But between loads and stores accesses are out of order, as long as older stores have addresses calculated. Partial Ordering No All stores access in order. Loads can access out of order, as long as older stores have addresses calculated. Store Ordering Yes All stores access in order. Loads access completely out of order."},{"location":"CPU/Backend/LSU/basics/#load-ordering-store-ordering","title":"Load Ordering, Store Ordering","text":"<ul> <li>Decoupled in-order pipelines for loads/stores</li> <li>Sync between loads and stores when addresses are available</li> <li>Loads compared to older stores</li> <li>Loads may bypass older stores if no address conflicts</li> </ul> <p>Note: This requires tracking AGE. LOAD should wait until STORE with greater AGE before accessing DCACHE.</p>"},{"location":"CPU/Backend/LSU/basics/#partial-ordering","title":"Partial Ordering","text":"<ul> <li>Loads go Out-of-Order if older loads/stores have addresses</li> <li>Indetermination matrix tracks readiness of address registers<ul> <li>When to issue</li> </ul> </li> <li>Dependency matrix tracks dependencies<ul> <li>When to access memory</li> </ul> </li> </ul>"},{"location":"CPU/Backend/LSU/basics/#load-bypassing-and-store-forwarding","title":"Load Bypassing and Store Forwarding","text":"<ul> <li>If loads can access memory OoO w.r.t. stores:<ul> <li>With no address conflicts:<ul> <li>stall (in-order), or</li> <li>load bypassing (OoO)</li> </ul> </li> <li>With address conflicts:<ul> <li>stall (in-order), or</li> <li>store forwarding (OoO)</li> <li>Store forwarding is critical for performance; otherwise conflicting loads must wait</li> <li>Implementing store forwarding is tricky due to size and alignment concerns</li> </ul> </li> </ul> </li> </ul>"},{"location":"CPU/Backend/LSU/basics/#load-store-queue-implementation-details","title":"Load-Store Queue Implementation Details","text":"<ul> <li>Physical Structure: Typically implemented as circular buffers or CAMs (Content Addressable Memory)</li> <li>Capacity: 32-64 entries in modern processors</li> <li>Tracking Fields:<ul> <li>PC value</li> <li>Memory address (virtual and physical)</li> <li>Data size (byte, half-word, word)</li> <li>Execution status flags</li> <li>Age counter for ordering</li> </ul> </li> </ul>"},{"location":"CPU/Backend/LSU/basics/#address-speculation","title":"Address Speculation","text":"<p>Bypassing &amp; forwarding are still not good enough:</p> <ul> <li>Need to wait for the addresses of ALL older stores to avoid RAW hazards</li> </ul> <p>Solution: Speculate lack of RAW hazard</p> <ul> <li>Predict a load to be independent of stores, without knowing exact addresses</li> <li>Proceed with the load, as well as all dependent instructions<ul> <li>Significant improvement of IPC</li> </ul> </li> <li>If speculation found to be wrong, squash the load and all dependent instructions<ul> <li>Similar to branch misprediction recovery</li> </ul> </li> </ul>"},{"location":"CPU/Backend/LSU/basics/#address-prediction-techniques","title":"Address Prediction Techniques","text":"<ul> <li>Last Value Prediction: Use the previous address for the same load instruction</li> <li>Stride Prediction: Predict based on patterns in address changes</li> <li>Context-based Prediction: Use history of recent addresses to predict next one</li> </ul>"},{"location":"CPU/Backend/LSU/basics/#speculative-load-issuing","title":"Speculative Load Issuing","text":"<p>Record all speculatively issued loads in a buffer, to match with stores</p> <ul> <li>Finished = address calculated</li> <li>Completed = committed</li> </ul> <p></p>"},{"location":"CPU/Backend/LSU/basics/#selective-speculation-motivation","title":"Selective Speculation: Motivation","text":"<ul> <li>We'd better speculate wisely:<ul> <li>Difficult to predict: locality leads to non-trivial amount of conflicts</li> <li>Difficult to recover: hard to identify only dependent instructions, usually flush all</li> </ul> </li> <li>Selective speculation: only select profitable loads to speculate</li> </ul>"},{"location":"CPU/Backend/LSU/basics/#store-set-algorithm","title":"Store Set Algorithm","text":"<ul> <li>For each load, track all stores with which it has conflicted in the past<ul> <li>These stores form the store set of this load</li> <li>Assumption: previously encountered dependencies are likely to repeat</li> <li>A load does not issue if any member in its store set has not resolved the address</li> </ul> </li> <li>Store set algorithm (ideal):<ul> <li>Initially, all loads have empty store sets \u2192 na\u00efve speculation</li> <li>When a load and a store cause a violation, the store PC is added to the load's store set</li> <li>When a load is encountered, it must be delayed if any store in its store set is still on-the-fly</li> </ul> </li> </ul>"},{"location":"CPU/Backend/LSU/basics/#replay-vs-squash-recovery","title":"Replay vs. Squash Recovery","text":"<ul> <li>Replay: Discard just the violating load and re-execute it (lightweight)</li> <li>Squash: Cancel the load and all dependent instructions (heavyweight but necessary for ordering)</li> <li>Hybrid Approach: Use replay for certain violations and squash for others</li> </ul>"},{"location":"CPU/Backend/LSU/basics/#references","title":"References","text":"<ul> <li>https://safari.ethz.ch/ddca/spring2025/lib/exe/fetch.php?media=onur-ddca-2025-lecture15c-load-store-handling-in-out-of-order-execution.pdf</li> <li>Chrysos, G. Z., &amp; Emer, J. S. (1998). Memory dependence prediction using store sets. ACM SIGARCH Computer Architecture News, 26(3), 142-153.</li> <li>Yoaz, A., Erez, M., Ronen, R., &amp; Jourdan, S. (1999). Speculation techniques for improving load related instruction scheduling. ISCA '99.</li> </ul>"},{"location":"CPU/Backend/LSU/MDP/papers/","title":"Memory Dependence Prediction","text":""},{"location":"CPU/Backend/LSU/MDP/papers/#1","title":"1. \u80cc\u666f\u4e0e\u95ee\u9898","text":"<p>\u5728\u73b0\u4ee3\u4e71\u5e8f\u5904\u7406\u5668\u4e2d\uff0c\u51c6\u786e\u9884\u6d4b\u5185\u5b58\u4f9d\u8d56\u5173\u7cfb\u662f\u63d0\u9ad8\u6027\u80fd\u7684\u5173\u952e\u56e0\u7d20\u3002\u5f53\u5904\u7406\u5668\u5141\u8bb8 load \u6307\u4ee4\u7ed5\u8fc7\u5148\u524d\u7684 store \u6307\u4ee4\u6267\u884c\u65f6\uff0c\u5fc5\u987b\u786e\u4fdd\u8fd9\u4e9b load \u4e0d\u4f1a\u8bbf\u95ee\u5230\u5c1a\u672a\u63d0\u4ea4\u7684 store \u6240\u4fee\u6539\u7684\u5185\u5b58\u4f4d\u7f6e\u3002\u4e0d\u6b63\u786e\u7684\u5185\u5b58\u4f9d\u8d56\u9884\u6d4b\u4f1a\u5bfc\u81f4\uff1a</p> <ul> <li>\u8fc7\u5ea6\u4fdd\u5b88\uff1a\u4e0d\u5fc5\u8981\u5730\u5ef6\u8fdf\u72ec\u7acb\u7684 load \u6307\u4ee4</li> <li>\u8fc7\u5ea6\u6fc0\u8fdb\uff1a\u9700\u8981\u9891\u7e41\u5730\u91cd\u65b0\u6267\u884c load \u548c\u5176\u4f9d\u8d56\u6307\u4ee4</li> </ul> <p>\u4f20\u7edf\u4e0a\uff0c\u5904\u7406\u5668\u4f7f\u7528\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u5904\u7406\u5185\u5b58\u4f9d\u8d56\uff1a</p> <ul> <li>\u65e0\u6295\u673a\u6267\u884c\uff1a\u6240\u6709 load \u7b49\u5f85\u6240\u6709\u5148\u524d\u7684 store \u5b8c\u6210</li> <li>\u5730\u5740\u5339\u914d\uff1a\u4f7f\u7528 store queue \u68c0\u67e5\u5730\u5740\u91cd\u53e0</li> <li>\u7b80\u5355\u9884\u6d4b\uff1a\u4f7f\u7528\u5386\u53f2\u884c\u4e3a\u9884\u6d4b load-store \u4f9d\u8d56\u5173\u7cfb</li> </ul>"},{"location":"CPU/Backend/LSU/MDP/papers/#2-store-sets","title":"2. Store Sets","text":"<p>\u8bba\u6587 [ISCA'98] Memory Dependence Prediction using Store Sets</p>"},{"location":"CPU/Backend/LSU/MDP/papers/#21","title":"2.1. \u6838\u5fc3\u601d\u60f3","text":"<p>Store Sets \u7b97\u6cd5\u57fa\u4e8e\u4e00\u4e2a\u5173\u952e\u89c2\u5bdf\uff1a\u7279\u5b9a\u7684 load \u548c store \u6307\u4ee4\u5bf9\u4f1a\u53cd\u590d\u4ea7\u751f\u4f9d\u8d56\u51b2\u7a81\u3002\u8be5\u7b97\u6cd5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5de5\u4f5c\uff1a</p> <ol> <li>\u5bf9\u6bcf\u4e2a load \u6307\u4ee4\uff0c\u7ef4\u62a4\u4e00\u4e2a\"store set\"\u2014\u2014\u6240\u6709\u66fe\u7ecf\u4e0e\u8be5 load \u4ea7\u751f\u4f9d\u8d56\u51b2\u7a81\u7684 store \u6307\u4ee4\u96c6\u5408</li> <li>\u5f53 load \u548c store \u6267\u884c\u987a\u5e8f\u9519\u8bef\u5bfc\u81f4\u51b2\u7a81\u65f6\uff0c\u5c06\u8be5 store \u6dfb\u52a0\u5230 load \u7684 store set \u4e2d</li> <li>\u5728\u540e\u7eed\u6267\u884c\u4e2d\uff0c\u5982\u679c\u68c0\u6d4b\u5230 load \u548c\u5176 store set \u4e2d\u7684\u6307\u4ee4\uff0c\u5904\u7406\u5668\u4f1a\u5f3a\u5236 load \u7b49\u5f85\u8fd9\u4e9b store \u5b8c\u6210</li> </ol> <p>\u8fd9\u79cd\u65b9\u6cd5\u6bd4\u7b80\u5355\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u66f4\u7cbe\u786e\uff0c\u56e0\u4e3a\u5b83\u80fd\u591f\u5b66\u4e60\u5e76\u8bb0\u4f4f\u7279\u5b9a\u7684 load-store \u4f9d\u8d56\u5bf9\u3002</p>"},{"location":"CPU/Backend/LSU/MDP/papers/#22","title":"2.2 \u5e38\u89c1\u4f9d\u8d56\u6a21\u5f0f","text":"<ul> <li>\u591a\u4e2a load \u64cd\u4f5c\u4f9d\u8d56\u4e8e\u5355\u4e2a store \u64cd\u4f5c\uff08\u5e38\u89c1\u60c5\u51b5\uff1a\u4e00\u4e2a\u5199\u5165\u8005\uff0c\u591a\u4e2a\u8bfb\u53d6\u8005\uff09</li> <li>\u4e00\u4e2a load \u64cd\u4f5c\u4f9d\u8d56\u4e8e\u591a\u4e2a store \u64cd\u4f5c\uff1a</li> <li>\u60c5\u51b5 1: \u5206\u652f\uff0c\u4e00\u4e2a load \u53ef\u80fd\u4f9d\u8d56\u4e8e\u4e0d\u540c\u5206\u652f\u8def\u5f84\u4e0a\u7684 store</li> <li>\u60c5\u51b5 2: \u5b57\u5927\u5c0f\u7684\u7ed3\u6784\u4f53\u88ab\u5206\u5272\u6210\u591a\u4e2a\u5b57\u6bb5\uff0c\u591a\u4e2a\u5b57\u6bb5\u88ab\u5199\u5165\u4f46\u6574\u4e2a\u7ed3\u6784\u4f53\u88ab\u4e00\u6b21\u6027\u8bfb\u53d6</li> <li>\u60c5\u51b5 3: WAW (Write-After-Write) \u60c5\u51b5</li> </ul>"},{"location":"CPU/Backend/LSU/MDP/papers/#23","title":"2.3. \u786c\u4ef6\u5b9e\u73b0","text":"<p>Store Sets \u7b97\u6cd5\u9700\u8981\u4e24\u4e2a\u4e3b\u8981\u7684\u786c\u4ef6\u8868\uff1a </p>"},{"location":"CPU/Backend/LSU/MDP/papers/#231-store-set-id-table-ssit","title":"2.3.1 Store Set ID Table (SSIT)","text":"<ul> <li>\u529f\u80fd\uff1a\u5c06\u6307\u4ee4\u7684 PC \u6620\u5c04\u5230\u5176 Store Set ID (SSID)</li> <li>\u7ed3\u6784\uff1a4K \u6761\u76ee\u7684\u76f4\u63a5\u6620\u5c04\u8868\uff0c\u6bcf\u4e2a\u6761\u76ee\u5305\u542b\u4e00\u4e2a\u6709\u6548\u4f4d\u548c SSID</li> <li>\u7d22\u5f15\u65b9\u5f0f\uff1a\u4f7f\u7528\u6307\u4ee4 PC \u7684\u4f4e\u4f4d\u8fdb\u884c\u7d22\u5f15</li> <li>\u8bbf\u95ee\u65f6\u673a\uff1a\u5728\u6307\u4ee4\u53d6\u6307\u9636\u6bb5\u88ab\u8bbf\u95ee</li> </ul>"},{"location":"CPU/Backend/LSU/MDP/papers/#232-last-fetched-store-table-lfst","title":"2.3.2 Last Fetched Store Table (LFST)","text":"<ul> <li>\u529f\u80fd\uff1a\u8ddf\u8e2a\u6bcf\u4e2a store set \u4e2d\u6700\u8fd1\u53d6\u6307\u7684 store \u6307\u4ee4</li> <li>\u7ed3\u6784\uff1a128 \u6761\u76ee\u8868\uff0c\u6bcf\u4e2a\u6761\u76ee\u5305\u542b\u6307\u4ee4\u7f16\u53f7(inum)\u548c\u6709\u6548\u4f4d</li> <li>\u7d22\u5f15\u65b9\u5f0f\uff1a\u4f7f\u7528 SSID \u7d22\u5f15</li> <li>\u8bbf\u95ee\u65f6\u673a\uff1a\u6307\u4ee4\u53d6\u6307\u548c\u8c03\u5ea6\u9636\u6bb5</li> </ul>"},{"location":"CPU/Backend/LSU/MDP/papers/#233","title":"2.3.3 \u64cd\u4f5c\u6d41\u7a0b","text":"<ul> <li> <p>\u521d\u59cb\u5316: \u7a0b\u5e8f\u5f00\u59cb\u65f6\uff0cSSIT \u4e2d\u7684\u6240\u6709\u6761\u76ee\u90fd\u65e0\u6548\u3002\u521d\u59cb\u60c5\u51b5\u4e0b\uff0cstore \u548c load \u6307\u4ee4\u8bbf\u95ee\u8868\u683c\u65f6\u4e0d\u4f1a\u83b7\u5f97\u6709\u6548\u7684\u5185\u5b58\u4f9d\u8d56\u4fe1\u606f\u3002</p> </li> <li> <p>\u8fdd\u4f8b\u5904\u7406: \u5f53 load \u63d0\u4ea4\u5185\u5b58\u987a\u5e8f\u8fdd\u4f8b\u65f6\uff0cSSIT \u4e2d\u4f1a\u521b\u5efa\u4e00\u4e2a store set\u3002\u51b2\u7a81\u4e2d\u6d89\u53ca\u7684 load \u548c store \u6307\u4ee4\u88ab\u5206\u914d\u4e00\u4e2a store set \u6807\u8bc6\u7b26\uff08SSID X\uff09\u3002SSID \u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5206\u914d\uff0c\u4f8b\u5982\u5bf9 load \u7684 PC \u8fdb\u884c\u5f02\u6216\u54c8\u5e0c\u3002SSID X \u4f1a\u88ab\u5199\u5165 SSIT \u4e2d\u7684\u4e24\u4e2a\u4f4d\u7f6e\uff1a\u4e00\u4e2a\u7531 load PC \u7d22\u5f15\uff0c\u53e6\u4e00\u4e2a\u7531 store PC \u7d22\u5f15\u3002</p> </li> <li> <p>Store \u5904\u7406: \u5f53\u8be5 store PC \u518d\u6b21\u88ab\u53d6\u6307\u65f6\uff0c\u5b83\u4f1a\u8bfb\u53d6\u7531\u5176 PC \u7d22\u5f15\u7684 SSIT \u6761\u76ee\u3002\u7531\u4e8e SSID \u6709\u6548\uff0c\u5b83\u4f7f\u7528\u8be5 store set \u7684 SSID \u8bbf\u95ee LFST\u3002\u5982\u679c\u5b83\u6ca1\u6709\u627e\u5230\u6765\u81ea store set X \u7684\u6709\u6548\u6700\u8fd1\u53d6\u6307\u6307\u4ee4\uff0c\u5b83\u4e0d\u4f1a\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a store\u3002\u8be5 store \u4f1a\u5c06\u81ea\u5df1\u7684\u6307\u4ee4\u5e8f\u53f7\uff08inum\uff09\u5199\u5165 LFST\u3002</p> </li> <li> <p>Load \u5904\u7406: \u5f53 load \u6307\u4ee4\u968f\u540e\u88ab\u53d6\u6307\u65f6\uff0c\u5b83\u4f7f\u7528 SSID X \u8bbf\u95ee SSIT \u7136\u540e\u662f LFST\u3002LFST \u901a\u77e5\u6307\u4ee4\u8c03\u5ea6\u5668\u8be5 load \u4f9d\u8d56\u4e8e\u5176\u4e2d\u627e\u5230\u7684 store \u6307\u4ee4\u3002\u8c03\u5ea6\u5668\u7136\u540e\u5728 load \u548c store \u4e4b\u95f4\u5f3a\u5236\u6267\u884c\u4f9d\u8d56\u5173\u7cfb\uff0c\u7c7b\u4f3c\u4e8e\u5b83\u5904\u7406\u5bc4\u5b58\u5668\u4f9d\u8d56\u7ea6\u675f\u7684\u65b9\u5f0f\u3002</p> </li> <li> <p>\u591a\u91cd\u51b2\u7a81: \u5982\u679c load \u540e\u6765\u4e0e\u53e6\u4e00\u4e2a store \u53d1\u751f\u51b2\u7a81\uff0cSSIT \u4f1a\u56e0\u65b0\u7684\u5185\u5b58\u987a\u5e8f\u8fdd\u4f8b\u800c\u66f4\u65b0\u3002SSID X \u88ab\u590d\u5236\u5230\u7531\u65b0 store \u7684 PC \u7d22\u5f15\u7684 SSIT \u6761\u76ee\u4e2d\u3002\u73b0\u5728 SSIT \u4e2d\u6709\u4e09\u4e2a\u6761\u76ee\u6307\u5411 SSID X\u3002\u4e0b\u6b21\u53d6\u6307\u8fd9\u4e9b\u6307\u4ee4\u65f6\uff0c\u7b2c\u4e8c\u4e2a store \u5c06\u4f9d\u8d56\u4e8e\u7b2c\u4e00\u4e2a store\uff0cload \u5c06\u4f9d\u8d56\u4e8e\u7b2c\u4e8c\u4e2a store\u3002</p> </li> </ul>"},{"location":"CPU/Backend/LSU/MDP/papers/#24-store-set","title":"2.4. Store Set \u5408\u5e76\u7b56\u7565","text":"<p>\u7531\u4e8e\u4e00\u4e2a store \u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a store set\uff0c\u5f53\u4e00\u4e2a store \u9700\u8981\u5c5e\u4e8e\u591a\u4e2a store set \u65f6\uff0c\u9700\u8981\u5408\u5e76\u7b56\u7565\uff1a</p> <ol> <li>\u5982\u679c\u4e24\u8005\u90fd\u6ca1\u6709 store set\uff0c\u521b\u5efa\u65b0\u7684\u5e76\u5206\u914d\u7ed9\u4e24\u8005</li> <li>\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6709 store set\uff0c\u53e6\u4e00\u4e2a\u7ee7\u627f\u8fd9\u4e2a store set</li> <li>\u5982\u679c\u4e24\u8005\u90fd\u6709\u4e0d\u540c\u7684 store set\uff0c\u9009\u62e9\u4e00\u4e2a\u4f5c\u4e3a\"\u8d62\u5bb6\"\uff08\u4f8b\u5982\u7f16\u53f7\u8f83\u5c0f\u7684\uff09</li> </ol> <p>\u8fd9\u79cd\u5408\u5e76\u7b56\u7565\u80fd\u907f\u514d store set \u8868\u4e2d\u7684\u6296\u52a8\uff0c\u540c\u65f6\u5f15\u5165\u7684\u5047\u4f9d\u8d56\u5173\u7cfb\u5f71\u54cd\u5f88\u5c0f\u3002</p>"},{"location":"CPU/Backend/LSU/MDP/papers/#25","title":"2.5. \u6027\u80fd\u8bc4\u4f30","text":"<p>\u8bba\u6587\u4e2d\u7684\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff1a</p> <ul> <li>Spec95 \u57fa\u51c6\u6d4b\u8bd5\uff1aStore Sets \u7b97\u6cd5\u5b9e\u73b0\u4e86\u63a5\u8fd1\u7406\u60f3\u5185\u5b58\u4f9d\u8d56\u9884\u6d4b\u7684 97% \u6027\u80fd</li> <li>\u786c\u4ef6\u5f00\u9500\uff1a\u4ec5\u9700 4KB SSIT (4K \u6761\u76ee)\u548c 512 \u5b57\u8282 LFST (128 \u6761\u76ee)</li> <li>\u6539\u8fdb\uff1a\u6bd4\u6700\u597d\u7684\u66ff\u4ee3\u65b9\u6848\uff08\u540c\u6b65\u9884\u6d4b\uff09\u63d0\u9ad8\u4e86 15% \u7684\u6027\u80fd</li> </ul> <p>\u91cd\u8981\u7684\u662f\uff0cStore Sets \u7b97\u6cd5\u5728\u590d\u6742\u7684\u4f9d\u8d56\u6a21\u5f0f\u4e0b\u8868\u73b0\u51fa\u8272\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u4e00\u4e2a load \u4f9d\u8d56\u591a\u4e2a store \u7684\u60c5\u51b5\uff08\u5982\u7ed3\u6784\u4f53\u8bbf\u95ee\uff09</li> <li>\u591a\u4e2a load \u4f9d\u8d56\u540c\u4e00\u4e2a store \u7684\u60c5\u51b5\uff08\u4e00\u5199\u591a\u8bfb\uff09</li> <li>\u63a7\u5236\u6d41\u4f9d\u8d56\u6a21\u5f0f\uff08\u5982\u5206\u652f\u5185\u7684\u4f9d\u8d56\uff09</li> </ul>"},{"location":"CPU/Backend/LSU/MDP/papers/#25-store-sets","title":"2.5. Store Sets \u7b97\u6cd5\u4e2d\u7684\u5173\u952e\u6743\u8861","text":"<p>Store Sets \u7b97\u6cd5\u7684\u8bbe\u8ba1\u4e2d\u5305\u542b\u591a\u9879\u7cbe\u5fc3\u8003\u8651\u7684\u6743\u8861\u51b3\u7b56\uff0c\u8fd9\u4e9b\u51b3\u7b56\u76f4\u63a5\u5f71\u54cd\u4e86\u7b97\u6cd5\u7684\u5b9e\u9645\u6548\u679c\u3002</p>"},{"location":"CPU/Backend/LSU/MDP/papers/#261-store-store-set","title":"2.6.1 Store \u6307\u4ee4\u53ea\u80fd\u5c5e\u4e8e\u5355\u4e00 Store Set \u7684\u6743\u8861","text":"<p>Store Sets \u8bbe\u8ba1\u4e2d\u7684\u4e00\u4e2a\u5173\u952e\u9650\u5236\u662f\uff1a\u4e00\u4e2a store \u6307\u4ee4\u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a store set\u3002</p> <p>\u4e3a\u4ec0\u4e48\u91c7\u7528\u8fd9\u79cd\u9650\u5236\uff1a</p> <ul> <li>\u786c\u4ef6\u590d\u6742\u5ea6\u964d\u4f4e\uff1a\u5141\u8bb8 store \u5c5e\u4e8e\u591a\u4e2a store set \u4f1a\u663e\u8457\u589e\u52a0\u786c\u4ef6\u590d\u6742\u5ea6\uff0c\u9700\u8981\u591a\u5bf9\u591a\u6620\u5c04\u8868</li> <li>\u67e5\u627e\u901f\u5ea6\u4f18\u5316\uff1a\u5728\u5173\u952e\u7684\u6307\u4ee4\u53d6\u6307\u9636\u6bb5\uff0c\u5355\u4e00\u6620\u5c04\u5141\u8bb8 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u4f9d\u8d56\u67e5\u627e</li> <li>LFST \u7ed3\u6784\u7b80\u5316\uff1a\u6bcf\u4e2a SSID \u53ea\u9700\u8ddf\u8e2a\u4e00\u4e2a\u6700\u8fd1 store\uff0c\u800c\u4e0d\u662f\u591a\u4e2a store \u7684\u5217\u8868</li> <li>\u5b58\u50a8\u7a7a\u95f4\u4f18\u5316\uff1a\u6bcf\u4e2a PC \u53ea\u9700\u4e00\u4e2a SSID \u6620\u5c04\u6761\u76ee\uff0c\u8282\u7701\u82af\u7247\u9762\u79ef</li> </ul> <p>\u8fd9\u79cd\u9650\u5236\u7684\u4ee3\u4ef7\uff1a</p> <ul> <li>\u5f15\u5165\u5047\u4f9d\u8d56\uff1a\u5f53\u4e00\u4e2a store \u672c\u5e94\u5c5e\u4e8e\u591a\u4e2a\u72ec\u7acb store set \u65f6\uff0c\u5408\u5e76\u7b56\u7565\u4f1a\u5f3a\u5236\u8fd9\u4e9b\u96c6\u5408\u4e2d\u7684\u6240\u6709 load \u548c store \u4ea7\u751f\u5e8f\u5217\u5316\u4f9d\u8d56</li> <li>\u6f5c\u5728\u6027\u80fd\u4e0b\u964d\uff1a\u8fd9\u4e9b\u5047\u4f9d\u8d56\u53ef\u80fd\u5bfc\u81f4\u539f\u672c\u53ef\u5e76\u884c\u6267\u884c\u7684\u6307\u4ee4\u88ab\u4e0d\u5fc5\u8981\u5730\u5e8f\u5217\u5316</li> </ul> <p>\u8bba\u6587\u901a\u8fc7\u5b9e\u9a8c\u8868\u660e\uff0c\u5c3d\u7ba1\u5b58\u5728\u8fd9\u4e9b\u5047\u4f9d\u8d56\uff0c\u4f46\u5728\u5927\u591a\u6570\u7a0b\u5e8f\u4e2d\u6027\u80fd\u5f71\u54cd\u5fae\u4e4e\u5176\u5fae\uff08\u5c11\u4e8e 1%\uff09\uff0c\u800c\u786c\u4ef6\u7b80\u5316\u5e26\u6765\u7684\u4f18\u52bf\u66f4\u4e3a\u663e\u8457\u3002</p>"},{"location":"CPU/Backend/LSU/MDP/papers/#262","title":"2.6.2 \u8868\u5927\u5c0f\u4e0e\u8986\u76d6\u7387\u7684\u6743\u8861","text":"<p>SSIT \u548c LFST \u7684\u5927\u5c0f\u9009\u62e9\u53cd\u6620\u4e86\u9762\u79ef\u4e0e\u6027\u80fd\u7684\u6743\u8861\uff1a</p> <p>\u8f83\u5c0f\u8868\u7684\u4f18\u52bf\uff1a</p> <ul> <li>\u51cf\u5c11\u82af\u7247\u9762\u79ef\u5360\u7528\u548c\u529f\u8017\u6d88\u8017</li> <li>\u8bbf\u95ee\u5ef6\u8fdf\u66f4\u77ed\uff0c\u5bf9\u5173\u952e\u65f6\u5e8f\u8def\u5f84\u5f71\u54cd\u66f4\u5c0f</li> </ul> <p>\u8f83\u5c0f\u8868\u7684\u52a3\u52bf\uff1a</p> <ul> <li>\u54c8\u5e0c\u51b2\u7a81\u589e\u591a\uff1a\u76f4\u63a5\u6620\u5c04\u8868\u5bb9\u6613\u4ea7\u751f\u51b2\u7a81\uff0c\u5bfc\u81f4\u6709\u6548\u9884\u6d4b\u4fe1\u606f\u88ab\u66ff\u6362</li> <li>\u8986\u76d6\u7387\u964d\u4f4e\uff1a\u65e0\u6cd5\u8ddf\u8e2a\u6240\u6709\u53ef\u80fd\u7684\u4f9d\u8d56\u5173\u7cfb</li> </ul> <p>\u8bba\u6587\u901a\u8fc7\u5b9e\u9a8c\u786e\u5b9a\uff1a</p> <ul> <li>4K \u5927\u5c0f\u7684 SSIT \u548c 128 \u6761\u76ee\u7684 LFST \u63d0\u4f9b\u4e86\u6700\u4f73\u7684\u6027\u80fd/\u9762\u79ef\u6bd4</li> <li>\u66f4\u5927\u7684\u8868\uff08\u5982 16K SSIT\uff09\u4ec5\u5e26\u6765\u7ea6 1-2% \u7684\u989d\u5916\u6027\u80fd\u63d0\u5347\uff0c\u4f46\u9762\u79ef\u6210\u672c\u663e\u8457\u589e\u52a0</li> </ul>"},{"location":"CPU/Backend/LSU/MDP/papers/#263","title":"2.6.3 \u9884\u6d4b\u7cbe\u5ea6\u4e0e\u51b2\u7a81\u89e3\u51b3\u7684\u6743\u8861","text":"<p>\u5f53\u5185\u5b58\u4f9d\u8d56\u9884\u6d4b\u5931\u8d25\u65f6\uff0c\u5904\u7406\u5668\u9700\u8981\u6062\u590d\u6267\u884c\u987a\u5e8f\uff1a</p> <p>\u4fdd\u5b88\u9884\u6d4b\uff08\u9884\u6d4b\u66f4\u591a\u4f9d\u8d56\uff09\uff1a</p> <ul> <li>\u4f18\u52bf\uff1a\u51cf\u5c11\u6062\u590d/\u91cd\u65b0\u6267\u884c\u7684\u6b21\u6570\uff0c\u63d0\u9ad8\u7cfb\u7edf\u7a33\u5b9a\u6027</li> <li>\u52a3\u52bf\uff1a\u5f15\u5165\u4e0d\u5fc5\u8981\u7684\u6307\u4ee4\u5e8f\u5217\u5316\uff0c\u9650\u5236\u6307\u4ee4\u7ea7\u5e76\u884c\u5ea6</li> </ul> <p>\u6fc0\u8fdb\u9884\u6d4b\uff08\u9884\u6d4b\u66f4\u5c11\u4f9d\u8d56\uff09\uff1a</p> <ul> <li>\u4f18\u52bf\uff1a\u6700\u5927\u5316\u6307\u4ee4\u7ea7\u5e76\u884c\u5ea6\uff0c\u63d0\u9ad8\u5904\u7406\u5668\u541e\u5410\u91cf</li> <li>\u52a3\u52bf\uff1a\u5f53\u9884\u6d4b\u9519\u8bef\u65f6\u4ed8\u51fa\u66f4\u9ad8\u7684\u6062\u590d\u6210\u672c</li> </ul> <p>Store Sets \u7b97\u6cd5\u901a\u8fc7\u5b66\u4e60\u5b9e\u9645\u6267\u884c\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u5728\u8fd9\u4e24\u79cd\u6781\u7aef\u4e4b\u95f4\u627e\u5230\u4e86\u5e73\u8861\u70b9\u3002\u8bba\u6587\u89c2\u5bdf\u5230\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u8fd9\u79cd\u6743\u8861\u53ef\u80fd\u9700\u8981\u52a8\u6001\u8c03\u6574\uff0c\u67d0\u4e9b\u7a0b\u5e8f\u5bf9\u4f9d\u8d56\u9884\u6d4b\u9519\u8bef\u975e\u5e38\u654f\u611f\uff0c\u800c\u5176\u4ed6\u7a0b\u5e8f\u5219\u80fd\u5bb9\u5fcd\u8f83\u9ad8\u7684\u9519\u8bef\u7387\u3002</p>"},{"location":"CPU/Backend/LSU/MDP/papers/#264","title":"2.6.4 \u6e05\u9664\u673a\u5236\u7684\u6548\u7387\u4e0e\u51c6\u786e\u6027\u6743\u8861","text":"<p>Store Set \u4e2d\u5173\u4e8e\u6e05\u9664\u673a\u5236\u7684\u9009\u62e9\u4e5f\u4f53\u73b0\u4e86\u91cd\u8981\u6743\u8861\uff1a</p> <p>\u5468\u671f\u6027\u5168\u5c40\u6e05\u9664\uff1a</p> <ul> <li>\u4f18\u52bf\uff1a\u5b9e\u73b0\u7b80\u5355\uff0c\u786c\u4ef6\u5f00\u9500\u5c0f</li> <li>\u52a3\u52bf\uff1a\u53ef\u80fd\u8fc7\u65e9\u6e05\u9664\u6709\u7528\u4fe1\u606f\uff0c\u6216\u8005\u6e05\u9664\u4e0d\u53ca\u65f6\u5bfc\u81f4\u8fc7\u65f6\u4fe1\u606f\u79ef\u7d2f</li> </ul> <p>\u57fa\u4e8e\u8ba1\u6570\u5668\u7684\u9009\u62e9\u6027\u6e05\u9664\uff1a</p> <ul> <li>\u4f18\u52bf\uff1a\u66f4\u7cbe\u786e\u5730\u4fdd\u7559\u6709\u7528\u4fe1\u606f\uff0c\u4e22\u5f03\u8fc7\u65f6\u4fe1\u606f</li> <li>\u52a3\u52bf\uff1a\u989d\u5916\u7684\u786c\u4ef6\u590d\u6742\u5ea6\uff08\u9700\u8981\u4e3a\u6bcf\u4e2a SSIT \u6761\u76ee\u6dfb\u52a0\u8ba1\u6570\u5668\uff09</li> </ul> <p>\u5b9e\u9a8c\u8868\u660e\uff0c\u7b80\u5355\u7684\u5468\u671f\u6027\u6e05\u9664\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8868\u73b0\u826f\u597d\uff0c\u800c\u66f4\u590d\u6742\u7684\u8ba1\u6570\u5668\u65b9\u6cd5\u53ea\u5728\u5c11\u6570\u573a\u666f\u4e0b\u663e\u793a\u51fa\u660e\u663e\u4f18\u52bf\u3002\u8fd9\u518d\u6b21\u4f53\u73b0\u4e86 Store Sets \u8bbe\u8ba1\u8ffd\u6c42\"\u8db3\u591f\u597d\"\u800c\u975e\"\u5b8c\u7f8e\"\u7684\u5b9e\u7528\u54f2\u5b66\u3002</p>"},{"location":"CPU/Backend/LSU/MDP/papers/#28","title":"2.8. \u7ed3\u8bba","text":"<p>Store Sets \u7b97\u6cd5\u901a\u8fc7\u5b66\u4e60\u7279\u5b9a load \u548c store \u6307\u4ee4\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u4e71\u5e8f\u5904\u7406\u5668\u7684\u6027\u80fd\u3002\u5b83\u7684\u5173\u952e\u521b\u65b0\u5728\u4e8e\uff1a</p> <ol> <li>\u5c06\u76f8\u5173\u7684 store \u6307\u4ee4\u5206\u7ec4\u5230\"store sets\"\u4e2d</li> <li>\u7ef4\u62a4\u6700\u5c0f\u4e14\u9ad8\u6548\u7684\u786c\u4ef6\u7ed3\u6784\uff08SSIT \u548c LFST\uff09</li> <li>\u91c7\u7528\u6709\u6548\u7684\u5408\u5e76\u7b56\u7565\u907f\u514d\u8868\u6296\u52a8</li> </ol> <p>\u8fd9\u79cd\u8bbe\u8ba1\u5728\u5b9e\u9645\u5904\u7406\u5668\u67b6\u6784\u4e2d\u8bc1\u660e\u662f\u9ad8\u6548\u4e14\u5b9e\u7528\u7684\uff0c\u4e3a\u540e\u7eed\u5185\u5b58\u4f9d\u8d56\u9884\u6d4b\u6280\u672f\u5960\u5b9a\u4e86\u575a\u5b9e\u57fa\u7840\u3002Store Sets \u7b97\u6cd5\u5e73\u8861\u4e86\u9884\u6d4b\u7cbe\u5ea6\u4e0e\u786c\u4ef6\u6210\u672c\uff0c\u5b9e\u73b0\u4e86\u63a5\u8fd1\u7406\u60f3\u9884\u6d4b\u5668\u7684\u6027\u80fd\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u5b9e\u73b0\u7684\u7b80\u6d01\u6027\u3002</p> <p>Store Sets \u88ab\u8ba4\u4e3a\u662f\u5185\u5b58\u4f9d\u8d56\u9884\u6d4b\u7684\u7ecf\u5178\u7b97\u6cd5\uff0c\u540e\u7eed\u7814\u7a76\u5305\u62ec\uff1a</p> <ul> <li>NoSQ \u67b6\u6784\uff1a\u53bb\u9664\u4f20\u7edf store queue\uff0c\u4ec5\u4f7f\u7528\u9884\u6d4b\u5668\u548c re-execution</li> <li>DMDP (2018)\uff1a\u901a\u8fc7\u5728\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u9636\u6bb5\u63d2\u5165\u6307\u4ee4\u6539\u53d8 load \u884c\u4e3a\uff0c\u51cf\u5c11 NoSQ \u67b6\u6784\u4e2d\u7684\u91cd\u6267\u884c</li> <li>\u7f16\u8bd1\u5668\u8f85\u52a9\u65b9\u6cd5\uff1a\u4f7f\u7528\u9759\u6001\u5206\u6790\u8bc6\u522b\u65e0\u4f9d\u8d56\u7684 load \u6307\u4ee4</li> </ul>"},{"location":"CPU/Backend/LSU/MDP/papers/#_1","title":"\u53c2\u8003\u6587\u732e","text":"<ul> <li>\u4e71\u5e8f\u6267\u884c\u7b80\u4ecb\uff08\u7b2c\u4e8c\u90e8\u5206\uff09</li> <li>\u4f7f\u7528 Store Sets \u8fdb\u884c\u5185\u5b58\u4f9d\u8d56\u9884\u6d4b (Chrysos &amp; Emer, 1998)</li> <li>\u4f7f\u7528\u9759\u6001\u5206\u6790\u6539\u8fdb\u5185\u5b58\u4f9d\u8d56\u9884\u6d4b (Panayi et al., 2024)</li> <li>Dynamic Memory Dependence Predication (Jin &amp; \u00d6nder, 2018)</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsu_microarch/","title":"LSU Microarch","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/","title":"FreeList","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#1","title":"1. \u6a21\u5757\u6982\u8ff0","text":"<p><code>FreeList.scala</code> \u5b9e\u73b0\u4e86\u4e00\u4e2a\u9ad8\u6548\u7684\u8d44\u6e90\u6c60\u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u8ddf\u8e2a\u3001\u5206\u914d\u548c\u56de\u6536\u6709\u9650\u6570\u91cf\u7684\u8d44\u6e90\u6807\u8bc6\u7b26\u3002\u8be5\u6a21\u5757\u662f XiangShan \u5904\u7406\u5668 LSQ \u7cfb\u7edf\u7684\u6838\u5fc3\u57fa\u7840\u8bbe\u65bd\uff0c\u4e3a Load Queue \u548c Store Queue \u63d0\u4f9b\u8d44\u6e90\u7ba1\u7406\u652f\u6301\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#11","title":"1.1 \u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u9ad8\u6548\u5206\u914d\u548c\u56de\u6536\u8d44\u6e90 ID</li> <li>\u652f\u6301\u5355\u5468\u671f\u591a\u5bbd\u5ea6\u5e76\u884c\u5206\u914d\u548c\u91ca\u653e\u64cd\u4f5c</li> <li>\u7ef4\u62a4\u8d44\u6e90\u4f7f\u7528\u72b6\u6001\uff0c\u9632\u6b62\u8d44\u6e90\u6cc4\u6f0f\u6216\u91cd\u590d\u5206\u914d</li> <li>\u901a\u8fc7\u5faa\u73af\u961f\u5217\u673a\u5236\u5b9e\u73b0\u8d44\u6e90\u7684\u65e0\u9650\u590d\u7528</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#12","title":"1.2 \u6a21\u5757\u5b9a\u4e49","text":"<pre><code>class FreeList(\n  size: Int,              // \u8d44\u6e90\u6c60\u5927\u5c0f\n  allocWidth: Int,        // \u5355\u5468\u671f\u53ef\u5206\u914d\u7684\u6700\u5927\u8d44\u6e90\u6570\u91cf\n  freeWidth: Int,         // \u5355\u5468\u671f\u53ef\u91ca\u653e\u7684\u6700\u5927\u8d44\u6e90\u6570\u91cf\n  enablePreAlloc: Boolean = false,  // \u662f\u5426\u542f\u7528\u9884\u5206\u914d\u4f18\u5316\n  moduleName: String = \"\"  // \u6a21\u5757\u540d\u79f0\uff0c\u7528\u4e8e\u65e5\u5fd7\n)(implicit p: Parameters) extends XSModule\n  with HasCircularQueuePtrHelper\n  with HasPerfEvents\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#2","title":"2. \u6570\u636e\u7ed3\u6784\u4e0e\u63a5\u53e3","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#21-io","title":"2.1 IO \u63a5\u53e3","text":"<pre><code>val io = IO(new Bundle() {\n  // \u5206\u914d\u63a5\u53e3\n  val allocateReq = Input(Vec(allocWidth, Bool()))    // \u5206\u914d\u8bf7\u6c42\n  val allocateSlot = Output(Vec(allocWidth, UInt()))  // \u5206\u914d\u7684\u8d44\u6e90ID\n  val canAllocate = Output(Vec(allocWidth, Bool()))   // \u662f\u5426\u53ef\u5206\u914d\n  val doAllocate = Input(Vec(allocWidth, Bool()))     // \u786e\u8ba4\u5206\u914d\n\n  // \u91ca\u653e\u63a5\u53e3\n  val free = Input(UInt(size.W))                      // \u91ca\u653e\u8d44\u6e90\u4f4d\u56fe\n\n  // \u72b6\u6001\u63a5\u53e3\n  val validCount = Output(UInt())                     // \u5df2\u5206\u914d\u8d44\u6e90\u6570\u91cf\n  val empty = Output(Bool())                          // \u8d44\u6e90\u6c60\u662f\u5426\u4e3a\u7a7a\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#22","title":"2.2 \u5185\u90e8\u6570\u636e\u7ed3\u6784","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#221","title":"2.2.1 \u5faa\u73af\u961f\u5217\u6307\u9488","text":"<pre><code>class FreeListPtr extends CircularQueuePtr[FreeListPtr](size)\nobject FreeListPtr {\n  def apply(f: Boolean, v: Int): FreeListPtr = {\n    val ptr = Wire(new FreeListPtr)\n    ptr.flag := f.B\n    ptr.value := v.U\n    ptr\n  }\n}\n\nval headPtr = RegInit(FreeListPtr(false, 0))  // \u7528\u4e8e\u5206\u914d\u8d44\u6e90\nval headPtrNext = Wire(new FreeListPtr)       // \u5206\u914d\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\nval tailPtr = RegInit(FreeListPtr(true, 0))   // \u7528\u4e8e\u63a5\u6536\u91ca\u653e\u8d44\u6e90\nval tailPtrNext = Wire(new FreeListPtr)       // \u91ca\u653e\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\n</code></pre> <p>\u6bcf\u4e2a\u6307\u9488\u5305\u542b\uff1a</p> <ul> <li><code>value</code>\uff1a0 \u5230 size-1 \u4e4b\u95f4\u7684\u7d22\u5f15\u503c</li> <li><code>flag</code>\uff1a\u5e03\u5c14\u6807\u5fd7\uff0c\u7528\u4e8e\u5904\u7406\u73af\u7ed5\u60c5\u51b5</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#222","title":"2.2.2 \u8d44\u6e90\u5b58\u50a8","text":"<pre><code>val freeList = RegInit(VecInit(\n  Seq.tabulate(size)(i =&gt; i.U(log2Up(size).W))\n))\n</code></pre> <p><code>freeList</code>\u5b58\u50a8\u53ef\u7528\u8d44\u6e90\u7684 ID\uff0c\u521d\u59cb\u5305\u542b 0 \u5230 size-1 \u7684\u6240\u6709 ID\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#223","title":"2.2.3 \u91ca\u653e\u63a9\u7801","text":"<pre><code>val freeMask = RegInit(0.U(size.W))          // \u7d2f\u79ef\u5f85\u91ca\u653e\u8d44\u6e90\u63a9\u7801\nval freeSelMask = Wire(UInt(size.W))         // \u672c\u5468\u671f\u5b9e\u9645\u91ca\u653e\u7684\u8d44\u6e90\u63a9\u7801\nval freeSelMaskVec = Wire(Vec(freeWidth, UInt(size.W)))  // \u6bcf\u4e2a\u91ca\u653e\u901a\u9053\u7684\u9009\u62e9\u63a9\u7801\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#3","title":"3. \u8d44\u6e90\u5206\u914d\u7b97\u6cd5","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#31","title":"3.1 \u6838\u5fc3\u5206\u914d\u6d41\u7a0b","text":"<pre><code>val doAllocate = io.doAllocate.asUInt.orR    // \u662f\u5426\u6709\u6709\u6548\u5206\u914d\nval numAllocate = PopCount(io.doAllocate)    // \u672c\u5468\u671f\u5b9e\u9645\u5206\u914d\u6570\u91cf\n\nfor (i &lt;- 0 until allocWidth) {\n  val offset = PopCount(io.allocateReq.take(i))  // \u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u7684\u504f\u79fb\u91cf\n\n  if (enablePreAlloc) {\n    // \u9884\u5206\u914d\u6a21\u5f0f\uff1a\u63d0\u524d\u8ba1\u7b97\u4e0b\u4e00\u5468\u671f\u7684\u5206\u914d\u7ed3\u679c\n    val deqPtr = headPtr + numAllocate + offset\n    io.canAllocate(i) := RegEnable(isBefore(deqPtr, tailPtr), enablePreAlloc.B)\n    io.allocateSlot(i) := RegEnable(freeList(deqPtr.value), enablePreAlloc.B)\n  } else {\n    // \u666e\u901a\u6a21\u5f0f\uff1a\u76f4\u63a5\u8ba1\u7b97\u5f53\u524d\u5468\u671f\u7684\u5206\u914d\u7ed3\u679c\n    val deqPtr = headPtr + offset\n    io.canAllocate(i) := isBefore(deqPtr, tailPtr)\n    io.allocateSlot(i) := freeList(deqPtr.value)\n  }\n}\n\n// \u66f4\u65b0\u5206\u914d\u6307\u9488\nheadPtrNext := headPtr + numAllocate\nheadPtr := Mux(doAllocate, headPtrNext, headPtr)\n</code></pre> <p>\u5173\u952e\u8981\u70b9\uff1a</p> <ol> <li>\u8ba1\u7b97\u6bcf\u4e2a\u5206\u914d\u4f4d\u7f6e\u7684\u504f\u79fb\u91cf\uff0c\u786e\u4fdd\u8d44\u6e90\u8fde\u7eed\u5206\u914d</li> <li>\u901a\u8fc7<code>isBefore</code>\u68c0\u67e5\u8d44\u6e90\u53ef\u7528\u6027\uff0c\u8003\u8651\u5faa\u73af\u961f\u5217\u73af\u7ed5</li> <li>\u8fd4\u56de\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8d44\u6e90 ID</li> <li>\u6839\u636e\u5b9e\u9645\u5206\u914d\u6570\u91cf\u66f4\u65b0\u6307\u9488</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#32","title":"3.2 \u9884\u5206\u914d\u6a21\u5f0f\uff08\u53ef\u9009\uff09","text":"<p>\u5f53<code>enablePreAlloc=true</code>\u65f6\uff0c\u6a21\u5757\u4f1a\u63d0\u524d\u8ba1\u7b97\u4e0b\u4e00\u5468\u671f\u7684\u5206\u914d\u7ed3\u679c\uff0c\u51cf\u5c11\u5173\u952e\u8def\u5f84\u5ef6\u8fdf\u3002\u8fd9\u4e3b\u8981\u901a\u8fc7<code>RegEnable</code>\u5b9e\u73b0\uff0c\u63d0\u524d\u4e00\u4e2a\u5468\u671f\u8ba1\u7b97\u5e76\u5bc4\u5b58\u7ed3\u679c\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#4","title":"4. \u8d44\u6e90\u91ca\u653e\u7b97\u6cd5","text":"<p>\u8d44\u6e90\u91ca\u653e\u662f FreeList \u4e2d\u6700\u590d\u6742\u7684\u90e8\u5206\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684\u591a\u901a\u9053\u5e76\u884c\u91ca\u653e\u673a\u5236\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#41","title":"4.1 \u4ea4\u9519\u5206\u7ec4","text":"<pre><code>// \u6309\u7167\u4f4d\u7f6e\u6a21freeWidth\u7684\u4f59\u6570\u63d0\u53d6\u4f4d\ndef getRemBits(input: UInt)(rem: Int): UInt = {\n  VecInit((0 until size / freeWidth).map(i =&gt; { input(freeWidth * i + rem) })).asUInt\n}\n\n// \u66f4\u65b0\u5f85\u91ca\u653e\u8d44\u6e90\u63a9\u7801\nfreeMask := (io.free | freeMask) &amp; ~freeSelMask\n\n// \u4e3a\u6bcf\u4e2a\u91ca\u653e\u901a\u9053\u63d0\u53d6\u8d1f\u8d23\u7684\u8d44\u6e90\u4f4d\nval remFreeSelMaskVec = VecInit(Seq.tabulate(freeWidth)(rem =&gt;\n  getRemBits((freeMask &amp; ~freeSelMask))(rem)))\n</code></pre> <p><code>getRemBits</code>\u51fd\u6570\u5b9e\u73b0\u4e86\u4ea4\u9519\u5206\u7ec4\u7b56\u7565\uff1a</p> <ul> <li>\u5c06\u8d44\u6e90\u6309\u7167\u4f4d\u7f6e\u6a21<code>freeWidth</code>\u7684\u4f59\u6570\u5206\u914d\u7ed9\u4e0d\u540c\u91ca\u653e\u901a\u9053</li> <li>\u6bcf\u4e2a\u901a\u9053\u53ea\u5904\u7406\u5176\u8d1f\u8d23\u7684\u8d44\u6e90\u5b50\u96c6\uff0c\u907f\u514d\u51b2\u7a81</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#42","title":"4.2 \u8d44\u6e90\u9009\u62e9","text":"<pre><code>// \u4e3a\u6bcf\u4e2a\u91ca\u653e\u901a\u9053\u9009\u62e9\u4e00\u4e2a\u8d44\u6e90\nval remFreeSelIndexOHVec = VecInit(Seq.tabulate(freeWidth)(fport =&gt; {\n  val highIndexOH = PriorityEncoderOH(remFreeSelMaskVec(fport))  // \u4f18\u5148\u9009\u62e9\u9ad8\u4f4d\u76841\n  val freeIndexOHVec = Wire(Vec(size, Bool()))\n  freeIndexOHVec.foreach(e =&gt; e := false.B)  // \u521d\u59cb\u5316\u4e3a\u51680\n  for (i &lt;- 0 until size / freeWidth) {\n    freeIndexOHVec(i * freeWidth + fport) := highIndexOH(i)  // \u6620\u5c04\u56de\u539f\u59cb\u4f4d\u7f6e\n  }\n  freeIndexOHVec.asUInt\n}))\n</code></pre> <p>\u6bcf\u4e2a\u901a\u9053\u901a\u8fc7\u4f18\u5148\u7f16\u7801\u5668\u4ece\u5176\u8d44\u6e90\u5b50\u96c6\u4e2d\u9009\u62e9\u4e00\u4e2a\u8d44\u6e90\uff0c\u7136\u540e\u5c06\u9009\u62e9\u7ed3\u679c\u6620\u5c04\u56de\u539f\u59cb\u4f4d\u7f6e\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#43","title":"4.3 \u6267\u884c\u91ca\u653e","text":"<pre><code>// \u786e\u5b9a\u54ea\u4e9b\u901a\u9053\u6709\u6709\u6548\u8bf7\u6c42\nval freeReq = GatedRegNext(VecInit(remFreeSelMaskVec.map(_.asUInt.orR)))\nval freeSlotOH = GatedRegNext(remFreeSelIndexOHVec)\nval doFree = freeReq.asUInt.orR  // \u662f\u5426\u6709\u4efb\u4f55\u91ca\u653e\u64cd\u4f5c\n\n// \u6267\u884c\u5b9e\u9645\u91ca\u653e\nfor (i &lt;- 0 until freeWidth) {\n  val offset = PopCount(freeReq.take(i))  // \u8ba1\u7b97\u5f53\u524d\u901a\u9053\u7684\u504f\u79fb\u91cf\n  val enqPtr = tailPtr + offset  // \u8ba1\u7b97\u653e\u7f6e\u4f4d\u7f6e\n\n  when (freeReq(i)) {\n    freeList(enqPtr.value) := OHToUInt(freeSlotOH(i))  // \u5c06\u8d44\u6e90ID\u653e\u56defreeList\n  }\n\n  freeSelMaskVec(i) := Mux(freeReq(i), freeSlotOH(i), 0.U)\n}\n\n// \u66f4\u65b0\u91ca\u653e\u6307\u9488\ntailPtrNext := tailPtr + PopCount(freeReq)\ntailPtr := Mux(doFree, tailPtrNext, tailPtr)\n</code></pre> <p>\u5173\u952e\u6b65\u9aa4\uff1a</p> <ol> <li>\u786e\u5b9a\u6bcf\u4e2a\u901a\u9053\u662f\u5426\u6709\u6709\u6548\u8bf7\u6c42</li> <li>\u8ba1\u7b97\u504f\u79fb\u91cf\u4ee5\u786e\u4fdd\u8d44\u6e90\u7d27\u51d1\u653e\u7f6e</li> <li>\u5c06\u8d44\u6e90 ID \u653e\u56de freeList \u76f8\u5e94\u4f4d\u7f6e</li> <li>\u66f4\u65b0\u5c3e\u6307\u9488\uff0c\u53cd\u6620\u65b0\u589e\u7684\u53ef\u7528\u8d44\u6e90</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#5","title":"5. \u72b6\u6001\u7ba1\u7406\u4e0e\u6027\u80fd\u76d1\u63a7","text":"<pre><code>// \u8ba1\u7b97\u53ef\u7528\u8d44\u6e90\u6570\u91cf\nval freeSlotCnt = RegInit(size.U(log2Up(size + 1).W))\nfreeSlotCnt := distanceBetween(tailPtrNext, headPtrNext)\n\n// \u8f93\u51fa\u72b6\u6001\u4fe1\u53f7\nio.empty := freeSlotCnt === 0.U\nio.validCount := size.U - freeSlotCnt\n\n// \u6027\u80fd\u8ba1\u6570\nXSPerfAccumulate(\"empty\", io.empty)\nval perfEvents: Seq[(String, UInt)] = Seq(\n  (\"empty\", io.empty)\n)\ngeneratePerfEvent()\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#6","title":"6. \u6b63\u786e\u6027\u9a8c\u8bc1","text":"<pre><code>val enableFreeListCheck = false\nif (enableFreeListCheck) {\n  // \u8ba1\u7b97\u6709\u6548\u8d44\u6e90\u533a\u57df\u63a9\u7801\n  val differentFlag = tailPtr.flag ^ headPtr.flag\n  val headMask = UIntToMask(headPtr.value, size)\n  val tailMask = UIntToMask(tailPtr.value, size)\n  val validMask1 = Mux(differentFlag, ~tailMask, tailMask ^ headMask)\n  val validMask2 = Mux(differentFlag, headMask, 0.U(size.W))\n  val validMask = ~(validMask1 | validMask2)\n\n  // \u68c0\u67e5\u91cd\u590d\u8d44\u6e90\n  for (i &lt;- 0 until size) {\n    for (j &lt;- i+1 until size) {\n      if (i != j) {\n        XSError(validMask(i) &amp;&amp; validMask(j) &amp;&amp; freeList(i) === freeList(j),\n                s\"Found same entry in free list! (i=$i j=$j)\\n\")\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#7-freelist-freewidth2-size4","title":"7. FreeList \u8d44\u6e90\u91ca\u653e\u7b97\u6cd5\u5b9e\u4f8b\u5206\u6790\uff1a<code>freeWidth=2, size=4</code>","text":"<p>\u6211\u5c06\u901a\u8fc7\u4e00\u4e2a\u5177\u4f53\u4f8b\u5b50\u8be6\u7ec6\u5c55\u793a FreeList \u7684\u8d44\u6e90\u91ca\u653e\u7b97\u6cd5\u6d41\u7a0b\u3002\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\uff1a</p> <ul> <li><code>size = 4</code>\uff08\u8d44\u6e90\u6c60\u5927\u5c0f\u4e3a 4\uff09</li> <li><code>freeWidth = 2</code>\uff08\u6bcf\u5468\u671f\u6700\u591a\u5e76\u884c\u91ca\u653e 2 \u4e2a\u8d44\u6e90\uff09</li> <li>\u8981\u91ca\u653e\u7684\u8d44\u6e90 ID \u4e3a 1 \u548c 3</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#_1","title":"\u521d\u59cb\u72b6\u6001","text":"<p>\u5047\u8bbe\u7cfb\u7edf\u7684\u521d\u59cb\u72b6\u6001\u4e3a\uff1a</p> <ul> <li><code>freeList = [0, 2, x, x]</code>\uff08x \u8868\u793a\u5c1a\u672a\u4f7f\u7528\u7684\u4f4d\u7f6e\uff09</li> <li><code>headPtr = {value=2, flag=0}</code>\uff08\u4e0b\u4e00\u4e2a\u8981\u5206\u914d\u7684\u4f4d\u7f6e\uff09</li> <li><code>tailPtr = {value=0, flag=0}</code>\uff08\u4e0b\u4e00\u4e2a\u91ca\u653e\u8d44\u6e90\u5c06\u653e\u5165\u7684\u4f4d\u7f6e\uff09</li> <li><code>freeMask = 0000</code>\uff08\u5f53\u524d\u65e0\u7d2f\u79ef\u7684\u5f85\u91ca\u653e\u8d44\u6e90\uff09</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#1_1","title":"\u7b2c 1 \u6b65\uff1a\u63a5\u6536\u91ca\u653e\u8bf7\u6c42","text":"<p>\u8d44\u6e90 ID 1 \u548c 3 \u9700\u8981\u91ca\u653e\uff0c\u5bf9\u5e94\u7684\u91ca\u653e\u4f4d\u56fe\u4e3a\uff1a</p> <pre><code>io.free = 1010 (\u4e8c\u8fdb\u5236\uff0c\u6700\u53f3\u8fb9\u662f\u4f4d\u7f6e0)\n           \u2502 \u2502\n           \u2502 \u2514\u2500\u2500 \u4f4d\u7f6e1 (\u8d44\u6e90ID 1)\n           \u2514\u2500\u2500\u2500\u2500 \u4f4d\u7f6e3 (\u8d44\u6e90ID 3)\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#2-freemask","title":"\u7b2c 2 \u6b65\uff1a\u66f4\u65b0 freeMask","text":"<pre><code>freeMask := (io.free | freeMask) &amp; ~freeSelMask\n</code></pre> <p>\u8ba1\u7b97\u8fc7\u7a0b\uff1a</p> <ul> <li><code>io.free = 1010</code></li> <li><code>freeMask = 0000</code>\uff08\u521d\u59cb\u503c\uff09</li> <li><code>freeSelMask = 0000</code>\uff08\u521d\u59cb\u503c\uff0c\u8868\u793a\u672c\u5468\u671f\u5c1a\u672a\u9009\u62e9\u4efb\u4f55\u8d44\u6e90\uff09</li> <li>\u65b0\u7684<code>freeMask = (1010 | 0000) &amp; ~0000 = 1010</code></li> </ul> <p>\u7ed3\u679c\uff1a<code>freeMask = 1010</code>\uff0c\u8868\u793a\u8d44\u6e90 ID 1 \u548c 3 \u5f85\u91ca\u653e\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#3_1","title":"\u7b2c 3 \u6b65\uff1a\u4ea4\u9519\u5206\u7ec4","text":"<p>\u6839\u636e<code>getRemBits</code>\u51fd\u6570\u5c06\u8d44\u6e90\u6309\u7167\u4f59\u6570\u5206\u7ec4\uff1a</p> <pre><code>\u8d44\u6e90\u4f4d\u7f6e:    3  2  1  0\nfreeMask:    1  0  1  0\n            -----------\n\u4f59\u6570(\u4f4d\u7f6e%2):  1  0  1  0\n            -----------\n\u8d1f\u8d23\u901a\u9053:     c1 c0 c1 c0\n</code></pre> <p>\u63d0\u53d6\u5404\u901a\u9053\u8d1f\u8d23\u7684\u4f4d\uff1a</p> <ul> <li>\u901a\u9053 0 (rem=0) \u8d1f\u8d23\u5076\u6570\u4f4d: <code>[b2,b0] = [0,0]</code></li> <li>\u901a\u9053 1 (rem=1) \u8d1f\u8d23\u5947\u6570\u4f4d: <code>[b3,b1] = [1,1]</code></li> </ul> <p>\u6240\u4ee5<code>remFreeSelMaskVec</code>\u7ed3\u679c\u4e3a\uff1a</p> <ul> <li><code>remFreeSelMaskVec(0) = 00</code> (\u901a\u9053 0 \u65e0\u8d44\u6e90\u53ef\u91ca\u653e)</li> <li><code>remFreeSelMaskVec(1) = 11</code> (\u901a\u9053 1 \u6709\u4e24\u4e2a\u8d44\u6e90\u53ef\u91ca\u653e)</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#4_1","title":"\u7b2c 4 \u6b65\uff1a\u9009\u62e9\u8981\u91ca\u653e\u7684\u8d44\u6e90","text":"<pre><code>val remFreeSelIndexOHVec = VecInit(Seq.tabulate(freeWidth)(fport =&gt; {\n  val highIndexOH = PriorityEncoderOH(remFreeSelMaskVec(fport))\n  val freeIndexOHVec = Wire(Vec(size, Bool()))\n  freeIndexOHVec.foreach(e =&gt; e := false.B)\n  for (i &lt;- 0 until size / freeWidth) {\n    freeIndexOHVec(i * freeWidth + fport) := highIndexOH(i)\n  }\n  freeIndexOHVec.asUInt\n}))\n</code></pre> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u901a\u9053\u4f7f\u7528\u4f18\u5148\u7f16\u7801\u5668\u9009\u62e9\uff1a</p> <ul> <li>\u901a\u9053 0\uff1a<code>remFreeSelMaskVec(0) = 00</code>\uff0c\u65e0\u53ef\u9009\u8d44\u6e90\uff0c<code>highIndexOH = 00</code></li> <li>\u901a\u9053 1\uff1a<code>remFreeSelMaskVec(1) = 11</code>\uff0c\u4f18\u5148\u9009\u62e9\u9ad8\u4f4d\uff0c<code>highIndexOH = 10</code>\uff08\u9009\u62e9\u4e86\u7b2c 1 \u4f4d\uff0c\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u4ece\u53f3\u5f80\u5de6\u6570\u7684\u7b2c\u4e8c\u4e2a 1\uff09</li> </ul> <p>\u5c06\u9009\u62e9\u6620\u5c04\u56de\u539f\u59cb\u4f4d\u7f6e\uff1a</p> <ul> <li>\u901a\u9053 0\uff1a\u65e0\u9009\u62e9\uff0c\u7ed3\u679c\u4e3a<code>0000</code></li> <li>\u901a\u9053 1\uff1a\u9009\u62e9\u4e86\u5b50\u96c6\u4e2d\u7684\u7d22\u5f15 1\uff0c\u6620\u5c04\u5230\u539f\u59cb\u4f4d\u7f6e\u4e3a<code>1*2+1 = 3</code>\uff0c\u7ed3\u679c\u4e3a<code>1000</code>\uff08\u8d44\u6e90 ID 3\uff09</li> </ul> <p>\u6240\u4ee5<code>remFreeSelIndexOHVec</code>\u7ed3\u679c\u4e3a\uff1a</p> <ul> <li><code>remFreeSelIndexOHVec(0) = 0000</code></li> <li><code>remFreeSelIndexOHVec(1) = 1000</code></li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#5_1","title":"\u7b2c 5 \u6b65\uff1a\u786e\u5b9a\u5b9e\u9645\u91ca\u653e\u8bf7\u6c42","text":"<pre><code>val freeReq = GatedRegNext(VecInit(remFreeSelMaskVec.map(_.asUInt.orR)))\nval freeSlotOH = GatedRegNext(remFreeSelIndexOHVec)\nval doFree = freeReq.asUInt.orR\n</code></pre> <p>\u68c0\u67e5\u6bcf\u4e2a\u901a\u9053\u662f\u5426\u6709\u6709\u6548\u8bf7\u6c42\uff1a</p> <ul> <li><code>freeReq(0) = 00.orR = 0</code>\uff08\u901a\u9053 0 \u65e0\u8bf7\u6c42\uff09</li> <li><code>freeReq(1) = 11.orR = 1</code>\uff08\u901a\u9053 1 \u6709\u8bf7\u6c42\uff09</li> </ul> <p>\u6240\u4ee5<code>freeReq = 01</code>\uff0c<code>doFree = true</code>\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#6_1","title":"\u7b2c 6 \u6b65\uff1a\u6267\u884c\u91ca\u653e\u64cd\u4f5c","text":"<pre><code>for (i &lt;- 0 until freeWidth) {\n  val offset = PopCount(freeReq.take(i))\n  val enqPtr = tailPtr + offset\n\n  when (freeReq(i)) {\n    freeList(enqPtr.value) := OHToUInt(freeSlotOH(i))\n  }\n\n  freeSelMaskVec(i) := Mux(freeReq(i), freeSlotOH(i), 0.U)\n}\n</code></pre> <p>\u5904\u7406\u6bcf\u4e2a\u901a\u9053\uff1a</p> <ul> <li> <p>\u901a\u9053 0 (i=0)\uff1a</p> <ul> <li><code>offset = 0</code>\uff08\u524d\u9762\u6ca1\u6709\u6709\u6548\u8bf7\u6c42\uff09</li> <li><code>enqPtr = tailPtr + 0 = 0</code></li> <li><code>freeReq(0) = 0</code>\uff0c\u4e0d\u6267\u884c\u64cd\u4f5c</li> <li><code>freeSelMaskVec(0) = 0000</code></li> </ul> </li> <li> <p>\u901a\u9053 1 (i=1)\uff1a</p> <ul> <li><code>offset = 0</code>\uff08\u524d\u9762\u901a\u9053 0 \u6ca1\u6709\u6709\u6548\u8bf7\u6c42\uff09</li> <li><code>enqPtr = tailPtr + 0 = 0</code></li> <li><code>freeReq(1) = 1</code>\uff0c\u6267\u884c\u91ca\u653e\uff1a<code>freeList(0) = OHToUInt(1000) = 3</code></li> <li><code>freeSelMaskVec(1) = 1000</code></li> </ul> </li> </ul> <p>\u6700\u7ec8<code>freeSelMask = freeSelMaskVec(0) | freeSelMaskVec(1) = 0000 | 1000 = 1000</code></p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#7","title":"\u7b2c 7 \u6b65\uff1a\u66f4\u65b0\u5c3e\u6307\u9488","text":"<pre><code>tailPtrNext := tailPtr + PopCount(freeReq)\ntailPtr := Mux(doFree, tailPtrNext, tailPtr)\n</code></pre> <ul> <li><code>PopCount(freeReq) = PopCount(01) = 1</code>\uff08\u5171\u6709 1 \u4e2a\u6709\u6548\u91ca\u653e\u8bf7\u6c42\uff09</li> <li><code>tailPtrNext = tailPtr + 1 = 1</code></li> <li>\u7531\u4e8e<code>doFree = true</code>\uff0c\u6240\u4ee5<code>tailPtr</code>\u66f4\u65b0\u4e3a 1</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#8","title":"\u7b2c 8 \u6b65\uff1a\u66f4\u65b0\u72b6\u6001","text":"<p>\u5728\u4e0b\u4e00\u4e2a\u5468\u671f\uff0c\u7cfb\u7edf\u72b6\u6001\u66f4\u65b0\u4e3a\uff1a</p> <ul> <li><code>freeList = [3, 2, x, x]</code>\uff08\u91ca\u653e\u7684\u8d44\u6e90 ID 3 \u5df2\u653e\u5165\u4f4d\u7f6e 0\uff09</li> <li><code>headPtr = {value=2, flag=0}</code>\uff08\u4fdd\u6301\u4e0d\u53d8\uff09</li> <li><code>tailPtr = {value=1, flag=0}</code>\uff08\u5df2\u66f4\u65b0\uff09</li> <li><code>freeMask = 0010</code>\uff081010 &amp; ~1000\uff0c\u8d44\u6e90 ID 1 \u4ecd\u5f85\u91ca\u653e\uff09</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#_2","title":"\u4e0b\u4e00\u5468\u671f","text":"<p>\u5728\u63a5\u4e0b\u6765\u7684\u5468\u671f\uff0c\u7cfb\u7edf\u4f1a\u7ee7\u7eed\u5904\u7406\u5269\u4f59\u7684\u91ca\u653e\u8bf7\u6c42\uff08\u8d44\u6e90 ID 1\uff09\uff1a</p> <ol> <li>freeMask \u66f4\u65b0\uff1a\u4ecd\u4e3a 0010</li> <li>\u4ea4\u9519\u5206\u7ec4\uff1a<ul> <li>\u901a\u9053 0: <code>[b2,b0] = [0,0]</code> \u65e0\u8d44\u6e90</li> <li>\u901a\u9053 1: <code>[b3,b1] = [0,1]</code> \u6709\u8d44\u6e90 ID 1</li> </ul> </li> <li>\u9009\u62e9\u8d44\u6e90\uff1a<ul> <li>\u901a\u9053 1 \u9009\u62e9\u8d44\u6e90 ID 1</li> </ul> </li> <li>\u6267\u884c\u91ca\u653e\uff1a<ul> <li><code>freeList(1) = 1</code></li> </ul> </li> <li>\u66f4\u65b0\u5c3e\u6307\u9488\uff1a<ul> <li><code>tailPtr</code>\u66f4\u65b0\u4e3a 2</li> </ul> </li> </ol> <p>\u6700\u7ec8\u72b6\u6001\uff1a</p> <ul> <li><code>freeList = [3, 1, x, x]</code></li> <li><code>headPtr = {value=2, flag=0}</code></li> <li><code>tailPtr = {value=2, flag=0}</code></li> <li><code>freeMask = 0000</code>\uff08\u6240\u6709\u91ca\u653e\u8bf7\u6c42\u5df2\u5904\u7406\uff09</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#_3","title":"\u5173\u952e\u673a\u5236\u603b\u7ed3","text":"<p>\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86 FreeList \u91ca\u653e\u7b97\u6cd5\u7684\u6838\u5fc3\u673a\u5236\uff1a</p> <ol> <li>\u4ea4\u9519\u5206\u7ec4\uff1a\u6309\u4f59\u6570\u5c06\u8d44\u6e90\u5206\u914d\u7ed9\u4e0d\u540c\u901a\u9053\uff08\u5076\u6570\u4f4d\u7ed9\u901a\u9053 0\uff0c\u5947\u6570\u4f4d\u7ed9\u901a\u9053 1\uff09</li> <li>\u4f18\u5148\u9009\u62e9\uff1a\u6bcf\u4e2a\u901a\u9053\u5185\u90e8\u4f7f\u7528\u4f18\u5148\u7f16\u7801\u5668\u9009\u62e9\u9ad8\u4f4d</li> <li>\u538b\u7f29\u5e03\u7f6e\uff1a\u6839\u636e\u6709\u6548\u8bf7\u6c42\u8ba1\u7b97\u504f\u79fb\u91cf\uff0c\u786e\u4fdd\u8d44\u6e90\u7d27\u51d1\u653e\u7f6e</li> <li>\u72ec\u7acb\u5904\u7406\uff1a\u6bcf\u4e2a\u901a\u9053\u53ef\u4ee5\u72ec\u7acb\u5904\u7406\u81ea\u5df1\u8d1f\u8d23\u7684\u8d44\u6e90\u5b50\u96c6</li> </ol> <p>\u8fd9\u79cd\u8bbe\u8ba1\u80fd\u591f\u5728\u4fdd\u8bc1\u6b63\u786e\u6027\u7684\u540c\u65f6\u5b9e\u73b0\u9ad8\u6548\u7684\u5e76\u884c\u8d44\u6e90\u91ca\u653e\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/freelist/#8_1","title":"8. \u603b\u7ed3\u4e0e\u5e94\u7528","text":"<p>FreeList \u6a21\u5757\u5b9e\u73b0\u4e86\u4e00\u4e2a\"\u5faa\u73af ID \u7ba1\u7406\u961f\u5217\"\u6570\u636e\u7ed3\u6784\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a</p> <ol> <li>\u9ad8\u6548\u5206\u914d\uff1aO(1)\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8d44\u6e90\u5206\u914d</li> <li>\u5e76\u884c\u91ca\u653e\uff1a\u901a\u8fc7\u4ea4\u9519\u5206\u7ec4\u652f\u6301\u591a\u901a\u9053\u65e0\u51b2\u7a81\u5e76\u884c\u91ca\u653e</li> <li>\u5faa\u73af\u590d\u7528\uff1a\u4f7f\u7528\u5faa\u73af\u961f\u5217\u673a\u5236\u5b9e\u73b0\u6709\u9650\u8d44\u6e90\u7684\u65e0\u9650\u590d\u7528</li> <li>\u6b63\u786e\u6027\u4fdd\u8bc1\uff1a\u901a\u8fc7\u6307\u9488\u548c\u6807\u5fd7\u4f4d\u7ef4\u62a4\u8d44\u6e90\u72b6\u6001</li> <li>\u6027\u80fd\u4f18\u5316\uff1a\u53ef\u9009\u7684\u9884\u5206\u914d\u529f\u80fd\u51cf\u5c11\u5173\u952e\u8def\u5f84\u5ef6\u8fdf</li> </ol> <p>\u5728 XiangShan \u5904\u7406\u5668\u7684 LSQ \u7cfb\u7edf\u4e2d\uff0cFreeList \u4e3a LoadQueue \u548c StoreQueue \u63d0\u4f9b\u4e86\u57fa\u7840\u8d44\u6e90\u7ba1\u7406\u529f\u80fd\uff0c\u662f\u4e71\u5e8f\u6267\u884c\u6838\u5fc3\u7684\u5173\u952e\u7ec4\u4ef6\u4e4b\u4e00\u3002</p> <p>Warning</p> <p>\u6f5c\u5728\u95ee\u9898: free\u7684bitmap\u5982\u679c\u6620\u5c04\u5230\u4e86\u540c\u4e00\u4e2afreeport\u5e94\u8be5\u600e\u4e48\u529e\uff0c\u7406\u8bba\u4e0a\u4e00\u4e2aport\u4e00\u6b21\u53ea\u80fd\u5904\u7406\u4e00\u4e2a(PriorityEncoder\u9009\u51fa)</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/","title":"LoadMisalignBuffer","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#1","title":"1. \u6a21\u5757\u6982\u8ff0","text":"<p><code>LoadMisalignBuffer.scala</code> \u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e13\u7528\u7684\u975e\u5bf9\u9f50\u52a0\u8f7d\u5904\u7406\u5668\uff0c\u4f5c\u4e3a XiangShan \u5904\u7406\u5668 LSQ \u7cfb\u7edf\u4e2d\u5904\u7406\u975e\u5bf9\u9f50\u5185\u5b58\u8bbf\u95ee\u7684\u5173\u952e\u7ec4\u4ef6\u3002\u5f53\u52a0\u8f7d\u6307\u4ee4\u7684\u5730\u5740\u672a\u6309\u6570\u636e\u7c7b\u578b\u5927\u5c0f\u5bf9\u9f50\u65f6\uff08\u5982\u534a\u5b57\u3001\u5b57\u6216\u53cc\u5b57\u52a0\u8f7d\u7684\u5730\u5740\u975e\u5bf9\u9f50\uff09\uff0c\u8be5\u6a21\u5757\u8d1f\u8d23\u5c06\u975e\u5bf9\u9f50\u8bbf\u95ee\u5206\u89e3\u4e3a\u591a\u4e2a\u5bf9\u9f50\u8bbf\u95ee\uff0c\u7136\u540e\u5408\u5e76\u7ed3\u679c\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#11","title":"1.1 \u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u68c0\u6d4b\u548c\u5904\u7406\u975e\u5bf9\u9f50\u52a0\u8f7d\u6307\u4ee4</li> <li>\u5c06\u975e\u5bf9\u9f50\u8bbf\u95ee\u5206\u5272\u4e3a\u6700\u591a\u4e24\u4e2a\u5bf9\u9f50\u8bbf\u95ee</li> <li>\u6839\u636e\u6307\u4ee4\u7c7b\u578b\u548c\u5730\u5740\u7cbe\u786e\u8ba1\u7b97\u5206\u5272\u65b9\u5f0f</li> <li>\u7ba1\u7406\u5206\u5272\u540e\u8bf7\u6c42\u7684\u53d1\u9001\u548c\u63a5\u6536</li> <li>\u5408\u5e76\u5206\u5272\u8bbf\u95ee\u7684\u7ed3\u679c\u5e76\u5904\u7406\u5b57\u8282\u5bf9\u9f50</li> <li>\u5904\u7406\u5f02\u5e38\u60c5\u51b5\uff0c\u7279\u522b\u662f\u8de8\u9875\u5f02\u5e38</li> <li>\u652f\u6301\u5411\u91cf\u548c\u6807\u91cf\u975e\u5bf9\u9f50\u52a0\u8f7d\u6307\u4ee4</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#12","title":"1.2 \u6a21\u5757\u5b9a\u4e49","text":"<pre><code>class LoadMisalignBuffer(implicit p: Parameters) extends XSModule\n  with HasCircularQueuePtrHelper\n  with HasLoadHelper\n  with HasTlbConst {\n  // \u6a21\u5757\u5b9e\u73b0\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#2","title":"2. \u7cfb\u7edf\u67b6\u6784","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#21","title":"2.1 \u5185\u90e8\u72b6\u6001\u673a\u8bbe\u8ba1","text":"<p>LoadMisalignBuffer \u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u529f\u80fd\u6a21\u5757\uff0c\u4f7f\u7528\u72b6\u6001\u673a\u63a7\u5236\u975e\u5bf9\u9f50\u52a0\u8f7d\u7684\u5904\u7406\u6d41\u7a0b\uff1a</p> <pre><code>val s_idle :: s_split :: s_req :: s_resp :: s_comb_wakeup_rep :: s_wb :: Nil = Enum(6)\nval bufferState = RegInit(s_idle)\n</code></pre> <ul> <li>s_idle: \u7a7a\u95f2\u72b6\u6001\uff0c\u7b49\u5f85\u65b0\u8bf7\u6c42</li> <li>s_split: \u5206\u5272\u975e\u5bf9\u9f50\u52a0\u8f7d\uff0c\u786e\u5b9a\u5206\u5272\u65b9\u6848</li> <li>s_req: \u53d1\u9001\u5206\u5272\u540e\u7684\u8bf7\u6c42</li> <li>s_resp: \u63a5\u6536\u5206\u5272\u8bf7\u6c42\u7684\u54cd\u5e94</li> <li>s_comb_wakeup_rep: \u5408\u5e76\u5206\u5272\u7ed3\u679c\u6570\u636e</li> <li>s_wb: \u5c06\u7ed3\u679c\u5199\u56de</li> </ul> <p>\u8be5\u6a21\u5757\u8bbe\u8ba1\u4e3a\u5355\u4f8b\u67b6\u6784\uff08\u53ea\u80fd\u540c\u65f6\u5904\u7406\u4e00\u4e2a\u975e\u5bf9\u9f50\u8bf7\u6c42\uff09\uff0c\u8bbe\u7f6e\u4e86\u4ee5\u4e0b\u5173\u952e\u53c2\u6570\uff1a - <code>enqPortNum = LoadPipelineWidth</code>: \u5165\u961f\u7aef\u53e3\u6570\u91cf - <code>maxSplitNum = 2</code>: \u6700\u5927\u5206\u5272\u6570\u91cf\uff0c\u56fa\u5b9a\u4e3a2</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#22","title":"2.2 \u5728\u5904\u7406\u5668\u5185\u5b58\u7cfb\u7edf\u4e2d\u7684\u4f4d\u7f6e","text":"<p>LoadMisalignBuffer \u4f4d\u4e8e XiangShan \u5904\u7406\u5668\u7684\u5185\u5b58\u8bbf\u95ee\u7cfb\u7edf\u4e2d\uff0c\u4e0e LoadUnit\u3001LSQ \u548c\u7f13\u5b58\u7cfb\u7edf\u7d27\u5bc6\u4ea4\u4e92\uff0c\u4e3a\u975e\u5bf9\u9f50\u5185\u5b58\u8bbf\u95ee\u63d0\u4f9b\u4e13\u95e8\u4f18\u5316\u3002\u5b83\u63a5\u6536\u6765\u81ea LoadUnit \u7684\u975e\u5bf9\u9f50\u8bf7\u6c42\uff0c\u5206\u5272\u540e\u518d\u901a\u8fc7 LoadUnit \u8bbf\u95ee\u7f13\u5b58\uff0c\u6700\u540e\u5408\u5e76\u7ed3\u679c\u8fd4\u56de\u7ed9\u5904\u7406\u5668\u540e\u7aef\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#3","title":"3. \u6570\u636e\u7ed3\u6784\u4e0e\u63a5\u53e3","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#31-io","title":"3.1 IO \u63a5\u53e3","text":"<pre><code>val io = IO(new Bundle() {\n  val redirect        = Flipped(Valid(new Redirect))          // \u91cd\u5b9a\u5411\u4fe1\u53f7\n  val enq             = Vec(enqPortNum, Flipped(new MisalignBufferEnqIO))  // \u975e\u5bf9\u9f50\u8bf7\u6c42\u5165\u961f\u63a5\u53e3\n  val rob             = Flipped(new RobLsqIO)                 // ROB\u63a5\u53e3\n  val splitLoadReq    = Decoupled(new LsPipelineBundle)       // \u5206\u5272\u52a0\u8f7d\u8bf7\u6c42\u63a5\u53e3\n  val splitLoadResp   = Flipped(Valid(new LqWriteBundle))     // \u5206\u5272\u52a0\u8f7d\u54cd\u5e94\u63a5\u53e3\n  val writeBack       = Decoupled(new MemExuOutput)           // \u6807\u91cf\u7ed3\u679c\u5199\u56de\u63a5\u53e3\n  val vecWriteBack    = Decoupled(new VecPipelineFeedbackIO(isVStore = false))  // \u5411\u91cf\u7ed3\u679c\u5199\u56de\u63a5\u53e3\n  val loadOutValid    = Input(Bool())                         // \u6807\u91cf\u52a0\u8f7d\u8f93\u51fa\u6709\u6548\u4fe1\u53f7\n  val loadVecOutValid = Input(Bool())                         // \u5411\u91cf\u52a0\u8f7d\u8f93\u51fa\u6709\u6548\u4fe1\u53f7\n  val overwriteExpBuf = Output(new XSBundle {...})            // \u8986\u76d6\u5f02\u5e38\u7f13\u51b2\u533a\u4fe1\u606f\n  val flushLdExpBuff  = Output(Bool())                        // \u5237\u65b0\u52a0\u8f7d\u5f02\u5e38\u7f13\u51b2\u533a\n  val loadMisalignFull = Output(Bool())                       // \u7f13\u51b2\u533a\u6ee1\u4fe1\u53f7\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#4","title":"4. \u5185\u90e8\u6570\u636e\u7ed3\u6784\u4e0e\u72b6\u6001","text":"<p>LoadMisalignBuffer \u7ef4\u62a4\u4ee5\u4e0b\u5173\u952e\u5185\u90e8\u72b6\u6001\u548c\u6570\u636e\u7ed3\u6784\uff1a</p> <pre><code>// \u8bf7\u6c42\u548c\u6709\u6548\u4f4d\nval req_valid = RegInit(false.B)           // \u5f53\u524d\u662f\u5426\u6709\u6709\u6548\u8bf7\u6c42\nval req = Reg(new LqWriteBundle)           // \u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u8bf7\u6c42\n\n// \u5206\u5272\u8bf7\u6c42\u548c\u54cd\u5e94\u5b58\u50a8\nval splitLoadReqs = RegInit(VecInit(List.fill(maxSplitNum)(0.U.asTypeOf(new LsPipelineBundle))))\nval splitLoadResp = RegInit(VecInit(List.fill(maxSplitNum)(0.U.asTypeOf(new LqWriteBundle))))\n\n// \u5206\u5272\u63a7\u5236\u548c\u72b6\u6001\nval exceptionVec = RegInit(0.U.asTypeOf(ExceptionVec()))  // \u5f02\u5e38\u5411\u91cf\nval unSentLoads = RegInit(0.U(maxSplitNum.W))             // \u672a\u53d1\u9001\u7684\u52a0\u8f7d\u8bf7\u6c42\u4f4d\u56fe\nval curPtr = RegInit(0.U(log2Ceil(maxSplitNum).W))        // \u5f53\u524d\u5904\u7406\u7684\u5206\u5272\u8bf7\u6c42\u6307\u9488\n\n// \u7ed3\u679c\u5904\u7406\nval combinedData = RegInit(0.U(XLEN.W))                   // \u5408\u5e76\u540e\u7684\u6570\u636e\n\n// \u5206\u5272\u7ed3\u679c\u5904\u7406\u63a7\u5236\nval lowResultShift = RegInit(0.U(3.W))  // \u4f4e\u5730\u5740\u7ed3\u679c\u9700\u79fb\u4f4d\u7684\u5b57\u8282\u6570\nval lowResultWidth = RegInit(0.U(3.W))  // \u4f4e\u5730\u5740\u7ed3\u679c\u9700\u4fdd\u7559\u7684\u5b57\u8282\u6570\nval highResultShift = RegInit(0.U(3.W)) // \u9ad8\u5730\u5740\u7ed3\u679c\u9700\u79fb\u4f4d\u7684\u5b57\u8282\u6570\nval highResultWidth = RegInit(0.U(3.W)) // \u9ad8\u5730\u5740\u7ed3\u679c\u9700\u4fdd\u7559\u7684\u5b57\u8282\u6570\n\n// \u5168\u5c40\u72b6\u6001\u6807\u5fd7\nval globalException = RegInit(false.B)  // \u662f\u5426\u6709\u5f02\u5e38\nval globalUncache = RegInit(false.B)    // \u662f\u5426\u8bbf\u95ee\u975e\u7f13\u5b58\u533a\u57df\nval globalMMIO = RegInit(false.B)       // \u662f\u5426MMIO\u8bbf\u95ee\nval globalNC = RegInit(false.B)         // \u662f\u5426NC\u8bbf\u95ee\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#5","title":"5. \u975e\u5bf9\u9f50\u52a0\u8f7d\u5904\u7406\u6d41\u7a0b","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#51","title":"5.1 \u8bf7\u6c42\u63a5\u6536\u4e0e\u9009\u62e9","text":"<p>LoadMisalignBuffer \u4ece\u591a\u4e2a\u52a0\u8f7d\u5355\u5143\u63a5\u6536\u975e\u5bf9\u9f50\u8bf7\u6c42\uff0c\u5e76\u9009\u62e9\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5904\u7406\uff1a</p> <pre><code>val select_req_bit = ParallelPriorityMux(io.enq.map(_.req.valid), io.enq.map(_.req.bits))\nval select_req_valid = io.enq.map(_.req.valid).reduce(_ || _)\nval canEnqValid = !req_valid &amp;&amp; !select_req_bit.uop.robIdx.needFlush(io.redirect) &amp;&amp; select_req_valid\n\nwhen(canEnqValid) {\n  req := select_req_bit\n  req_valid := true.B\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#52","title":"5.2 \u68c0\u6d4b\u975e\u5bf9\u9f50\u8bbf\u95ee","text":"<p>\u68c0\u6d4b\u8bbf\u95ee\u662f\u5426\u8de8\u8d8a16\u5b57\u8282\u8fb9\u754c\uff1a</p> <pre><code>val alignedType = Mux(req.isvec, req.alignedType(1,0), req.uop.fuOpType(1, 0))\nval highAddress = LookupTree(alignedType, List(\n  LB -&gt; 0.U,\n  LH -&gt; 1.U,\n  LW -&gt; 3.U,\n  LD -&gt; 7.U\n)) + req.vaddr(4, 0)\nval cross16BytesBoundary = req_valid &amp;&amp; (highAddress(4) =/= req.vaddr(4))\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#53","title":"5.3 \u5206\u5272\u975e\u5bf9\u9f50\u8bbf\u95ee","text":"<p>\u6839\u636e\u6307\u4ee4\u7c7b\u578b\u548c\u5730\u5740\uff0c\u5c06\u975e\u5bf9\u9f50\u8bbf\u95ee\u5206\u5272\u4e3a\u4e24\u4e2a\u5bf9\u9f50\u8bbf\u95ee\uff1a</p> <pre><code>when (bufferState === s_split) {\n  when (!cross16BytesBoundary) {\n    assert(false.B, s\"There should be no non-aligned access that does not cross 16Byte boundaries.\")\n  } .otherwise {\n    // \u5206\u5272\u4e3a\u4e24\u4e2a\u5bf9\u9f50\u8bbf\u95ee\n    unSentLoads := Fill(maxSplitNum, 1.U(1.W))\n    curPtr := 0.U\n\n    // \u8bbe\u7f6e\u4f4e\u5730\u5740\u548c\u9ad8\u5730\u5740\u8bbf\u95ee\u7684\u901a\u7528\u4fe1\u606f\n    lowAddrLoad.uop := req.uop\n    lowAddrLoad.uop.exceptionVec(loadAddrMisaligned) := false.B\n    lowAddrLoad.fullva := req.fullva\n\n    highAddrLoad.uop := req.uop\n    highAddrLoad.uop.exceptionVec(loadAddrMisaligned) := false.B\n    highAddrLoad.fullva := req.fullva\n\n    // \u6839\u636e\u6307\u4ee4\u7c7b\u578b\u548c\u5730\u5740\u60c5\u51b5\uff0c\u786e\u5b9a\u5206\u5272\u65b9\u5f0f\n    switch (alignedType(1, 0)) {\n      is (LB) { /* \u5b57\u8282\u52a0\u8f7d\u4e0d\u5e94\u8be5\u975e\u5bf9\u9f50 */ }\n      is (LH) { /* \u5904\u7406\u534a\u5b57\u975e\u5bf9\u9f50\u8bbf\u95ee */ }\n      is (LW) { /* \u5904\u7406\u5b57\u975e\u5bf9\u9f50\u8bbf\u95ee */ }\n      is (LD) { /* \u5904\u7406\u53cc\u5b57\u975e\u5bf9\u9f50\u8bbf\u95ee */ }\n    }\n\n    // \u4fdd\u5b58\u5206\u5272\u8bf7\u6c42\n    splitLoadReqs(0) := lowAddrLoad\n    splitLoadReqs(1) := highAddrLoad\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#54","title":"5.4 \u53d1\u9001\u5206\u5272\u8bf7\u6c42","text":"<p>\u4f9d\u6b21\u53d1\u9001\u5206\u5272\u540e\u7684\u8bf7\u6c42\uff1a</p> <pre><code>io.splitLoadReq.valid := req_valid &amp;&amp; (bufferState === s_req || bufferState === s_comb_wakeup_rep &amp;&amp; needWakeUpReqsWire &amp;&amp; !req.isvec)\nio.splitLoadReq.bits  := splitLoadReqs(curPtr)\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#55","title":"5.5 \u5904\u7406\u5206\u5272\u54cd\u5e94","text":"<p>\u63a5\u6536\u5206\u5272\u8bf7\u6c42\u7684\u54cd\u5e94\u5e76\u68c0\u67e5\u5f02\u5e38\uff1a</p> <pre><code>when (io.splitLoadResp.valid) {\n  val resp = io.splitLoadResp.bits\n  splitLoadResp(curPtr) := io.splitLoadResp.bits\n\n  when (isUncache) {\n    // \u975e\u7f13\u5b58\u8bbf\u95ee\u5904\u7406\n    unSentLoads := 0.U\n    exceptionVec := ExceptionNO.selectByFu(0.U.asTypeOf(exceptionVec.cloneType), LduCfg)\n    exceptionVec(loadAddrMisaligned) := true.B\n  } .elsewhen (hasException) {\n    // \u5f02\u5e38\u5904\u7406\n    unSentLoads := 0.U\n    LduCfg.exceptionOut.map(no =&gt; exceptionVec(no) := exceptionVec(no) || resp.uop.exceptionVec(no))\n  } .elsewhen (!io.splitLoadResp.bits.rep_info.need_rep) {\n    // \u6b63\u5e38\u5904\u7406\uff0c\u51c6\u5907\u63a5\u6536\u4e0b\u4e00\u4e2a\u5206\u5272\u54cd\u5e94\u6216\u8fdb\u5165\u5408\u5e76\u9636\u6bb5\n    unSentLoads := unSentLoads &amp; ~UIntToOH(curPtr)\n    curPtr := curPtr + 1.U\n    exceptionVec := 0.U.asTypeOf(ExceptionVec())\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#56","title":"5.6 \u5408\u5e76\u5206\u5272\u7ed3\u679c","text":"<p>\u5408\u5e76\u4e24\u4e2a\u5206\u5272\u8bf7\u6c42\u7684\u7ed3\u679c\uff1a</p> <pre><code>when (bufferState === s_comb_wakeup_rep) {\n  val lowAddrResult = getShiftAndTruncateData(lowResultShift, lowResultWidth, splitLoadResp(0).data)\n                        .asTypeOf(Vec(XLEN / 8, UInt(8.W)))\n  val highAddrResult = getShiftAndTruncateData(highResultShift, highResultWidth, splitLoadResp(1).data)\n                        .asTypeOf(Vec(XLEN / 8, UInt(8.W)))\n  val catResult = Wire(Vec(XLEN / 8, UInt(8.W)))\n\n  // \u5b57\u8282\u7ea7\u5408\u5e76\n  (0 until XLEN / 8) .map {\n    case i =&gt; {\n      when (i.U &lt; lowResultWidth) {\n        catResult(i) := lowAddrResult(i)\n      } .otherwise {\n        catResult(i) := highAddrResult(i.U - lowResultWidth)\n      }\n    }\n  }\n\n  // \u6839\u636e\u6307\u4ee4\u7c7b\u578b\u5904\u7406\u6570\u636e\n  combinedData := Mux(req.isvec, \n                      rdataVecHelper(req.alignedType, (catResult.asUInt)(XLEN - 1, 0)), \n                      rdataHelper(req.uop, (catResult.asUInt)(XLEN - 1, 0)))\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#57","title":"5.7 \u7ed3\u679c\u5199\u56de","text":"<p>\u5c06\u7ed3\u679c\u5199\u56de\u5230\u5904\u7406\u5668\u540e\u7aef\uff1a</p> <pre><code>// \u6807\u91cf\u5199\u56de\nio.writeBack.valid := req_valid &amp;&amp; (bufferState === s_wb) &amp;&amp; \n                    (io.splitLoadResp.valid &amp;&amp; io.splitLoadResp.bits.misalignNeedWakeUp || \n                    globalUncache || globalException) &amp;&amp; !io.loadOutValid &amp;&amp; !req.isvec\nio.writeBack.bits.uop := req.uop\nio.writeBack.bits.data := newRdataHelper(data_select, combinedData)\n\n// \u5411\u91cf\u5199\u56de\nio.vecWriteBack.valid := req_valid &amp;&amp; (bufferState === s_wb) &amp;&amp; !io.loadVecOutValid &amp;&amp; req.isvec\nio.vecWriteBack.bits.vecdata.get := combinedData\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#6","title":"6. \u5f02\u5e38\u5904\u7406\u673a\u5236","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#61","title":"6.1 \u5f02\u5e38\u68c0\u6d4b","text":"<p>\u68c0\u6d4b\u5206\u5272\u8bf7\u6c42\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u5404\u7c7b\u5f02\u5e38\uff1a</p> <pre><code>val hasException = io.splitLoadResp.bits.vecActive &amp;&amp;\n  ExceptionNO.selectByFu(io.splitLoadResp.bits.uop.exceptionVec, LduCfg).asUInt.orR || \n  TriggerAction.isDmode(io.splitLoadResp.bits.uop.trigger)\nval isUncache = io.splitLoadResp.bits.mmio || io.splitLoadResp.bits.nc\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#62","title":"6.2 \u8de8\u9875\u5f02\u5e38\u5904\u7406","text":"<p>\u5f53\u975e\u5bf9\u9f50\u8bbf\u95ee\u8de8\u9875\u4e14\u9ad8\u5730\u5740\u9875\u9762\u53d1\u751f\u5f02\u5e38\u65f6\u7684\u7279\u6b8a\u5904\u7406\uff1a</p> <pre><code>// \u7279\u6b8a\u60c5\u51b5\uff1a\u975e\u5bf9\u9f50\u52a0\u8f7d\u8de8\u9875\uff0c\u9875\u9519\u8bef\u53d1\u751f\u5728\u4e0b\u4e00\u9875\nval shouldOverwrite = req_valid &amp;&amp; globalException\nval overwriteExpBuf = GatedValidRegNext(shouldOverwrite)\nval overwriteVaddr = RegEnable(\n  Mux(\n    cross16BytesBoundary &amp;&amp; (curPtr === 1.U),\n    splitLoadResp(curPtr).vaddr,\n    splitLoadResp(curPtr).fullva),\n  shouldOverwrite)\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#63","title":"6.3 \u72b6\u6001\u673a\u63a7\u5236\u6d41","text":"<p>\u72b6\u6001\u673a\u63a7\u5236\u975e\u5bf9\u9f50\u8bbf\u95ee\u5904\u7406\u7684\u5b8c\u6574\u6d41\u7a0b\uff1a</p> <pre><code>switch(bufferState) {\n  is (s_idle) {\n    when (req_valid) {\n      bufferState := s_split\n    }\n  }\n\n  is (s_split) {\n    bufferState := s_req\n  }\n\n  is (s_req) {\n    when (io.splitLoadReq.fire) {\n      bufferState := s_resp\n    }\n  }\n\n  is (s_resp) {\n    when (io.splitLoadResp.valid) {\n      when (hasException || isUncache) {\n        // \u51fa\u73b0\u5f02\u5e38\u6216\u8bbf\u95ee\u975e\u7f13\u5b58\u533a\u57df\n        bufferState := s_wb\n        globalException := hasException\n        globalUncache := isUncache\n        globalMMIO := io.splitLoadResp.bits.mmio\n        globalNC   := io.splitLoadResp.bits.nc\n      } .elsewhen(io.splitLoadResp.bits.rep_info.need_rep || (unSentLoads &amp; ~clearOh).orR) {\n        // \u9700\u8981\u91cd\u653e\u6216\u8fd8\u6709\u672a\u5904\u7406\u7684\u5206\u5272\u8bf7\u6c42\n        bufferState := s_req\n      } .otherwise {\n        // \u6240\u6709\u5206\u5272\u8bf7\u6c42\u6b63\u5e38\u5b8c\u6210\uff0c\u51c6\u5907\u5408\u5e76\n        bufferState := s_comb_wakeup_rep\n        needWakeUpWB := !req.isvec\n      }\n    }\n  }\n\n  is (s_comb_wakeup_rep) {\n    // \u6839\u636e\u662f\u5426\u4e3a\u5411\u91cf\u6307\u4ee4\u51b3\u5b9a\u4e0b\u4e00\u6b65\n    when(!req.isvec) {\n      when(io.splitLoadReq.fire) {\n        bufferState := s_wb\n      }\n      needWakeUpReqsWire := true.B\n    } .otherwise {\n      bufferState := s_wb\n    }\n  }\n\n  is (s_wb) {\n    // \u5199\u56de\u5b8c\u6210\u540e\u56de\u5230\u7a7a\u95f2\u72b6\u6001\uff0c\u91cd\u7f6e\u6240\u6709\u72b6\u6001\n    when(req.isvec) {\n      when(io.vecWriteBack.fire) {\n        bufferState := s_idle\n        req_valid := false.B\n        // \u91cd\u7f6e\u72b6\u6001\n      }\n    } .otherwise {\n      when(io.writeBack.fire) {\n        bufferState := s_idle\n        req_valid := false.B\n        // \u91cd\u7f6e\u72b6\u6001\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#7-lw","title":"7. \u975e\u5bf9\u9f50\u52a0\u8f7d\u6307\u4ee4\u5904\u7406\u793a\u4f8b\uff1aLW","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#71","title":"7.1 \u521d\u59cb\u72b6\u6001","text":"<ul> <li>\u6307\u4ee4\uff1a<code>LW x5, 0x1001</code> (\u4ece\u5730\u57400x1001\u52a0\u8f7d4\u5b57\u8282\uff0c\u8de8\u8d8a16\u5b57\u8282\u8fb9\u754c)</li> <li>\u52a0\u8f7d\u5355\u5143\u68c0\u6d4b\u5230\u975e\u5bf9\u9f50\u8bbf\u95ee\uff0c\u5c06\u8bf7\u6c42\u53d1\u9001\u5230LoadMisalignBuffer</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#72-s_split","title":"7.2 \u5206\u5272\u51b3\u7b56 (s_split)","text":"<p>\u6839\u636e\u5b57\u6307\u4ee4\u548c\u5730\u5740\u6a21\u5f0f\"01\"\uff0c\u51b3\u5b9a\u5206\u5272\u65b9\u5f0f\uff1a</p> <pre><code>lowAddrLoad.uop.fuOpType := LW\nlowAddrLoad.vaddr := req.vaddr - 1.U  // 0x1000\nlowAddrLoad.mask  := 0xf.U &lt;&lt; lowAddrLoad.vaddr(3, 0)\nlowResultShift    := BYTE1  // \u53f3\u79fb1\u5b57\u8282\nlowResultWidth    := BYTE3  // \u53d63\u5b57\u8282\n\nhighAddrLoad.uop.fuOpType := LB\nhighAddrLoad.vaddr := req.vaddr + 3.U  // 0x1004\nhighAddrLoad.mask  := 0x1.U &lt;&lt; highAddrLoad.vaddr(3, 0)\nhighResultShift    := BYTE0  // \u4e0d\u79fb\u4f4d\nhighResultWidth    := BYTE1  // \u53d61\u5b57\u8282\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#73-s_req","title":"7.3 \u53d1\u9001\u4f4e\u5730\u5740\u8bf7\u6c42 (s_req)","text":"<p>\u53d1\u9001\u7b2c\u4e00\u4e2a\u5206\u5272\u8bf7\u6c42\uff1a - \u5730\u5740\uff1a0x1000 - \u7c7b\u578b\uff1aLW (4\u5b57\u8282\u8bfb\u53d6) - \u63a9\u7801\uff1a0xf (4\u5b57\u8282\u5168\u90e8\u6709\u6548)</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#74-s_resp","title":"7.4 \u63a5\u6536\u4f4e\u5730\u5740\u54cd\u5e94 (s_resp)","text":"<p>\u63a5\u6536\u7b2c\u4e00\u4e2a\u54cd\u5e94\uff1a - \u6570\u636e\uff1a0xDDCCBBAA\uff08\u5c0f\u7aef\u8868\u793a\uff09 - \u5904\u7406\uff1a\u4fdd\u5b58\u5230splitLoadResp(0) - \u66f4\u65b0\u72b6\u6001\uff1aunSentLoads = 0b01 (\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u672a\u53d1\u9001)</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#75-s_req","title":"7.5 \u53d1\u9001\u9ad8\u5730\u5740\u8bf7\u6c42 (s_req)","text":"<p>\u53d1\u9001\u7b2c\u4e8c\u4e2a\u5206\u5272\u8bf7\u6c42\uff1a - \u5730\u5740\uff1a0x1004 - \u7c7b\u578b\uff1aLB (1\u5b57\u8282\u8bfb\u53d6) - \u63a9\u7801\uff1a0x1 (\u4ec5\u6700\u4f4e\u5b57\u8282\u6709\u6548)</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#76-s_resp","title":"7.6 \u63a5\u6536\u9ad8\u5730\u5740\u54cd\u5e94 (s_resp)","text":"<p>\u63a5\u6536\u7b2c\u4e8c\u4e2a\u54cd\u5e94\uff1a - \u6570\u636e\uff1a0x000000EE\uff08\u53ea\u6709\u4f4e\u5b57\u8282\u6709\u6548\uff09 - \u5904\u7406\uff1a\u4fdd\u5b58\u5230splitLoadResp(1) - \u66f4\u65b0\u72b6\u6001\uff1aunSentLoads = 0b00 (\u6240\u6709\u8bf7\u6c42\u5df2\u5b8c\u6210) - \u8fdb\u5165\u5408\u5e76\u9636\u6bb5 (s_comb_wakeup_rep)</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#77-s_comb_wakeup_rep","title":"7.7 \u5408\u5e76\u7ed3\u679c (s_comb_wakeup_rep)","text":"<p>\u5047\u8bbe\u5185\u5b58\u5c0f\u7aef\u5e8f\u4e2d\u7684\u6570\u636e\u5e03\u5c40\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff1a <pre><code>\u5730\u5740: 0x1000 0x1001 0x1002 0x1003 | 0x1004\n\u6570\u636e:   AA     BB     CC     DD   |   EE\n</code></pre></p> <ol> <li>\u5904\u7406\u4f4e\u5730\u5740\u6570\u636e\uff1a</li> <li>\u4ece0x1000\u83b7\u53d6\u7684\u4f4e\u5730\u5740\u7ed3\u679c\uff1a0xDDCCBBAA\uff08\u5c0f\u7aef\u8868\u793a\uff09</li> <li>\u53f3\u79fb1\u5b57\u8282\uff0c\u4fdd\u75593\u5b57\u8282\uff1a0x00DDCCBB</li> <li> <p>\u5b9e\u9645\u83b7\u53d6\u7684\u5b57\u8282\u4e3a\uff1aBB, CC, DD</p> </li> <li> <p>\u5904\u7406\u9ad8\u5730\u5740\u6570\u636e\uff1a</p> </li> <li>\u4ece0x1004\u83b7\u53d6\u7684\u9ad8\u5730\u5740\u7ed3\u679c\uff1a0x000000EE\uff08\u53ea\u6709\u4f4e\u5b57\u8282\u6709\u6548\uff09</li> <li>\u4e0d\u79fb\u4f4d\uff0c\u53d6\u4f4e1\u5b57\u8282\uff1a0xEE</li> <li> <p>\u5b9e\u9645\u83b7\u53d6\u7684\u5b57\u8282\u4e3a\uff1aEE</p> </li> <li> <p>\u5408\u5e76\u6570\u636e\uff08\u6b63\u786e\u7684\u5c0f\u7aef\u5e8f\u5904\u7406\uff09\uff1a</p> </li> <li>\u5408\u5e76\u5b57\u8282\uff1a[BB, CC, DD, EE]\uff08\u4ece\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\uff09</li> <li>\u5728\u5c0f\u7aef\u7cfb\u7edf\u4e2d\u7684\u5bc4\u5b58\u5668\u4e2d\u8868\u793a\u4e3a\uff1a0xEEDDCCBB</li> <li>\u5e94\u7528rdataHelper\u5904\u7406\u7b26\u53f7\u6269\u5c55\u7b49</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#78-s_wb","title":"7.8 \u5b8c\u6210\u5199\u56de (s_wb)","text":"<ul> <li>\u5c06\u5408\u5e76\u540e\u7684\u7ed3\u679c0xEEDDCCBB\u901a\u8fc7io.writeBack\u5199\u56de\u5230\u5bc4\u5b58\u5668x5</li> <li>\u91cd\u7f6e\u6a21\u5757\u72b6\u6001\uff0c\u8fd4\u56des_idle\u72b6\u6001</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#8","title":"8. \u652f\u6301\u7684\u5206\u5272\u65b9\u6848","text":"<p>LoadMisalignBuffer\u652f\u6301\u591a\u79cd\u975e\u5bf9\u9f50\u8bbf\u95ee\u6a21\u5f0f\uff0c\u6bcf\u79cd\u6a21\u5f0f\u6709\u7279\u5b9a\u7684\u5206\u5272\u7b56\u7565\uff1a</p> <ol> <li>\u975e\u5bf9\u9f50\u534a\u5b57(LH)\uff1a</li> <li>\u5206\u5272\u4e3a\u4e24\u4e2a\u5b57\u8282\u8bbf\u95ee(LB+LB)</li> <li> <p>\u4f8b\u5982\uff1a\u5730\u57400x1001\u5206\u5272\u4e3a0x1001\u548c0x1002</p> </li> <li> <p>\u975e\u5bf9\u9f50\u5b57(LW)\uff1a\u6839\u636e\u5730\u5740\u4f4e2\u4f4d\u4e0d\u540c\u6709\u4e09\u79cd\u60c5\u51b5\uff1a</p> </li> <li>01\uff1a\u5206\u5272\u4e3a(LW+LB)\uff0c\u524d\u5411\u5bf9\u9f50\u8bbf\u95ee3\u5b57\u8282+\u540e\u5411\u8bbf\u95ee1\u5b57\u8282</li> <li>10\uff1a\u5206\u5272\u4e3a(LH+LH)\uff0c\u524d\u5411\u8bbf\u95ee2\u5b57\u8282+\u540e\u5411\u8bbf\u95ee2\u5b57\u8282</li> <li> <p>11\uff1a\u5206\u5272\u4e3a(LB+LW)\uff0c\u524d\u5411\u8bbf\u95ee1\u5b57\u8282+\u540e\u5411\u5bf9\u9f50\u8bbf\u95ee3\u5b57\u8282</p> </li> <li> <p>\u975e\u5bf9\u9f50\u53cc\u5b57(LD)\uff1a\u6839\u636e\u5730\u5740\u4f4e3\u4f4d\u4e0d\u540c\u6709\u4e03\u79cd\u60c5\u51b5\uff1a</p> </li> <li>001\uff1a\u5206\u5272\u4e3a(LD+LB)\uff0c\u524d\u5411\u5bf9\u9f50\u8bbf\u95ee7\u5b57\u8282+\u540e\u5411\u8bbf\u95ee1\u5b57\u8282</li> <li>010\uff1a\u5206\u5272\u4e3a(LD+LH)\uff0c\u524d\u5411\u5bf9\u9f50\u8bbf\u95ee6\u5b57\u8282+\u540e\u5411\u8bbf\u95ee2\u5b57\u8282</li> <li>...</li> <li>111\uff1a\u5206\u5272\u4e3a(LB+LD)\uff0c\u524d\u5411\u8bbf\u95ee1\u5b57\u8282+\u540e\u5411\u5bf9\u9f50\u8bbf\u95ee7\u5b57\u8282</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#9","title":"9. \u6027\u80fd\u76d1\u63a7\u4e0e\u8c03\u8bd5","text":"<p>LoadMisalignBuffer \u5b9e\u73b0\u4e86\u6027\u80fd\u76d1\u63a7\u529f\u80fd\uff0c\u8ddf\u8e2a\u975e\u5bf9\u9f50\u8bbf\u95ee\u60c5\u51b5\uff1a</p> <pre><code>XSPerfAccumulate(\"alloc\",                  RegNext(!req_valid) &amp;&amp; req_valid)\nXSPerfAccumulate(\"flush\",                  flush)\nXSPerfAccumulate(\"flush_idle\",             flush &amp;&amp; (bufferState === s_idle))\nXSPerfAccumulate(\"flush_non_idle\",         flush &amp;&amp; (bufferState =/= s_idle))\n</code></pre> <p>\u8fd9\u4e9b\u76d1\u63a7\u70b9\u5e2e\u52a9\u8bca\u65ad\u548c\u4f18\u5316\u975e\u5bf9\u9f50\u8bbf\u95ee\u7684\u6027\u80fd\u95ee\u9898\uff0c\u63d0\u4f9b\u4ee5\u4e0b\u6307\u6807\uff1a - \u975e\u5bf9\u9f50\u8bf7\u6c42\u5206\u914d\u6b21\u6570 - \u8bf7\u6c42\u88ab\u5237\u65b0\u7684\u6b21\u6570 - \u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u5237\u65b0\u60c5\u51b5</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#10-loadmisalignbuffer","title":"10. LoadMisalignBuffer\u4e0e\u5176\u4ed6\u6a21\u5757\u7684\u4ea4\u4e92","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#101-loadmisalignbufferloadunit","title":"10.1 LoadMisalignBuffer\u4e0eLoadUnit\u7684\u5173\u7cfb","text":"<p>LoadUnit\u3001LoadMisalignBuffer\u548cLoad Pipeline\u7684\u4ea4\u4e92\u5173\u7cfb\u5982\u4e0b\uff1a</p> <ol> <li>\u68c0\u6d4b\u4e0e\u8f6c\u53d1\uff1a</li> <li>LoadUnit\u5728\u6267\u884c\u9636\u6bb5(S2/S3)\u68c0\u6d4b\u5230\u975e\u5bf9\u9f50\u8bbf\u95ee\u4e14\u8de8\u8d8a16\u5b57\u8282\u8fb9\u754c\u65f6\uff0c\u4f1a\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9LoadMisalignBuffer</li> <li> <p>\u8f6c\u53d1\u901a\u8fc7<code>io.misalign_enq.req</code>\u63a5\u53e3\u8fdb\u884c\uff0c\u8fd9\u662f\u5728LoadUnit\u4e2d\u7684s3\u9636\u6bb5\u8fdb\u884c\u7684\uff1a    <pre><code>val toMisalignBufferValid = s3_can_enter_lsq_valid &amp;&amp; s3_mis_align &amp;&amp; !s3_frm_mabuf\nio.misalign_enq.req.valid := toMisalignBufferValid &amp;&amp; s3_misalign_can_go\nio.misalign_enq.req.bits  := s3_in\n</code></pre></p> </li> <li> <p>\u5206\u5272\u8bf7\u6c42\u5904\u7406\uff1a</p> </li> <li>LoadMisalignBuffer\u5c06\u975e\u5bf9\u9f50\u8bf7\u6c42\u5206\u5272\u540e\uff0c\u901a\u8fc7<code>io.splitLoadReq</code>\u63a5\u53e3\u5c06\u5206\u5272\u8bf7\u6c42\u53d1\u56de\u7ed9LoadUnit</li> <li> <p>LoadUnit\u901a\u8fc7\u4e13\u95e8\u7684\u63a5\u53e3\u5904\u7406\u6765\u81eaLoadMisalignBuffer\u7684\u8bf7\u6c42\uff1a    <pre><code>// misalignBuffer issue path\nval misalign_ldin = Flipped(Decoupled(new LsPipelineBundle))\nval misalign_ldout = Valid(new LqWriteBundle)\n</code></pre></p> </li> <li> <p>\u6267\u884c\u6d41\u8def\u5f84\uff1a</p> </li> <li>\u975e\u5bf9\u9f50\u52a0\u8f7d\u6307\u4ee4\u7684\u6267\u884c\u8def\u5f84\u4e3a\uff1aLoadUnit \u2192 LoadMisalignBuffer \u2192 LoadUnit \u2192 Cache/Memory \u2192 LoadUnit \u2192 LoadMisalignBuffer \u2192 \u5904\u7406\u5668\u540e\u7aef</li> <li>LoadUnit\u4ecd\u7136\u8d1f\u8d23\u5b9e\u9645\u8bbf\u95ee\u7f13\u5b58/\u5185\u5b58\uff0cLoadMisalignBuffer\u53ea\u8d1f\u8d23\u5206\u5272\u548c\u5408\u5e76</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#102","title":"10.2 \u6570\u636e\u6d41\u548c\u7ed3\u679c\u4f20\u9012","text":"<p>LoadMisalignBuffer\u7684\u5904\u7406\u7ed3\u679c\u901a\u8fc7\u4e24\u4e2a\u4e0d\u540c\u8def\u5f84\u8fd4\u56de\uff0c\u53d6\u51b3\u4e8e\u8bf7\u6c42\u7c7b\u578b\uff1a</p> <ol> <li>\u6807\u91cf\u52a0\u8f7d\u6307\u4ee4\u7ed3\u679c\u4f20\u9012\uff1a    <pre><code>io.writeBack.valid := req_valid &amp;&amp; (bufferState === s_wb) &amp;&amp; \n                    (io.splitLoadResp.valid &amp;&amp; io.splitLoadResp.bits.misalignNeedWakeUp || \n                    globalUncache || globalException) &amp;&amp; !io.loadOutValid &amp;&amp; !req.isvec\n</code></pre></li> <li>\u901a\u8fc7<code>io.writeBack</code>\u63a5\u53e3\u5c06\u7ed3\u679c\u76f4\u63a5\u8fd4\u56de\u7ed9\u5904\u7406\u5668\u540e\u7aef</li> <li>\u7ed3\u679c\u5305\u542b\u5904\u7406\u540e\u7684\u6570\u636e\u3001\u5f02\u5e38\u4fe1\u606f\u548c\u8c03\u8bd5\u4fe1\u606f</li> <li> <p>\u76ee\u6807\u662fLSQ\u548cROB\uff0c\u5b8c\u6210\u6267\u884c\u9636\u6bb5\u5904\u7406</p> </li> <li> <p>\u5411\u91cf\u52a0\u8f7d\u6307\u4ee4\u7ed3\u679c\u4f20\u9012\uff1a    <pre><code>io.vecWriteBack.valid := req_valid &amp;&amp; (bufferState === s_wb) &amp;&amp; !io.loadVecOutValid &amp;&amp; req.isvec\n</code></pre></p> </li> <li>\u901a\u8fc7<code>io.vecWriteBack</code>\u63a5\u53e3\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u5411\u91cf\u5904\u7406\u5355\u5143</li> <li>\u5305\u542b\u5904\u7406\u540e\u7684\u5411\u91cf\u6570\u636e\u3001\u63a9\u7801\u548c\u5143\u7d20\u7d22\u5f15\u7b49\u4fe1\u606f</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#103","title":"10.3 \u5206\u5272\u548c\u5408\u5e76\u804c\u8d23","text":"<p>LoadMisalignBuffer\u4e0eLoadUnit\u7684\u804c\u8d23\u5212\u5206\uff1a</p> <ol> <li>LoadUnit\u8d1f\u8d23\uff1a</li> <li>\u68c0\u6d4b\u975e\u5bf9\u9f50\u8bbf\u95ee\u4e14\u8de8\u8d8a16\u5b57\u8282\u8fb9\u754c</li> <li>\u5c06\u975e\u5bf9\u9f50\u8bf7\u6c42\u8f6c\u53d1\u7ed9LoadMisalignBuffer</li> <li>\u5904\u7406\u5206\u5272\u540e\u7684\u5bf9\u9f50\u5185\u5b58\u8bbf\u95ee\u8bf7\u6c42</li> <li> <p>\u5c06\u5206\u5272\u8bf7\u6c42\u7684\u54cd\u5e94\u7ed3\u679c\u8fd4\u56de\u7ed9LoadMisalignBuffer</p> </li> <li> <p>LoadMisalignBuffer\u8d1f\u8d23\uff1a</p> </li> <li>\u5206\u6790\u975e\u5bf9\u9f50\u8bbf\u95ee\u7c7b\u578b\u548c\u5730\u5740\u6a21\u5f0f</li> <li>\u5236\u5b9a\u5206\u5272\u7b56\u7565\uff0c\u751f\u6210\u6700\u591a\u4e24\u4e2a\u5bf9\u9f50\u8bbf\u95ee\u8bf7\u6c42</li> <li>\u53d1\u9001\u5206\u5272\u8bf7\u6c42\u7ed9LoadUnit\u5904\u7406</li> <li>\u63a5\u6536\u5206\u5272\u8bf7\u6c42\u7684\u54cd\u5e94</li> <li>\u5408\u5e76\u591a\u4e2a\u5206\u5272\u54cd\u5e94\u7ed3\u679c\u4e3a\u6700\u7ec8\u7ed3\u679c</li> <li>\u5c06\u6700\u7ec8\u7ed3\u679c\u8fd4\u56de\u7ed9\u5904\u7406\u5668\u540e\u7aef</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#104-cache-miss","title":"10.4 Cache Miss\u5904\u7406","text":"<p>\u5f53\u5206\u5272\u540e\u7684\u8bf7\u6c42\u9047\u5230Cache Miss\u65f6\uff0c\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u8bf7\u6c42\u5206\u53d1\uff1a</li> <li>LoadMisalignBuffer\u5206\u5272\u540e\u7684\u8bf7\u6c42\u901a\u8fc7<code>io.splitLoadReq</code>\u53d1\u9001\u7ed9LoadUnit</li> <li> <p>LoadUnit\u901a\u8fc7<code>io.misalign_ldin</code>\u63a5\u6536\u5e76\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230Dcache</p> </li> <li> <p>Miss\u68c0\u6d4b\u548c\u5904\u7406\uff1a</p> </li> <li>\u5f53LoadUnit\u68c0\u6d4b\u5230Cache Miss\u65f6\uff0c\u4f1a\u8bbe\u7f6e\u76f8\u5e94\u7684\u6807\u5fd7</li> <li>\u5c06\u54cd\u5e94\u4fe1\u606f\u901a\u8fc7<code>io.misalign_ldout</code>\u8fd4\u56de\u7ed9LoadMisalignBuffer</li> <li> <p>LoadMisalignBuffer\u6839\u636e\u54cd\u5e94\u4e2d\u7684miss\u4fe1\u606f\u51b3\u5b9a\u540e\u7eed\u5904\u7406</p> </li> <li> <p>\u91cd\u653e\u673a\u5236\uff1a    <pre><code>when (io.splitLoadResp.valid) {\n  ...\n  .elsewhen(io.splitLoadResp.bits.rep_info.need_rep || (unSentLoads &amp; ~clearOh).orR) {\n    // \u9700\u8981\u91cd\u653e\u6216\u8fd8\u6709\u672a\u5904\u7406\u7684\u5206\u5272\u8bf7\u6c42\n    bufferState := s_req\n  }\n}\n</code></pre></p> </li> <li>\u5f53\u9700\u8981\u91cd\u653e\u65f6\uff0cLoadMisalignBuffer\u56de\u5230<code>s_req</code>\u72b6\u6001\u91cd\u65b0\u53d1\u9001\u8bf7\u6c42</li> <li>LoadUnit\u5b9e\u9645\u8d1f\u8d23\u4e0e\u7f13\u5b58\u7f3a\u5931\u5904\u7406\u903b\u8f91\u4ea4\u4e92(\u5982MSHR)</li> <li>LoadMisalignBuffer\u4e0d\u76f4\u63a5\u4e0e\u7f13\u5b58\u4ea4\u4e92\uff0c\u800c\u662f\u901a\u8fc7LoadUnit\u95f4\u63a5\u5904\u7406Miss</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#105","title":"10.5 \u5f02\u5e38\u548c\u7279\u6b8a\u60c5\u51b5\u5904\u7406","text":"<ol> <li>\u975e\u7f13\u5b58\u8bbf\u95ee\uff1a    <pre><code>when (isUncache) {\n  unSentLoads := 0.U\n  exceptionVec := ExceptionNO.selectByFu(0.U.asTypeOf(exceptionVec.cloneType), LduCfg)\n  exceptionVec(loadAddrMisaligned) := true.B\n}\n</code></pre></li> <li>\u68c0\u6d4b\u5230\u975e\u7f13\u5b58\u8bbf\u95ee\u65f6\uff0c\u4e2d\u6b62\u5904\u7406\u5e76\u5f15\u53d1loadAddrMisaligned\u5f02\u5e38</li> <li> <p>\u4ea4\u7531\u8f6f\u4ef6\u5904\u7406\u975e\u5bf9\u9f50\u7684\u975e\u7f13\u5b58\u8bbf\u95ee</p> </li> <li> <p>\u8de8\u9875\u5f02\u5e38\u5904\u7406\uff1a    <pre><code>val shouldOverwrite = req_valid &amp;&amp; globalException\nval overwriteExpBuf = GatedValidRegNext(shouldOverwrite)\nval overwriteVaddr = RegEnable(\n  Mux(\n    cross16BytesBoundary &amp;&amp; (curPtr === 1.U),\n    splitLoadResp(curPtr).vaddr,\n    splitLoadResp(curPtr).fullva),\n  shouldOverwrite)\n</code></pre></p> </li> <li>\u5f53\u975e\u5bf9\u9f50\u8bbf\u95ee\u8de8\u9875\u4e14\u7b2c\u4e8c\u9875\u53d1\u751f\u5f02\u5e38\u65f6</li> <li>\u4f7f\u7528\u7b2c\u4e8c\u9875\u7684\u5730\u5740\u4f5c\u4e3a\u5f02\u5e38\u5730\u5740\uff0c\u786e\u4fdd\u5f02\u5e38\u5904\u7406\u4ee3\u7801\u80fd\u627e\u5230\u6b63\u786e\u7684\u9875\u9762</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#106","title":"10.6 \u72b6\u6001\u4ea4\u4e92\u793a\u610f\u56fe","text":"<pre><code>sequenceDiagram\n    participant LU as LoadUnit (S2/S3)\n    participant LMB as LoadMisalignBuffer\n    participant CM as Cache/Memory\n    participant BE as Backend (ROB/Register)\n\n    LU-&gt;&gt;LMB: \u68c0\u6d4b\u975e\u5bf9\u9f50\u8bbf\u95ee\n    Note over LMB: \u5206\u5272\u975e\u5bf9\u9f50\u8bbf\u95ee\n\n    LMB-&gt;&gt;LU: \u53d1\u9001\u5206\u5272\u8bf7\u6c421\n    LU-&gt;&gt;CM: \u8f6c\u53d1\u5206\u5272\u8bf7\u6c421\n    CM-&gt;&gt;LU: \u5904\u7406\u8bf7\u6c421\u5e76\u8fd4\u56de\u7ed3\u679c\n    LU-&gt;&gt;LMB: \u8fd4\u56de\u7ed3\u679c1\n\n    LMB-&gt;&gt;LU: \u53d1\u9001\u5206\u5272\u8bf7\u6c422\n    LU-&gt;&gt;CM: \u8f6c\u53d1\u5206\u5272\u8bf7\u6c422\n    CM-&gt;&gt;LU: \u5904\u7406\u8bf7\u6c422\u5e76\u8fd4\u56de\u7ed3\u679c\n    LU-&gt;&gt;LMB: \u8fd4\u56de\u7ed3\u679c2\n\n    Note over LMB: \u5408\u5e76\u7ed3\u679c\n    LMB-&gt;&gt;BE: \u76f4\u63a5\u5199\u56de\u6700\u7ec8\u7ed3\u679c\u5230\u540e\u7aef</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#11_1","title":"11. \u6027\u80fd\u4f18\u5316\u4e0e\u8bbe\u8ba1\u8003\u91cf","text":"<p>LoadMisalignBuffer\u5728\u8bbe\u8ba1\u4e0a\u8003\u8651\u4e86\u591a\u9879\u6027\u80fd\u4f18\u5316\uff1a</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#111","title":"11.1 \u6d41\u6c34\u7ebf\u6548\u7387","text":"<ol> <li>\u72b6\u6001\u673a\u8bbe\u8ba1\uff1a</li> <li>\u4f7f\u7528\u72b6\u6001\u673a\u5904\u7406\u975e\u5bf9\u9f50\u8bbf\u95ee\uff0c\u5141\u8bb8\u540e\u7eed\u8bf7\u6c42\u6d41\u6c34\u7ebf\u4e0d\u88ab\u963b\u585e</li> <li> <p>\u5f53LoadMisalignBuffer\u7e41\u5fd9\u65f6\uff0c\u540e\u7eed\u975e\u5bf9\u9f50\u8bf7\u6c42\u7b49\u5f85\u5904\u7406</p> </li> <li> <p>\u5355\u793a\u4f8b\u8bbe\u8ba1\uff1a</p> </li> <li>\u7531\u4e8e\u975e\u5bf9\u9f50\u8bbf\u95ee\u5728\u5b9e\u9645\u7a0b\u5e8f\u4e2d\u76f8\u5bf9\u7f55\u89c1\uff0c\u4f7f\u7528\u5355\u4e2a\u5b9e\u4f8b\u5904\u7406</li> <li>\u51cf\u5c11\u4e86\u786c\u4ef6\u5f00\u9500\uff0c\u540c\u65f6\u4e0d\u663e\u8457\u5f71\u54cd\u6574\u4f53\u6027\u80fd</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#112","title":"11.2 \u7279\u6b8a\u60c5\u51b5\u4f18\u5316","text":"<ol> <li>\u5411\u91cf\u6307\u4ee4\u652f\u6301\uff1a</li> <li>\u5bf9\u5411\u91cf\u975e\u5bf9\u9f50\u52a0\u8f7d\u8fdb\u884c\u7279\u6b8a\u5904\u7406</li> <li> <p>\u5305\u62ec\u63a9\u7801\u548c\u5143\u7d20\u7d22\u5f15\u7684\u7ba1\u7406</p> </li> <li> <p>MMIO\u548c\u975e\u7f13\u5b58\u8bbf\u95ee\uff1a</p> </li> <li>\u5bf9MMIO\u8bbf\u95ee\u548c\u975e\u7f13\u5b58\u8bbf\u95ee\u91c7\u53d6\u5b89\u5168\u5904\u7406\u7b56\u7565</li> <li>\u5c06\u8fd9\u4e9b\u590d\u6742\u60c5\u51b5\u4ea4\u7531\u8f6f\u4ef6\u5904\u7406\uff0c\u7b80\u5316\u786c\u4ef6\u8bbe\u8ba1</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#113","title":"11.3 \u8de8\u6a21\u5757\u534f\u4f5c","text":"<ol> <li>\u91cd\u5b9a\u5411\u5904\u7406\uff1a    <pre><code>val flush = req_valid &amp;&amp; req.uop.robIdx.needFlush(io.redirect)\nwhen (flush) {\n  bufferState := s_idle\n  req_valid := false.B\n  // \u91cd\u7f6e\u72b6\u6001\n}\n</code></pre></li> <li>\u76d1\u542c\u91cd\u5b9a\u5411\u4fe1\u53f7\uff0c\u53ca\u65f6\u53d6\u6d88\u65e0\u6548\u8bf7\u6c42</li> <li> <p>\u5728\u6295\u673a\u6267\u884c\u4e2d\u786e\u4fdd\u6b63\u786e\u6027</p> </li> <li> <p>\u5524\u9192\u673a\u5236\uff1a    <pre><code>val needWakeUpWB = RegInit(false.B)\nval needWakeUpReqsWire = Wire(Bool())\n</code></pre></p> </li> <li>\u4f7f\u7528\u4e13\u7528\u7684\u5524\u9192\u4fe1\u53f7\uff0c\u786e\u4fdd\u4f9d\u8d56\u4e8e\u975e\u5bf9\u9f50\u52a0\u8f7d\u7684\u6307\u4ee4\u80fd\u591f\u53ca\u65f6\u6267\u884c</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_misalign_buffer/#12_1","title":"12. \u603b\u7ed3\u4e0e\u5e94\u7528","text":"<p>LoadMisalignBuffer \u4f5c\u4e3a XiangShan \u5904\u7406\u5668 LSQ \u7cfb\u7edf\u7684\u4e13\u7528\u7ec4\u4ef6\uff0c\u5177\u6709\u4ee5\u4e0b\u6838\u5fc3\u7279\u6027\uff1a</p> <ol> <li>\u7cbe\u786e\u5206\u5272\u673a\u5236\uff1a\u6839\u636e\u6307\u4ee4\u7c7b\u578b\u548c\u5730\u5740\u7cbe\u786e\u8ba1\u7b97\u5206\u5272\u65b9\u6848</li> <li>\u9ad8\u6548\u6570\u636e\u5408\u5e76\uff1a\u5b57\u8282\u7ea7\u7cbe\u7ec6\u5408\u5e76\u786e\u4fdd\u6b63\u786e\u7ed3\u679c</li> <li>\u5b8c\u5907\u7684\u5f02\u5e38\u5904\u7406\uff1a\u5904\u7406\u5404\u79cd\u5f02\u5e38\u60c5\u51b5\uff0c\u7279\u522b\u662f\u8de8\u9875\u5f02\u5e38</li> <li>\u7edf\u4e00\u63a5\u53e3\uff1a\u652f\u6301\u5411\u91cf\u548c\u6807\u91cf\u975e\u5bf9\u9f50\u52a0\u8f7d\u6307\u4ee4</li> <li>\u6d41\u6c34\u7ebf\u4ea4\u4e92\uff1a\u4e0e\u52a0\u8f7d\u6d41\u6c34\u7ebf\u65e0\u7f1d\u8854\u63a5</li> </ol> <p>\u5728\u4e71\u5e8f\u5904\u7406\u5668\u4e2d\uff0cLoadMisalignBuffer \u89e3\u51b3\u4e86\u975e\u5bf9\u9f50\u5185\u5b58\u8bbf\u95ee\u7684\u6311\u6218\uff0c\u63d0\u9ad8\u4e86\u5904\u7406\u5668\u5bf9\u4e0d\u540c\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f\u7684\u9002\u5e94\u6027\u3002\u5b83\u5c06\u590d\u6742\u7684\u975e\u5bf9\u9f50\u8bbf\u95ee\u95ee\u9898\u8f6c\u5316\u4e3a\u53ef\u7ba1\u7406\u7684\u5bf9\u9f50\u8bbf\u95ee\uff0c\u5728\u4fdd\u8bc1\u529f\u80fd\u6b63\u786e\u6027\u7684\u540c\u65f6\u6700\u5c0f\u5316\u6027\u80fd\u5f71\u54cd\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/","title":"LoadQueue","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#1","title":"1. \u6a21\u5757\u6982\u8ff0","text":"<p><code>LoadQueue.scala</code> \u5b9e\u73b0\u4e86\u4e00\u4e2a\u7efc\u5408\u6027\u7684\u52a0\u8f7d\u961f\u5217\u7ba1\u7406\u5668\uff0c\u4f5c\u4e3aXiangShan\u5904\u7406\u5668LSQ\u7cfb\u7edf\u7684\u4e2d\u592e\u534f\u8c03\u7ec4\u4ef6\u3002\u5b83\u96c6\u6210\u4e86\u591a\u4e2a\u4e13\u7528\u5b50\u6a21\u5757\uff0c\u5171\u540c\u5904\u7406\u52a0\u8f7d\u6307\u4ee4\u7684\u5185\u5b58\u4f9d\u8d56\u68c0\u67e5\u3001\u6570\u636e\u5904\u7406\u548c\u5f02\u5e38\u5904\u7406\u7b49\u529f\u80fd\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#11","title":"1.1 \u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u534f\u8c03\u591a\u4e2a\u4e13\u7528\u5b50\u6a21\u5757\uff0c\u5f62\u6210\u5b8c\u6574\u7684\u52a0\u8f7d\u6307\u4ee4\u5904\u7406\u7cfb\u7edf</li> <li>\u68c0\u6d4b\u5e76\u5904\u7406\u5185\u5b58\u4f9d\u8d56\u51b2\u7a81(RAW\u3001RAR\u8fdd\u4f8b)</li> <li>\u7ba1\u7406\u52a0\u8f7d\u6307\u4ee4\u7684\u91cd\u653e\u673a\u5236</li> <li>\u5904\u7406\u672a\u7f13\u5b58\u52a0\u8f7d\u548c\u5f02\u5e38\u60c5\u51b5</li> <li>\u7ef4\u62a4\u52a0\u8f7d\u6307\u4ee4\u7684\u72b6\u6001\u548c\u6570\u636e\u6d41</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#12","title":"1.2 \u6a21\u5757\u5b9a\u4e49","text":"<pre><code>class LoadQueue(implicit p: Parameters) extends XSModule\n  with HasDCacheParameters\n  with HasCircularQueuePtrHelper\n  with HasLoadHelper\n  with HasPerfEvents {\n  // \u6a21\u5757\u5b9e\u73b0\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#2","title":"2. \u7cfb\u7edf\u67b6\u6784","text":"<p>LoadQueue\u91c7\u7528\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u901a\u8fc7\u96c6\u6210\u591a\u4e2a\u4e13\u7528\u5b50\u6a21\u5757\u5f62\u6210\u5b8c\u6574\u7684\u52a0\u8f7d\u961f\u5217\u7cfb\u7edf\uff1a</p> <pre><code>val loadQueueRAR = Module(new LoadQueueRAR)      // \u8bfb\u540e\u8bfb\u8fdd\u4f8b\u68c0\u67e5\nval loadQueueRAW = Module(new LoadQueueRAW)      // \u8bfb\u540e\u5199\u8fdd\u4f8b\u68c0\u67e5\nval loadQueueReplay = Module(new LoadQueueReplay) // \u91cd\u653e\u961f\u5217\nval virtualLoadQueue = Module(new VirtualLoadQueue) // \u63a7\u5236\u72b6\u6001\nval exceptionBuffer = Module(new LqExceptionBuffer) // \u5f02\u5e38\u7f13\u51b2\nval uncacheBuffer = Module(new LoadQueueUncache)  // \u672a\u7f13\u5b58\u52a0\u8f7d\u5904\u7406\n</code></pre> <p>\u8fd9\u79cd\u8bbe\u8ba1\u5c06\u4e0d\u540c\u7684\u529f\u80fd\u5206\u79bb\u5230\u72ec\u7acb\u6a21\u5757\u4e2d\uff0c\u5b9e\u73b0\u4e86\u9ad8\u5ea6\u7684\u6a21\u5757\u5316\u548c\u4e13\u4e1a\u5316\uff0c\u540c\u65f6\u901a\u8fc7\u660e\u786e\u7684\u63a5\u53e3\u8fdb\u884c\u534f\u540c\u5de5\u4f5c\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#3","title":"3. \u6570\u636e\u7ed3\u6784\u4e0e\u63a5\u53e3","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#31-io","title":"3.1 IO \u63a5\u53e3","text":"<pre><code>val io = IO(new Bundle() {\n  // \u63a7\u5236\u63a5\u53e3\n  val redirect = Flipped(Valid(new Redirect))\n\n  // LSU\u63a5\u53e3\n  val enq = new LqEnqIO\n  val ldu = new Bundle() {\n    val stld_nuke_query = Vec(LoadPipelineWidth, Flipped(new LoadNukeQueryIO)) // \u4eceload_s2\n    val ldld_nuke_query = Vec(LoadPipelineWidth, Flipped(new LoadNukeQueryIO)) // \u4eceload_s2\n    val ldin = Vec(LoadPipelineWidth, Flipped(Decoupled(new LqWriteBundle)))   // \u4eceload_s3\n  }\n\n  // \u5b58\u50a8\u5355\u5143\u63a5\u53e3\n  val sta = new Bundle() {\n    val storeAddrIn = Vec(StorePipelineWidth, Flipped(Valid(new LsPipelineBundle))) // \u4ecestore_s1\n  }\n  val std = new Bundle() {\n    val storeDataIn = Vec(StorePipelineWidth, Flipped(Valid(new MemExuOutput)))     // \u4ecestore_s0\n  }\n\n  // \u5b58\u50a8\u961f\u5217\u63a5\u53e3\n  val sq = new Bundle() {\n    val stAddrReadySqPtr = Input(new SqPtr)\n    val stAddrReadyVec   = Input(Vec(StoreQueueSize, Bool()))\n    val stDataReadySqPtr = Input(new SqPtr)\n    val stDataReadyVec   = Input(Vec(StoreQueueSize, Bool()))\n    val stIssuePtr       = Input(new SqPtr)\n    val sqEmpty          = Input(Bool())\n  }\n\n  // \u8f93\u51fa\u63a5\u53e3\n  val ldout = Vec(LoadPipelineWidth, DecoupledIO(new MemExuOutput))\n  val ld_raw_data = Vec(LoadPipelineWidth, Output(new LoadDataFromLQBundle))\n  val ncOut = Vec(LoadPipelineWidth, DecoupledIO(new LsPipelineBundle))\n  val replay = Vec(LoadPipelineWidth, Decoupled(new LsPipelineBundle))\n\n  // \u7f13\u5b58\u63a5\u53e3\n  val tl_d_channel = Input(new DcacheToLduForwardIO)\n  val release = Flipped(Valid(new Release))\n\n  // \u56de\u6eda\u63a5\u53e3\n  val nuke_rollback = Vec(StorePipelineWidth, Output(Valid(new Redirect)))\n  val nack_rollback = Vec(1, Output(Valid(new Redirect)))\n\n  // ROB\u63a5\u53e3\n  val rob = Flipped(new RobLsqIO)\n\n  // \u7279\u6b8a\u5904\u7406\u63a5\u53e3\n  val uncache = new UncacheWordIO\n  val exceptionAddr = new ExceptionAddrIO\n\n  // \u72b6\u6001\u63a5\u53e3\n  val lqFull = Output(Bool())\n  val lqDeq = Output(UInt(log2Up(CommitWidth + 1).W))\n  val lqCancelCnt = Output(UInt(log2Up(VirtualLoadQueueSize+1).W))\n  val lq_rep_full = Output(Bool())\n  val lqEmpty = Output(Bool())\n  val lqDeqPtr = Output(new LqPtr)\n  val rarValidCount = Output(UInt())\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#4","title":"4. \u5b50\u6a21\u5757\u8fde\u63a5\u4e0e\u6570\u636e\u6d41","text":"<p>LoadQueue\u7684\u4e3b\u8981\u529f\u80fd\u662f\u5c06\u5404\u4e2a\u5b50\u6a21\u5757\u8fde\u63a5\u8d77\u6765\uff0c\u5f62\u6210\u5b8c\u6574\u7684\u6570\u636e\u6d41\u548c\u63a7\u5236\u6d41\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#41-virtualloadqueue","title":"4.1 VirtualLoadQueue \u8fde\u63a5","text":"<p>VirtualLoadQueue\u4f5c\u4e3a\u63a7\u5236\u72b6\u6001\u7ba1\u7406\u8005\uff0c\u8d1f\u8d23\u8ddf\u8e2a\u52a0\u8f7d\u6307\u4ee4\u72b6\u6001\uff1a</p> <pre><code>virtualLoadQueue.io.redirect      &lt;&gt; io.redirect\nvirtualLoadQueue.io.enq           &lt;&gt; io.enq\nvirtualLoadQueue.io.ldin          &lt;&gt; io.ldu.ldin\nvirtualLoadQueue.io.lqFull        &lt;&gt; io.lqFull\nvirtualLoadQueue.io.lqDeq         &lt;&gt; io.lqDeq\nvirtualLoadQueue.io.lqCancelCnt   &lt;&gt; io.lqCancelCnt\nvirtualLoadQueue.io.lqEmpty       &lt;&gt; io.lqEmpty\nvirtualLoadQueue.io.ldWbPtr       &lt;&gt; io.lqDeqPtr\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#42-loadqueuerar","title":"4.2 LoadQueueRAR \u8fde\u63a5","text":"<p>LoadQueueRAR\u8d1f\u8d23\u68c0\u6d4b\u8bfb\u540e\u8bfb\u4f9d\u8d56\u51b2\u7a81\uff1a</p> <pre><code>loadQueueRAR.io.redirect  &lt;&gt; io.redirect\nloadQueueRAR.io.release   &lt;&gt; io.release\nloadQueueRAR.io.ldWbPtr   &lt;&gt; virtualLoadQueue.io.ldWbPtr\nloadQueueRAR.io.validCount&lt;&gt; io.rarValidCount\n\nfor (w &lt;- 0 until LoadPipelineWidth) {\n  loadQueueRAR.io.query(w).req    &lt;&gt; io.ldu.ldld_nuke_query(w).req\n  loadQueueRAR.io.query(w).resp   &lt;&gt; io.ldu.ldld_nuke_query(w).resp\n  loadQueueRAR.io.query(w).revoke := io.ldu.ldld_nuke_query(w).revoke\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#43-loadqueueraw","title":"4.3 LoadQueueRAW \u8fde\u63a5","text":"<p>LoadQueueRAW\u8d1f\u8d23\u68c0\u6d4b\u5199\u540e\u8bfb\u4f9d\u8d56\u51b2\u7a81\uff1a</p> <pre><code>loadQueueRAW.io.redirect         &lt;&gt; io.redirect\nloadQueueRAW.io.storeIn          &lt;&gt; io.sta.storeAddrIn\nloadQueueRAW.io.stAddrReadySqPtr &lt;&gt; io.sq.stAddrReadySqPtr\nloadQueueRAW.io.stIssuePtr       &lt;&gt; io.sq.stIssuePtr\n\nfor (w &lt;- 0 until LoadPipelineWidth) {\n  loadQueueRAW.io.query(w).req    &lt;&gt; io.ldu.stld_nuke_query(w).req\n  loadQueueRAW.io.query(w).resp   &lt;&gt; io.ldu.stld_nuke_query(w).resp\n  loadQueueRAW.io.query(w).revoke := io.ldu.stld_nuke_query(w).revoke\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#44","title":"4.4 \u5f02\u5e38\u5904\u7406\u8fde\u63a5","text":"<p>\u5f02\u5e38\u7f13\u51b2\u5668\u5904\u7406\u52a0\u8f7d\u6307\u4ee4\u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u5f02\u5e38\uff1a</p> <pre><code>exceptionBuffer.io.redirect &lt;&gt; io.redirect\n\nfor (i &lt;- 0 until LoadPipelineWidth) {\n  exceptionBuffer.io.req(i).valid := io.ldu.ldin(i).valid\n  exceptionBuffer.io.req(i).bits := io.ldu.ldin(i).bits\n}\n\nio.exceptionAddr &lt;&gt; exceptionBuffer.io.exceptionAddr\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#45-loadqueuereplay","title":"4.5 LoadQueueReplay \u8fde\u63a5","text":"<p>LoadQueueReplay\u8d1f\u8d23\u7ba1\u7406\u9700\u8981\u91cd\u653e\u7684\u52a0\u8f7d\u6307\u4ee4\uff1a</p> <pre><code>loadQueueReplay.io.redirect         &lt;&gt; io.redirect\nloadQueueReplay.io.enq              &lt;&gt; io.ldu.ldin\nloadQueueReplay.io.storeAddrIn      &lt;&gt; io.sta.storeAddrIn\nloadQueueReplay.io.storeDataIn      &lt;&gt; io.std.storeDataIn\nloadQueueReplay.io.replay           &lt;&gt; io.replay\nloadQueueReplay.io.tl_d_channel     &lt;&gt; io.tl_d_channel\nloadQueueReplay.io.stAddrReadySqPtr &lt;&gt; io.sq.stAddrReadySqPtr\nloadQueueReplay.io.stAddrReadyVec   &lt;&gt; io.sq.stAddrReadyVec\nloadQueueReplay.io.stDataReadySqPtr &lt;&gt; io.sq.stDataReadySqPtr\nloadQueueReplay.io.stDataReadyVec   &lt;&gt; io.sq.stDataReadyVec\nloadQueueReplay.io.sqEmpty          &lt;&gt; io.sq.sqEmpty\nloadQueueReplay.io.lqFull           &lt;&gt; io.lq_rep_full\nloadQueueReplay.io.ldWbPtr          &lt;&gt; virtualLoadQueue.io.ldWbPtr\nloadQueueReplay.io.rarFull          &lt;&gt; loadQueueRAR.io.lqFull\nloadQueueReplay.io.rawFull          &lt;&gt; loadQueueRAW.io.lqFull\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#5","title":"5. \u52a0\u8f7d\u6307\u4ee4\u5904\u7406\u6d41\u7a0b","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#51","title":"5.1 \u52a0\u8f7d\u6307\u4ee4\u5165\u961f","text":"<ol> <li>\u5206\u53d1\u9636\u6bb5\u5c06\u52a0\u8f7d\u6307\u4ee4\u53d1\u9001\u5230LoadQueue\u7684<code>enq</code>\u63a5\u53e3</li> <li>VirtualLoadQueue\u5206\u914d\u6761\u76ee\u5e76\u66f4\u65b0\u72b6\u6001</li> <li>\u8fd4\u56de\u5206\u914d\u7ed3\u679c\u5230\u5206\u53d1\u5355\u5143</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#52","title":"5.2 \u52a0\u8f7d\u5730\u5740\u751f\u6210","text":"<ol> <li>\u52a0\u8f7d\u5355\u5143\u5728S1\u9636\u6bb5\u8ba1\u7b97\u52a0\u8f7d\u5730\u5740</li> <li>\u901a\u8fc7<code>stld_nuke_query</code>\u548c<code>ldld_nuke_query</code>\u63a5\u53e3\u68c0\u67e5RAW\u548cRAR\u51b2\u7a81</li> <li>LoadQueueRAW\u548cLoadQueueRAR\u5206\u522b\u5904\u7406\u8fd9\u4e9b\u67e5\u8be2\u8bf7\u6c42</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#53","title":"5.3 \u5185\u5b58\u8bbf\u95ee","text":"<ol> <li>\u52a0\u8f7d\u5355\u5143\u5728S2\u9636\u6bb5\u8bbf\u95ee\u6570\u636e\u7f13\u5b58</li> <li>\u5bf9\u4e8e\u547d\u4e2d\u7684\u52a0\u8f7d\uff0c\u51c6\u5907\u6570\u636e\u8fd4\u56de</li> <li>\u5bf9\u4e8e\u672a\u547d\u4e2d\u7684\u52a0\u8f7d\uff0c\u51c6\u5907\u8fdb\u5165\u91cd\u653e\u673a\u5236</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#54","title":"5.4 \u52a0\u8f7d\u5b8c\u6210","text":"<ol> <li>\u52a0\u8f7d\u5355\u5143\u5728S3\u9636\u6bb5\u901a\u8fc7<code>ldin</code>\u63a5\u53e3\u5411LoadQueue\u53d1\u9001\u7ed3\u679c</li> <li>\u7ed3\u679c\u540c\u65f6\u5206\u53d1\u7ed9\u591a\u4e2a\u5b50\u6a21\u5757\uff1a<ul> <li>VirtualLoadQueue\u66f4\u65b0\u6307\u4ee4\u72b6\u6001</li> <li>LoadQueueReplay\u5904\u7406\u53ef\u80fd\u7684\u91cd\u653e</li> <li>\u5f02\u5e38\u7f13\u51b2\u5668\u8bb0\u5f55\u53ef\u80fd\u7684\u5f02\u5e38</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#55","title":"5.5 \u52a0\u8f7d\u91cd\u653e","text":"<p>\u5bf9\u4e8e\u9700\u8981\u91cd\u653e\u7684\u52a0\u8f7d\u6307\u4ee4(\u5982\u7f13\u5b58\u672a\u547d\u4e2d)\uff1a 1. LoadQueueReplay\u8bb0\u5f55\u91cd\u653e\u4fe1\u606f 2. \u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6(\u5982\u7f13\u5b58\u884c\u8fd4\u56de)\uff0c\u901a\u8fc7<code>replay</code>\u63a5\u53e3\u53d1\u9001\u91cd\u653e\u8bf7\u6c42 3. \u52a0\u8f7d\u5355\u5143\u91cd\u65b0\u6267\u884c\u8fd9\u4e9b\u6307\u4ee4</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#56","title":"5.6 \u5185\u5b58\u4f9d\u8d56\u51b2\u7a81\u5904\u7406","text":"<ol> <li> <p>\u5982\u679c\u68c0\u6d4b\u5230RAW\u51b2\u7a81\uff1a</p> <ul> <li>LoadQueueRAW\u751f\u6210\u56de\u6eda\u4fe1\u53f7</li> <li>\u901a\u8fc7<code>nuke_rollback</code>\u63a5\u53e3\u53d1\u9001\u5230ROB</li> <li>\u5904\u7406\u5668\u4ece\u6b63\u786e\u70b9\u6062\u590d\u6267\u884c</li> </ul> </li> <li> <p>\u5982\u679c\u68c0\u6d4b\u5230RAR\u51b2\u7a81\uff1a</p> <ul> <li>LoadQueueRAR\u751f\u6210\u9002\u5f53\u7684\u54cd\u5e94</li> <li>\u53ef\u80fd\u5bfc\u81f4\u6307\u4ee4\u91cd\u6392\u5e8f\u6216\u91cd\u653e</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#6","title":"6. \u672a\u7f13\u5b58\u52a0\u8f7d\u5904\u7406","text":"<p>\u5bf9\u4e8e\u8bbf\u95ee\u672a\u7f13\u5b58\u5185\u5b58\u533a\u57df(\u5982I/O\u8bbe\u5907)\u7684\u52a0\u8f7d\u6307\u4ee4\uff1a</p> <pre><code>uncacheBuffer.io.redirect &lt;&gt; io.redirect\nuncacheBuffer.io.mmioOut &lt;&gt; io.ldout\nuncacheBuffer.io.ncOut &lt;&gt; io.ncOut\nuncacheBuffer.io.mmioRawData &lt;&gt; io.ld_raw_data\nuncacheBuffer.io.rob &lt;&gt; io.rob\nuncacheBuffer.io.uncache &lt;&gt; io.uncache\n\nfor ((buff, w) &lt;- uncacheBuffer.io.req.zipWithIndex) {\n  val ldinBits = io.ldu.ldin(w).bits\n  buff.valid := io.ldu.ldin(w).valid &amp;&amp; !ldinBits.nc_with_data\n  buff.bits := ldinBits\n}\n\nio.nack_rollback(0) := uncacheBuffer.io.rollback\n</code></pre> <ol> <li>\u8bc6\u522b\u672a\u7f13\u5b58\u8bbf\u95ee\u8bf7\u6c42</li> <li>\u901a\u8fc7\u4e13\u7528\u63a5\u53e3\u5904\u7406\u8fd9\u4e9b\u8bf7\u6c42</li> <li>\u5904\u7406\u53ef\u80fd\u7684\u8bbf\u95ee\u5931\u8d25\u6216\u5f02\u5e38\u60c5\u51b5</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#7","title":"7. \u6807\u91cf\u52a0\u8f7d\u6307\u4ee4\u5904\u7406\u6d41\u7a0b\u793a\u4f8b","text":"<p>\u901a\u8fc7\u4e00\u4e2a\u5b8c\u6574\u793a\u4f8b\u8be6\u7ec6\u8bf4\u660e\u6807\u91cf\u52a0\u8f7d\u6307\u4ee4\u5728\u5404\u5b50\u6a21\u5757\u95f4\u7684\u6d41\u52a8\u8fc7\u7a0b\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#_1","title":"\u521d\u59cb\u72b6\u6001","text":"<p>\u5047\u8bbe\u5904\u7406\u5668\u6b63\u5728\u6267\u884c\u4e00\u6761\u52a0\u8f7d\u6307\u4ee4: <code>LD x5, 0(x6)</code></p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#1_1","title":"\u7b2c1\u6b65: \u6307\u4ee4\u5206\u53d1\u9636\u6bb5","text":"<ol> <li> <p>\u5206\u53d1\u5355\u5143\u5c06\u6307\u4ee4\u53d1\u9001\u5230LoadQueue:    <pre><code>io.enq.req(0).valid = true\nio.enq.req(0).bits = \u52a0\u8f7d\u6307\u4ee4\u4fe1\u606f\n</code></pre></p> </li> <li> <p>VirtualLoadQueue\u5206\u914d\u4e00\u4e2a\u6761\u76ee:    <pre><code>allocated(idx) = true\nrobIdx(idx) = \u6307\u4ee4\u7684ROB\u7d22\u5f15\ncommitted(idx) = false\n</code></pre></p> </li> <li> <p>\u8fd4\u56de\u5206\u914d\u7ed3\u679c:    <pre><code>io.enq.resp(0) = \u5206\u914d\u7684\u961f\u5217\u7d22\u5f15\n</code></pre></p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#2_1","title":"\u7b2c2\u6b65: \u5730\u5740\u751f\u6210\u548c\u51b2\u7a81\u68c0\u67e5","text":"<ol> <li> <p>\u52a0\u8f7d\u5355\u5143\u8ba1\u7b97\u5730\u5740\u540e\u67e5\u8be2\u4f9d\u8d56\u51b2\u7a81:    <pre><code>io.ldu.stld_nuke_query(0).req.valid = true\nio.ldu.stld_nuke_query(0).req.bits.addr = 0x1000\nio.ldu.stld_nuke_query(0).req.bits.mask = 0xFF\n</code></pre></p> </li> <li> <p>LoadQueueRAW\u68c0\u67e5\u662f\u5426\u5b58\u5728\u5199\u540e\u8bfb\u51b2\u7a81:</p> <ul> <li>\u626b\u63cf\u5730\u5740\u91cd\u53e0\u7684\u5b58\u50a8\u6307\u4ee4</li> <li>\u68c0\u67e5\u8fd9\u4e9b\u5b58\u50a8\u6307\u4ee4\u662f\u5426\u5728\u5f53\u524d\u52a0\u8f7d\u4e4b\u524d</li> </ul> </li> <li> <p>\u52a0\u8f7d\u5355\u5143\u540c\u65f6\u67e5\u8be2\u8bfb\u540e\u8bfb\u51b2\u7a81:    <pre><code>io.ldu.ldld_nuke_query(0).req.valid = true\nio.ldu.ldld_nuke_query(0).req.bits = \u540c\u4e0a\n</code></pre></p> </li> <li> <p>LoadQueueRAR\u68c0\u67e5\u53ef\u80fd\u7684\u987a\u5e8f\u8fdd\u4f8b</p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#3_1","title":"\u7b2c3\u6b65: \u5185\u5b58\u8bbf\u95ee","text":"<ol> <li>\u5982\u679c\u6ca1\u6709\u51b2\u7a81\uff0c\u52a0\u8f7d\u5355\u5143\u8bbf\u95ee\u6570\u636e\u7f13\u5b58</li> <li>\u5047\u8bbe\u8fd9\u662f\u4e00\u6b21\u7f13\u5b58\u547d\u4e2d\uff0c\u6570\u636e\u7acb\u5373\u53ef\u7528</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#4_1","title":"\u7b2c4\u6b65: \u52a0\u8f7d\u5b8c\u6210\u548c\u72b6\u6001\u66f4\u65b0","text":"<ol> <li> <p>\u52a0\u8f7d\u5355\u5143\u5c06\u7ed3\u679c\u53d1\u9001\u7ed9LoadQueue:    <pre><code>io.ldu.ldin(0).valid = true\nio.ldu.ldin(0).bits.uop = \u5fae\u64cd\u4f5c\u4fe1\u606f\nio.ldu.ldin(0).bits.data = 0xABCDEF01\nio.ldu.ldin(0).bits.rep_info.need_rep = false\n</code></pre></p> </li> <li> <p>\u7ed3\u679c\u540c\u65f6\u5206\u53d1\u7ed9\u5404\u5b50\u6a21\u5757:</p> <ul> <li>VirtualLoadQueue\u5c06\u6761\u76ee\u6807\u8bb0\u4e3a\u5df2\u63d0\u4ea4: <code>committed(idx) = true</code></li> <li>\u5f02\u5e38\u7f13\u51b2\u5668\u68c0\u67e5\u5e76\u8bb0\u5f55\u53ef\u80fd\u7684\u5f02\u5e38</li> <li>LoadQueueReplay\u5224\u65ad\u4e0d\u9700\u8981\u91cd\u653e</li> </ul> </li> <li> <p>\u52a0\u8f7d\u7ed3\u679c\u901a\u8fc7LoadQueue\u7684\u8f93\u51fa\u63a5\u53e3\u8fd4\u56de\u7ed9\u5904\u7406\u5668\u540e\u7aef:    <pre><code>io.ldout(0).valid = true\nio.ldout(0).bits.data = \u5904\u7406\u540e\u7684\u52a0\u8f7d\u6570\u636e\n</code></pre></p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#5_1","title":"\u7b2c5\u6b65: \u6307\u4ee4\u63d0\u4ea4","text":"<ol> <li>\u5f53ROB\u51c6\u5907\u63d0\u4ea4\u8be5\u6307\u4ee4\u65f6\uff0cVirtualLoadQueue\u5c06\u76f8\u5e94\u6761\u76ee\u51fa\u961f</li> <li>\u961f\u5217\u6307\u9488\u66f4\u65b0\uff0c\u8be5\u6761\u76ee\u53ef\u88ab\u65b0\u6307\u4ee4\u91cd\u7528</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#8","title":"8. \u5b58\u50a8\u6307\u4ee4\u62b5\u8fbe\u65f6\u7684\u51b2\u7a81\u68c0\u6d4b\u8fc7\u7a0b","text":"<p>\u5f53\u5b58\u50a8\u6307\u4ee4\u7684\u5730\u5740\u751f\u6210\u5b8c\u6210\u540e\uff0c\u9700\u8981\u68c0\u67e5\u4e0e\u73b0\u6709\u52a0\u8f7d\u6307\u4ee4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#_2","title":"\u5b58\u50a8\u5730\u5740\u751f\u6210\u5b8c\u6210","text":"<ol> <li> <p>\u5b58\u50a8\u5355\u5143\u5c06\u5730\u5740\u4fe1\u606f\u53d1\u9001\u5230LoadQueue:    <pre><code>io.sta.storeAddrIn(0).valid = true\nio.sta.storeAddrIn(0).bits.addr = 0x2000\nio.sta.storeAddrIn(0).bits.mask = 0xFF\n</code></pre></p> </li> <li> <p>LoadQueueRAW\u63a5\u6536\u5b58\u50a8\u5730\u5740:    <pre><code>loadQueueRAW.io.storeIn &lt;&gt; io.sta.storeAddrIn\n</code></pre></p> </li> <li> <p>LoadQueueRAW\u6267\u884c\u8fdd\u4f8b\u68c0\u67e5:</p> <ul> <li>\u626b\u63cf\u6240\u6709\u5df2\u6267\u884c\u4f46\u672a\u63d0\u4ea4\u7684\u52a0\u8f7d</li> <li>\u68c0\u67e5\u5730\u5740\u662f\u5426\u4e0e\u65b0\u5b58\u50a8\u6307\u4ee4\u91cd\u53e0</li> <li>\u68c0\u67e5\u52a0\u8f7d\u662f\u5426\u5e94\u8be5\u5728\u8be5\u5b58\u50a8\u4e4b\u540e\u6267\u884c</li> </ul> </li> <li> <p>\u5982\u679c\u68c0\u6d4b\u5230\u8fdd\u4f8b\uff0c\u751f\u6210\u56de\u6eda\u4fe1\u53f7:    <pre><code>io.nuke_rollback(0).valid = true\nio.nuke_rollback(0).bits.robIdx = \u8fdd\u4f8b\u52a0\u8f7d\u7684ROB\u7d22\u5f15\n</code></pre></p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#9","title":"9. \u91cd\u653e\u673a\u5236\u793a\u4f8b","text":"<p>\u5bf9\u4e8e\u9700\u8981\u91cd\u653e\u7684\u52a0\u8f7d\u6307\u4ee4(\u5982\u7f13\u5b58\u672a\u547d\u4e2d)\uff0c\u5904\u7406\u8fc7\u7a0b\u5982\u4e0b:</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#1_2","title":"\u7b2c1\u6b65: \u6807\u8bb0\u4e3a\u9700\u8981\u91cd\u653e","text":"<ol> <li> <p>\u52a0\u8f7d\u5355\u5143\u5728\u7ed3\u679c\u4e2d\u6807\u8bb0\u91cd\u653e\u9700\u6c42:    <pre><code>io.ldu.ldin(0).valid = true\nio.ldu.ldin(0).bits.rep_info.need_rep = true\nio.ldu.ldin(0).bits.rep_info.rep_type = ReSelectNew\n</code></pre></p> </li> <li> <p>LoadQueueReplay\u8bb0\u5f55\u91cd\u653e\u4fe1\u606f:</p> <ul> <li>\u5b58\u50a8\u52a0\u8f7d\u6307\u4ee4\u7684\u5730\u5740\u3001\u63a9\u7801\u548c\u5176\u4ed6\u5fc5\u8981\u4fe1\u606f</li> <li>\u8bb0\u5f55\u91cd\u653e\u7c7b\u578b\u548c\u539f\u56e0</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#2_2","title":"\u7b2c2\u6b65: \u7b49\u5f85\u91cd\u653e\u6761\u4ef6\u6ee1\u8db3","text":"<ol> <li> <p>\u5bf9\u4e8e\u7f13\u5b58\u672a\u547d\u4e2d\u5bfc\u81f4\u7684\u91cd\u653e:</p> <ul> <li>\u76d1\u542c<code>tl_d_channel</code>\u63a5\u53e3\u7684\u7f13\u5b58\u884c\u8fd4\u56de</li> <li>\u68c0\u67e5\u8fd4\u56de\u7684\u5730\u5740\u662f\u5426\u4e0e\u7b49\u5f85\u91cd\u653e\u7684\u52a0\u8f7d\u5339\u914d</li> </ul> </li> <li> <p>\u5bf9\u4e8e\u4f9d\u8d56\u5b58\u50a8\u7684\u91cd\u653e:</p> <ul> <li>\u76d1\u63a7\u76f8\u5173\u5b58\u50a8\u6307\u4ee4\u7684\u72b6\u6001</li> <li>\u5f53\u5b58\u50a8\u6570\u636e\u51c6\u5907\u597d\u65f6\u89e6\u53d1\u91cd\u653e</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#3_2","title":"\u7b2c3\u6b65: \u53d1\u8d77\u91cd\u653e","text":"<ol> <li> <p>\u6761\u4ef6\u6ee1\u8db3\u65f6\uff0cLoadQueueReplay\u53d1\u9001\u91cd\u653e\u8bf7\u6c42:    <pre><code>io.replay(0).valid = true\nio.replay(0).bits = \u539f\u59cb\u52a0\u8f7d\u6307\u4ee4\u4fe1\u606f(\u53ef\u80fd\u5305\u542b\u8f6c\u53d1\u6570\u636e)\n</code></pre></p> </li> <li> <p>\u52a0\u8f7d\u5355\u5143\u91cd\u65b0\u6267\u884c\u8be5\u6307\u4ee4:</p> <ul> <li>\u53ef\u80fd\u76f4\u63a5\u4f7f\u7528\u8f6c\u53d1\u7684\u6570\u636e</li> <li>\u6216\u91cd\u65b0\u8bbf\u95ee\u73b0\u5728\u5df2\u7ecf\u5728\u7f13\u5b58\u4e2d\u7684\u6570\u636e</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#10","title":"10. \u6027\u80fd\u76d1\u63a7\u4e0e\u8c03\u8bd5","text":"<p>LoadQueue\u6a21\u5757\u96c6\u6210\u4e86\u4e30\u5bcc\u7684\u6027\u80fd\u76d1\u63a7\u548c\u8c03\u8bd5\u529f\u80fd\uff1a</p> <pre><code>// \u5b50\u6a21\u5757\u6ee1\u72b6\u6001\u76d1\u63a7\nval full_mask = Cat(loadQueueRAR.io.lqFull, loadQueueRAW.io.lqFull, loadQueueReplay.io.lqFull)\nXSPerfAccumulate(\"full_mask_000\", full_mask === 0.U)\nXSPerfAccumulate(\"full_mask_001\", full_mask === 1.U)\n// ...\u66f4\u591a\u72b6\u6001\u8ba1\u6570\n\n// \u56de\u6eda\u76d1\u63a7\nXSPerfAccumulate(\"nuke_rollback\", io.nuke_rollback.map(_.valid).reduce(_ || _).asUInt)\nXSPerfAccumulate(\"nack_rollabck\", io.nack_rollback.map(_.valid).reduce(_ || _).asUInt)\n\n// \u7efc\u5408\u6027\u80fd\u4e8b\u4ef6\u6536\u96c6\nval perfEvents = Seq(virtualLoadQueue, loadQueueRAR, loadQueueRAW, loadQueueReplay)\n                  .flatMap(_.getPerfEvents) ++ Seq(\n  // \u5176\u4ed6\u6027\u80fd\u76d1\u63a7\u70b9\n)\ngeneratePerfEvent()\n</code></pre> <p>\u8fd9\u4e9b\u76d1\u63a7\u70b9\u53ef\u4ee5\u5e2e\u52a9\u8bc6\u522b\u6027\u80fd\u74f6\u9888\u548c\u6f5c\u5728\u95ee\u9898\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u590d\u6742\u7684\u8fdd\u4f8b\u5904\u7406\u548c\u91cd\u653e\u60c5\u51b5\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue/#11_1","title":"11. \u603b\u7ed3\u4e0e\u5e94\u7528","text":"<p>LoadQueue\u4f5c\u4e3aXiangShan\u5904\u7406\u5668LSQ\u7cfb\u7edf\u7684\u4e2d\u592e\u534f\u8c03\u7ec4\u4ef6\uff0c\u5177\u6709\u4ee5\u4e0b\u6838\u5fc3\u7279\u6027\uff1a</p> <ol> <li>\u6a21\u5757\u5316\u8bbe\u8ba1\uff1a\u5c06\u4e0d\u540c\u529f\u80fd\u5206\u79bb\u5230\u4e13\u7528\u5b50\u6a21\u5757\uff0c\u5b9e\u73b0\u9ad8\u5ea6\u6a21\u5757\u5316</li> <li>\u5168\u9762\u7684\u4f9d\u8d56\u68c0\u6d4b\uff1a\u540c\u65f6\u652f\u6301RAW\u548cRAR\u4f9d\u8d56\u68c0\u6d4b</li> <li>\u7075\u6d3b\u7684\u91cd\u653e\u673a\u5236\uff1a\u5904\u7406\u5404\u79cd\u9700\u8981\u91cd\u653e\u7684\u573a\u666f</li> <li>\u5b8c\u6574\u7684\u5f02\u5e38\u5904\u7406\uff1a\u652f\u6301\u5404\u7c7b\u52a0\u8f7d\u5f02\u5e38\u60c5\u51b5</li> <li>\u9ad8\u6027\u80fd\u8bbe\u8ba1\uff1a\u591a\u901a\u9053\u5e76\u884c\u5904\u7406\u548c\u6d41\u6c34\u7ebf\u64cd\u4f5c</li> </ol> <p>\u5728\u4e71\u5e8f\u5904\u7406\u5668\u4e2d\uff0cLoadQueue\u786e\u4fdd\u4e86\u5185\u5b58\u8bbf\u95ee\u7684\u4e00\u81f4\u6027\u548c\u6b63\u786e\u6027\uff0c\u540c\u65f6\u901a\u8fc7\u79ef\u6781\u7684\u63a8\u6d4b\u6267\u884c\u548c\u7cbe\u786e\u7684\u8fdd\u4f8b\u68c0\u6d4b\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684\u5185\u5b58\u8bbf\u95ee\u7cfb\u7edf\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/","title":"Load \u5f02\u5e38\u7f13\u51b2 LqExceptionBuffer \u6a21\u5757","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#1","title":"1. \u6a21\u5757\u6982\u8ff0","text":"<p><code>LqExceptionBuffer</code> \u662f XiangShan \u5904\u7406\u5668 LSQ \u7cfb\u7edf\u4e2d\u7684\u4e13\u7528\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u8ddf\u8e2a\u548c\u7ba1\u7406\u52a0\u8f7d\u6307\u4ee4\u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u5404\u7c7b\u5f02\u5e38\u3002\u5f53\u52a0\u8f7d\u6307\u4ee4\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff08\u5982\u9875\u9519\u8bef\u3001\u8bbf\u95ee\u9519\u8bef\u7b49\uff09\uff0c\u8be5\u6a21\u5757\u8d1f\u8d23\u6355\u83b7\u3001\u7f13\u5b58\u8fd9\u4e9b\u5f02\u5e38\u4fe1\u606f\uff0c\u5e76\u786e\u4fdd\u5b83\u4eec\u80fd\u591f\u5728\u9002\u5f53\u7684\u65f6\u673a\u88ab\u7cbe\u786e\u5904\u7406<sup>1</sup>\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#11","title":"1.1 \u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u8ddf\u8e2a\u8bb0\u5f55\u5404\u7c7b\u52a0\u8f7d\u6307\u4ee4\u4ea7\u751f\u7684\u5f02\u5e38\u60c5\u51b5</li> <li>\u6839\u636e ROB \u7d22\u5f15\u9009\u62e9\u6700\u8001\u7684\u5f02\u5e38\u6307\u4ee4</li> <li>\u5411\u7cbe\u786e\u5f02\u5e38\u5904\u7406\u673a\u5236\u63d0\u4f9b\u5fc5\u8981\u7684\u5f02\u5e38\u4fe1\u606f\u548c\u5730\u5740</li> <li>\u652f\u6301\u91cd\u5b9a\u5411\u65f6\u7684\u5f02\u5e38\u6761\u76ee\u5237\u65b0</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#2","title":"2. \u5f02\u5e38\u6765\u6e90","text":"<p>LqExceptionBuffer \u5904\u7406\u7684\u5f02\u5e38\u6765\u81ea\u4e09\u79cd\u4e3b\u8981\u6765\u6e90<sup>1</sup>\uff1a</p> <ol> <li>\u6807\u91cf\u52a0\u8f7d\u5f02\u5e38\uff1a\u6765\u81ea\u52a0\u8f7d\u5355\u5143(LDU) S3 \u9636\u6bb5\u7684\u6807\u91cf\u52a0\u8f7d\u6307\u4ee4\u5f02\u5e38</li> <li>\u5411\u91cf\u52a0\u8f7d\u5f02\u5e38\uff1a\u6765\u81ea\u5411\u91cf\u52a0\u8f7d\u5408\u5e76\u7f13\u51b2\u5668(vlMergeBuffer)\u7684\u5411\u91cf\u52a0\u8f7d\u6307\u4ee4\u5f02\u5e38</li> <li>MMIO \u5f02\u5e38\uff1a\u6765\u81ea LoadUncacheBuffer \u7684 MMIO non-data \u5f02\u5e38</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#3","title":"3. \u6d41\u6c34\u7ebf\u7ed3\u6784","text":"<p>LqExceptionBuffer \u91c7\u7528\u4e24\u7ea7\u6d41\u6c34\u7ebf\u7ed3\u6784\u5904\u7406\u5f02\u5e38<sup>1</sup>\uff1a</p> <ol> <li>\u7b2c\u4e00\u7ea7\u6d41\u6c34\u7ebf\uff1a</li> <li>\u7f13\u5b58\u6765\u81ea LDU \u7684 S3 \u9636\u6bb5\u8f93\u51fa\u7684\u4fe1\u606f</li> <li> <p>\u8bb0\u5f55\u5f02\u5e38\u6307\u4ee4\u7684\u5404\u79cd\u4fe1\u606f\uff0c\u5305\u62ec ROB \u7d22\u5f15\u3001\u6307\u4ee4\u7c7b\u578b\u3001\u865a\u62df\u5730\u5740\u548c\u5f02\u5e38\u5411\u91cf</p> </li> <li> <p>\u7b2c\u4e8c\u7ea7\u6d41\u6c34\u7ebf\uff1a</p> </li> <li>\u6839\u636e ROB \u7d22\u5f15(robIdx)\u9009\u53d6\u6700\u8001\u7684\u53d1\u751f\u5f02\u5e38\u7684\u6307\u4ee4</li> <li>\u8f93\u51fa\u8be5\u6307\u4ee4\u7684\u865a\u62df\u5730\u5740(vaddr)\u7ed9\u7cbe\u786e\u5f02\u5e38\u5904\u7406\u673a\u5236</li> </ol> <p>\u8fd9\u79cd\u6d41\u6c34\u7ebf\u8bbe\u8ba1\u4f7f\u5f97\u5f02\u5e38\u68c0\u6d4b\u548c\u9009\u62e9\u53ef\u4ee5\u5728\u9ad8\u9891\u5904\u7406\u5668\u4e2d\u9ad8\u6548\u8fdb\u884c\uff0c\u540c\u65f6\u4fdd\u6301\u5f02\u5e38\u5904\u7406\u7684\u7cbe\u786e\u6027\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#4","title":"4. \u6570\u636e\u7ed3\u6784\u4e0e\u63a5\u53e3","text":"<p>LqExceptionBuffer \u7684\u63a5\u53e3\u7ed3\u6784\u5927\u81f4\u5982\u4e0b\uff1a</p> <pre><code>val io = IO(new Bundle() {\n  // \u63a7\u5236\u63a5\u53e3\n  val redirect = Flipped(Valid(new Redirect))  // \u91cd\u5b9a\u5411/\u6062\u590d\u4fe1\u53f7\n\n  // \u8f93\u5165\u63a5\u53e3\uff1a\u4ece\u52a0\u8f7d\u5355\u5143\u63a5\u6536\u6267\u884c\u7ed3\u679c\n  val req = Vec(LoadPipelineWidth, Flipped(Valid(new LqWriteBundle)))\n\n  // \u8f93\u51fa\u63a5\u53e3\uff1a\u62a5\u544a\u5f02\u5e38\u5730\u5740\n  val exceptionAddr = new ExceptionAddrIO\n})\n</code></pre> <p>\u5176\u4e2d <code>ExceptionAddrIO</code> \u5305\u542b\uff1a - \u5f02\u5e38\u6307\u4ee4\u7684 ROB \u7d22\u5f15 - \u5f02\u5e38\u6307\u4ee4\u7684\u865a\u62df\u5730\u5740 - \u53ef\u80fd\u7684\u7269\u7406\u5730\u5740 - \u5f02\u5e38\u7c7b\u578b\u5411\u91cf</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#5","title":"5. \u5f02\u5e38\u9009\u62e9\u673a\u5236","text":"<p>LqExceptionBuffer \u4f7f\u7528\u4ee5\u4e0b\u673a\u5236\u9009\u62e9\u9700\u8981\u62a5\u544a\u7684\u5f02\u5e38\uff1a</p> <ol> <li>\u6700\u8001\u4f18\u5148\uff1a\u6839\u636e ROB \u7d22\u5f15(robIdx)\u9009\u62e9\u6d41\u6c34\u7ebf\u4e2d\u6700\u8001\u7684\u5f02\u5e38\u6307\u4ee4</li> <li>\u5f02\u5e38\u4f18\u5148\u7ea7\uff1a\u5bf9\u4e8e\u540c\u4e00\u6307\u4ee4\u7684\u591a\u4e2a\u5f02\u5e38\uff0c\u6309\u7167\u9884\u5b9a\u4e49\u7684\u4f18\u5148\u7ea7\u9009\u62e9\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u5f02\u5e38</li> <li>\u6709\u6548\u6027\u8fc7\u6ee4\uff1a\u53ea\u8003\u8651\u672a\u88ab\u91cd\u5b9a\u5411\u5237\u65b0\u7684\u6709\u6548\u5f02\u5e38\u6307\u4ee4</li> </ol> <pre><code>// \u4f2a\u4ee3\u7801\u793a\u4f8b\nval oldestExceptionIdx = Wire(UInt())\n// \u904d\u5386\u6240\u6709\u7f13\u5b58\u7684\u5f02\u5e38\u6307\u4ee4\uff0c\u9009\u62e9\u6700\u8001\u7684\u4e00\u4e2a\nfor (i &lt;- 0 until BufferSize) {\n  when (entries(i).valid &amp;&amp; \n        isOlder(entries(i).robIdx, entries(oldestExceptionIdx).robIdx)) {\n    oldestExceptionIdx := i.U\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#6","title":"6. \u91cd\u5b9a\u5411\u5904\u7406","text":"<p>\u5f53\u5904\u7406\u5668\u53d1\u751f\u91cd\u5b9a\u5411\uff08\u5982\u5206\u652f\u9884\u6d4b\u9519\u8bef\uff09\u65f6\uff0cLqExceptionBuffer \u9700\u8981\u6e05\u9664\u6240\u6709\u4e0d\u518d\u6709\u6548\u7684\u5f02\u5e38\u6761\u76ee<sup>1</sup>\uff1a</p> <pre><code>// \u4f2a\u4ee3\u7801\u793a\u4f8b\nwhen (io.redirect.valid) {\n  // \u6e05\u9664\u88ab\u91cd\u5b9a\u5411\u5237\u65b0\u7684\u5f02\u5e38\u6761\u76ee\n  for (i &lt;- 0 until BufferSize) {\n    when (entries(i).valid &amp;&amp; entries(i).robIdx.needFlush(io.redirect.bits)) {\n      entries(i).valid := false.B\n    }\n  }\n}\n</code></pre> <p>\u8fd9\u786e\u4fdd\u4e86\u53ea\u6709\u771f\u6b63\u6709\u6548\u7684\u5f02\u5e38\u4f1a\u88ab\u4fdd\u7559\u5e76\u6700\u7ec8\u62a5\u544a\u7ed9\u5904\u7406\u5668\u7684\u5f02\u5e38\u5904\u7406\u673a\u5236\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#7","title":"7. \u5f02\u5e38\u5730\u5740\u62a5\u544a","text":"<p>LqExceptionBuffer \u5728\u7b2c\u4e8c\u7ea7\u6d41\u6c34\u7ebf\u4e2d\u5b8c\u6210\u5f02\u5e38\u5730\u5740\u7684\u62a5\u544a\uff1a</p> <pre><code>// \u4f2a\u4ee3\u7801\u793a\u4f8b\nio.exceptionAddr.valid := hasValidException\nio.exceptionAddr.bits.robIdx := entries(oldestExceptionIdx).robIdx\nio.exceptionAddr.bits.vaddr := entries(oldestExceptionIdx).vaddr\nio.exceptionAddr.bits.exceptionVec := entries(oldestExceptionIdx).exceptionVec\n</code></pre> <p>\u8fd9\u4e9b\u4fe1\u606f\u5c06\u88ab\u4f20\u9012\u7ed9 ROB\uff0c\u5f53\u8be5\u5f02\u5e38\u6307\u4ee4\u5230\u8fbe\u63d0\u4ea4\u70b9\u65f6\uff0c\u5904\u7406\u5668\u5c06\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\u8fdb\u884c\u7cbe\u786e\u5f02\u5e38\u5904\u7406\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#8","title":"8. \u5178\u578b\u5de5\u4f5c\u6d41\u7a0b","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#81","title":"8.1 \u5f02\u5e38\u6355\u83b7\u548c\u8bb0\u5f55","text":"<ol> <li>\u52a0\u8f7d\u5355\u5143\u6267\u884c\u52a0\u8f7d\u6307\u4ee4\uff0c\u68c0\u6d4b\u5230\u5f02\u5e38\uff08\u5982\u9875\u9519\u8bef\uff09</li> <li>\u5f02\u5e38\u4fe1\u606f\u901a\u8fc7 <code>io.req</code> \u63a5\u53e3\u53d1\u9001\u5230 LqExceptionBuffer</li> <li>\u7b2c\u4e00\u7ea7\u6d41\u6c34\u7ebf\u7f13\u5b58\u8be5\u5f02\u5e38\u4fe1\u606f\uff0c\u5305\u62ec\u6307\u4ee4\u7684 ROB \u7d22\u5f15\u3001\u865a\u62df\u5730\u5740\u548c\u5f02\u5e38\u5411\u91cf</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#82","title":"8.2 \u5f02\u5e38\u9009\u62e9\u548c\u62a5\u544a","text":"<ol> <li>\u7b2c\u4e8c\u7ea7\u6d41\u6c34\u7ebf\u626b\u63cf\u6240\u6709\u7f13\u5b58\u7684\u5f02\u5e38\u6761\u76ee</li> <li>\u6839\u636e ROB \u7d22\u5f15\u9009\u62e9\u6700\u8001\u7684\u5f02\u5e38\u6307\u4ee4</li> <li>\u5c06\u8be5\u6307\u4ee4\u7684\u865a\u62df\u5730\u5740\u548c\u5f02\u5e38\u4fe1\u606f\u901a\u8fc7 <code>io.exceptionAddr</code> \u63a5\u53e3\u62a5\u544a</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#83","title":"8.3 \u5f02\u5e38\u5904\u7406","text":"<ol> <li>ROB \u5728\u5c1d\u8bd5\u63d0\u4ea4\u8be5\u6307\u4ee4\u65f6\u68c0\u67e5\u5f02\u5e38\u6807\u5fd7</li> <li>\u5f53\u53d1\u73b0\u5f02\u5e38\u65f6\uff0c\u89e6\u53d1\u5904\u7406\u5668\u7684\u7cbe\u786e\u5f02\u5e38\u5904\u7406\u673a\u5236</li> <li>\u5904\u7406\u5668\u4fdd\u5b58\u4e0a\u4e0b\u6587\u5e76\u8df3\u8f6c\u5230\u76f8\u5e94\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_exception/#9","title":"9. \u603b\u7ed3","text":"<p>LqExceptionBuffer \u662f XiangShan \u5904\u7406\u5668 LSQ \u7cfb\u7edf\u4e2d\u5904\u7406\u52a0\u8f7d\u6307\u4ee4\u5f02\u5e38\u7684\u5173\u952e\u7ec4\u4ef6\u3002\u5b83\u901a\u8fc7\u4e24\u7ea7\u6d41\u6c34\u7ebf\u9ad8\u6548\u5730\u8ddf\u8e2a\u6765\u81ea\u4e09\u79cd\u4e0d\u540c\u6765\u6e90\u7684\u5f02\u5e38\uff0c\u5e76\u6839\u636e\u7a0b\u5e8f\u987a\u5e8f\u9009\u62e9\u6700\u8001\u7684\u5f02\u5e38\u8fdb\u884c\u62a5\u544a\u3002\u8fd9\u4e2a\u6a21\u5757\u662f\u5b9e\u73b0\u7cbe\u786e\u5f02\u5e38\u5904\u7406\u7684\u91cd\u8981\u90e8\u5206\uff0c\u786e\u4fdd\u4e86\u4e71\u5e8f\u6267\u884c\u7684\u5904\u7406\u5668\u80fd\u591f\u6309\u7167\u7a0b\u5e8f\u987a\u5e8f\u5904\u7406\u5f02\u5e38\uff0c\u7ef4\u62a4\u4e86\u7a0b\u5e8f\u6267\u884c\u7684\u6b63\u786e\u6027\u548c\u53ef\u9884\u6d4b\u6027\u3002</p> <ol> <li> <p>Load \u5f02\u5e38\u7f13\u51b2 LqExceptionBuffer - \u9999\u5c71\u5f00\u6e90\u5904\u7406\u5668\u8bbe\u8ba1\u6587\u6863 \u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/","title":"LoadQueueRAR","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#1","title":"1. \u6a21\u5757\u6982\u8ff0","text":"<p><code>LoadQueueRAR.scala</code> \u5b9e\u73b0\u4e86XiangShan\u5904\u7406\u5668\u4e2d\u7684\u8bfb\u540e\u8bfb(RAR: Read-After-Read)\u4f9d\u8d56\u68c0\u6d4b\u673a\u5236\u3002\u8fd9\u4e2a\u6a21\u5757\u8d1f\u8d23\u7ef4\u62a4\u5904\u7406\u5668\u5185\u5b58\u8bbf\u95ee\u7684\u987a\u5e8f\u4e00\u81f4\u6027\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6a21\u578b\u8fdd\u4f8b\u7684\u52a0\u8f7d-\u52a0\u8f7d\u6307\u4ee4\u5e8f\u5217\u3002\u4e0eLoadQueueRAW\u4e0d\u540c\uff0cLoadQueueRAR\u4e3b\u8981\u5904\u7406\u591a\u6838\u73af\u5883\u4e0b\u7684\u5185\u5b58\u4e00\u81f4\u6027\u95ee\u9898\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#11","title":"1.1 \u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u68c0\u6d4b\u591a\u6838\u73af\u5883\u4e0b\u53ef\u80fd\u8fdd\u53cd\u5185\u5b58\u6a21\u578b\u987a\u5e8f\u7ea6\u675f\u7684\u52a0\u8f7d\u6307\u4ee4\u5bf9</li> <li>\u5904\u7406\u7f13\u5b58\u4e00\u81f4\u6027\u4e8b\u4ef6\uff08\u5982cache line eviction/release\uff09\u5bf9\u52a0\u8f7d\u6307\u4ee4\u7684\u5f71\u54cd</li> <li>\u652f\u6301RISC-V\u5185\u5b58\u6a21\u578b\u4e0b\u7684\u987a\u5e8f\u4fdd\u8bc1</li> <li>\u4e3a\u8de8\u6838\u5fc3\u7684\u5185\u5b58\u4e00\u81f4\u6027\u63d0\u4f9b\u57fa\u7840\u652f\u6301</li> <li>\u5728\u68c0\u6d4b\u5230\u8fdd\u4f8b\u65f6\u901a\u77e5\u76f8\u5173\u52a0\u8f7d\u6307\u4ee4\u8fdb\u884c\u91cd\u65b0\u6267\u884c</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#12","title":"1.2 \u6a21\u5757\u5b9a\u4e49","text":"<pre><code>class LoadQueueRAR(implicit p: Parameters) extends XSModule\n  with HasDCacheParameters\n  with HasCircularQueuePtrHelper\n  with HasPerfEvents {\n  // \u6a21\u5757\u5b9e\u73b0\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#2","title":"2. \u6570\u636e\u7ed3\u6784\u4e0e\u63a5\u53e3","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#21-io","title":"2.1 IO \u63a5\u53e3","text":"<pre><code>val io = IO(new Bundle() {\n  // \u63a7\u5236\u63a5\u53e3\n  val redirect = Flipped(Valid(new Redirect))\n  val release = Flipped(Valid(new Release))\n  val ldWbPtr = Input(new LqPtr)\n\n  // \u67e5\u8be2\u63a5\u53e3\n  val query = Vec(LoadPipelineWidth, new LoadToLoadQueryIO)\n\n  // \u72b6\u6001\u63a5\u53e3\n  val lqFull = Output(Bool())\n  val validCount = Output(UInt())\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#22","title":"2.2 \u5185\u90e8\u6570\u636e\u7ed3\u6784","text":"<pre><code>// \u5df2\u6267\u884c\u7684\u52a0\u8f7d\u6307\u4ee4\u8bb0\u5f55\nval allocated = RegInit(VecInit(List.fill(RarQueueSize)(false.B)))  // \u6761\u76ee\u662f\u5426\u6709\u6548\nval uop = Reg(Vec(RarQueueSize, new MicroOp))                       // \u5fae\u64cd\u4f5c\u4fe1\u606f\nval paddr = Reg(Vec(RarQueueSize, UInt(16.W)))                      // \u538b\u7f29\u540e\u7684\u7269\u7406\u5730\u5740(16bits)\nval mask = Reg(Vec(RarQueueSize, UInt(8.W)))                        // \u8bbf\u95ee\u63a9\u7801\nval robIdx = Reg(Vec(RarQueueSize, new RobPtr))                     // ROB\u7d22\u5f15\nval released = RegInit(VecInit(List.fill(RarQueueSize)(false.B)))   // \u662f\u5426\u88ab\u91ca\u653e\u6807\u8bb0\n\n// \u961f\u5217\u6307\u9488\u7ba1\u7406\nval enqPtrExt = RegInit(0.U.asTypeOf(new RarQueuePtr))\nval deqPtrExt = RegInit(0.U.asTypeOf(new RarQueuePtr))\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#3-rar","title":"3. RAR\u4f9d\u8d56\u8fdd\u4f8b\u673a\u5236","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#31-rar","title":"3.1 \u591a\u6838\u73af\u5883\u4e0b\u7684RAR\u8fdd\u4f8b","text":"<p>\u5355\u6838\u73af\u5883\u4e0b\uff0c\u76f8\u540c\u5730\u5740\u7684\u52a0\u8f7d\u6307\u4ee4\u4e71\u5e8f\u6267\u884c\u901a\u5e38\u4e0d\u4f1a\u5bfc\u81f4\u95ee\u9898\u3002\u4f46\u5728\u591a\u6838\u73af\u5883\u4e0b\uff0c\u5982\u679c\u51fa\u73b0\u4ee5\u4e0b\u60c5\u51b5\u4f1a\u5bfc\u81f4RAR\u8fdd\u4f8b\uff1a</p> <ol> <li>\u5f53\u524d\u6838\u5fc3\u6709\u4e24\u4e2a\u8bbf\u95ee\u76f8\u540c\u5730\u5740\u7684\u52a0\u8f7d\u6307\u4ee4A\u548cB\uff08\u7a0b\u5e8f\u987a\u5e8f\u4e2dA\u5728\u524dB\u5728\u540e\uff09</li> <li>\u8fd9\u4e24\u4e2a\u52a0\u8f7d\u6307\u4ee4\u95f4\uff0c\u53e6\u4e00\u4e2a\u6838\u5fc3\u5bf9\u76f8\u540c\u5730\u5740\u8fdb\u884c\u4e86\u5b58\u50a8\u64cd\u4f5c</li> <li>\u5982\u679c\u52a0\u8f7d\u6307\u4ee4B\u5728A\u4e4b\u524d\u6267\u884c\uff08\u4e71\u5e8f\u6267\u884c\uff09\uff0c\u53ef\u80fd\u5bfc\u81f4B\u672a\u770b\u5230\u5176\u4ed6\u6838\u5fc3\u7684\u5b58\u50a8\u7ed3\u679c\uff0c\u800cA\u5374\u770b\u5230\u4e86</li> <li>\u8fd9\u79cd\u60c5\u51b5\u8fdd\u53cd\u4e86\u5185\u5b58\u4e00\u81f4\u6027\u6a21\u578b\uff0c\u79f0\u4e3aload-load\u8fdd\u4f8b</li> </ol> <p>\u591a\u6838\u73af\u5883\u4e0b\u7684load-load\u8fdd\u4f8b\u6709\u4e00\u4e2a\u663e\u8457\u7279\u5f81\uff1a\u5f53\u524dDCache\u4e00\u5b9a\u4f1a\u6536\u5230L2 cache\u53d1\u6765\u7684Probe\u8bf7\u6c42\uff0c\u4f7f\u5f97DCache\u4e3b\u52a8\u91ca\u653e\u6389\u8fd9\u4e2a\u6570\u636e\u526f\u672c\u3002\u8fd9\u65f6DCache\u4f1a\u901a\u77e5LoadQueue\uff0c\u5c06\u76f8\u540c\u5730\u5740\u7684\u5df2\u7ecf\u5b8c\u6210\u8bbf\u5b58\u7684\u52a0\u8f7d\u6307\u4ee4\u505a\u4e00\u4e2arelease\u6807\u8bb0\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#32","title":"3.2 \u52a0\u8f7d\u6307\u4ee4\u67e5\u8be2","text":"<p>\u5f53\u52a0\u8f7d\u6307\u4ee4\u6267\u884c\u5230\u6d41\u6c34\u7ebf\u7684s2\u9636\u6bb5\u65f6\uff0c\u9700\u8981\u67e5\u8be2\u662f\u5426\u5b58\u5728\u4e0e\u4e4b\u6709\u987a\u5e8f\u7ea6\u675f\u7684\u65e9\u671f\u52a0\u8f7d\u6307\u4ee4\uff1a</p> <pre><code>for (i &lt;- 0 until LoadPipelineWidth) {\n  val req = io.query(i).req\n  val resp = io.query(i).resp\n\n  when (req.valid) {\n    // \u83b7\u53d6\u67e5\u8be2\u4fe1\u606f\n    val addr = req.bits.paddr\n    val mask = req.bits.mask\n    val robIdx = req.bits.robIdx\n\n    // \u68c0\u67e5\u662f\u5426\u5b58\u5728RAR\u4f9d\u8d56\n    val matchVec = VecInit((0 until RarQueueSize).map(j =&gt; {\n      val validEntry = allocated(j)\n      val addrMatch = (paddr(j) &amp; ~(7.U)) === (addr &amp; ~(7.U))\n      val maskOverlap = (mask &amp; mask(j)).orR\n\n      // \u5173\u952e\u5224\u65ad\uff1a\u5f53\u524d\u6307\u4ee4\u5728\u7a0b\u5e8f\u987a\u5e8f\u4e0a\u665a\u4e8e\u961f\u5217\u4e2d\u7684\u6307\u4ee4\uff0c\n      // \u4e14\u961f\u5217\u4e2d\u7684\u6307\u4ee4\u5df2\u88ab\u6807\u8bb0\u4e3arelease\n      val needFlush = robIdx.needFlush(robIdx(j))\n      val isReleased = released(j)\n\n      validEntry &amp;&amp; addrMatch &amp;&amp; maskOverlap &amp;&amp; needFlush &amp;&amp; isReleased\n    }))\n\n    // \u751f\u6210\u54cd\u5e94\n    resp.valid := req.valid\n    resp.bits.conflict := matchVec.asUInt.orR\n    resp.bits.conflictAddr := PriorityMux(matchVec, paddr)\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#33-release","title":"3.3 Release\u6807\u8bb0\u5904\u7406","text":"<p>LoadQueueRAR\u4e2d\u7684\u52a0\u8f7d\u6307\u4ee4\u88ab\u6807\u8bb0\u4e3arelease\u6709\u56db\u79cd\u60c5\u51b5\uff1a</p> <ol> <li>missQueue\u6a21\u5757\u7684replace_req\uff1a\u5728mainpipe\u6d41\u6c34\u7ebf\u7684s3\u6808\u53d1\u8d77release\u91ca\u653edcache\u5757</li> <li>probeQueue\u6a21\u5757\u7684probe_req\uff1a\u5728mainpipe\u6d41\u6c34\u7ebf\u7684s3\u6808\u53d1\u8d77release\u91ca\u653edcache\u5757</li> <li>atomicsUnit\u6a21\u5757\u7684\u8bf7\u6c42\uff1a\u5728mainpipe\u6d41\u6c34\u7ebf\u7684s3\u6808\u53d1\u751fmiss\u65f6\u9700\u8981\u91ca\u653edcache\u5757</li> <li>\u975e\u7f13\u5b58(nc)\u6307\u4ee4\uff1a\u5982\u679c\u5165\u961f\u8bf7\u6c42\u662fnc\u6307\u4ee4\uff0c\u5728\u5165\u961f\u65f6\u5c31\u88ab\u6807\u8bb0\u4e3arelease</li> </ol> <pre><code>// \u5904\u7406\u7f13\u5b58\u91ca\u653e\u4e8b\u4ef6\nwhen (io.release.valid) {\n  val releaseAddr = io.release.bits.paddr\n\n  // \u68c0\u67e5\u6240\u6709\u5df2\u8bb0\u5f55\u7684\u52a0\u8f7d\u6307\u4ee4\n  for (i &lt;- 0 until RarQueueSize) {\n    val addrMatch = (paddr(i) &amp; ~(lineBytesOffset.U)) === (releaseAddr &amp; ~(lineBytesOffset.U))\n\n    // \u5f53\u52a0\u8f7d\u5730\u5740\u5339\u914d\u88ab\u91ca\u653e\u7684\u7f13\u5b58\u884c\u65f6\uff0c\u8be5\u52a0\u8f7d\u6807\u8bb0\u4e3areleased\n    when (allocated(i) &amp;&amp; addrMatch) {\n      released(i) := true.B\n    }\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#4","title":"4. \u961f\u5217\u7ba1\u7406\u673a\u5236","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#41","title":"4.1 \u5165\u961f\u64cd\u4f5c","text":"<p>\u5f53\u52a0\u8f7d\u6307\u4ee4\u6267\u884c\u5230\u6d41\u6c34\u7ebfs2\u9636\u6bb5\u65f6\uff0c\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u5165\u961f\u6761\u4ef6\u3002\u5982\u679c\u5728\u5f53\u524d\u52a0\u8f7d\u6307\u4ee4\u4e4b\u524d\u6709\u672a\u5b8c\u6210\u7684\u52a0\u8f7d\u6307\u4ee4\uff0c\u4e14\u5f53\u524d\u6307\u4ee4\u6ca1\u6709\u88abflush\u65f6\uff0c\u5f53\u524d\u52a0\u8f7d\u53ef\u4ee5\u5165\u961f\uff1a</p> <pre><code>// \u8bb0\u5f55\u52a0\u8f7d\u6307\u4ee4\u4fe1\u606f\nfor (i &lt;- 0 until LoadPipelineWidth) {\n  val ld = io.query(i)\n\n  // \u5224\u65ad\u662f\u5426\u9700\u8981\u5165\u961f\n  val needEnqueue = ld.req.valid &amp;&amp; !ld.req.bits.robIdx.needFlush(io.redirect.bits)\n\n  when (needEnqueue &amp;&amp; io.canAllocate(i)) {\n    val idx = io.allocateSlot(i)\n\n    // \u8bb0\u5f55\u52a0\u8f7d\u4fe1\u606f\n    allocated(idx) := true.B\n    uop(idx) := ld.req.bits.uop\n    paddr(idx) := ld.req.bits.paddr(PAddrBits-1, PAddrBits-16) // \u538b\u7f29\u768416\u4f4d\u7269\u7406\u5730\u5740\n    mask(idx) := ld.req.bits.mask\n    robIdx(idx) := ld.req.bits.robIdx\n\n    // \u5982\u679c\u662fnc\u6307\u4ee4\uff0c\u76f4\u63a5\u6807\u8bb0\u4e3areleased\n    released(idx) := ld.req.bits.isUncache\n  }\n}\n\n// \u66f4\u65b0\u5165\u961f\u6307\u9488\nval enqNum = PopCount(io.doAllocate)\nenqPtrExt := enqPtrExt + enqNum\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#42","title":"4.2 \u51fa\u961f\u64cd\u4f5c","text":"<p>LoadQueueRAR\u901a\u8fc7\u76d1\u89c6LoadQueue\u7684\u5199\u56de\u6307\u9488\u6765\u5b9e\u73b0\u6761\u76ee\u6e05\u7406\uff1a</p> <pre><code>// \u57fa\u4e8eldWbPtr\u6e05\u7406\u6761\u76ee\nfor (i &lt;- 0 until RarQueueSize) {\n  // \u5f53\u6307\u4ee4\u5df2\u63d0\u4ea4\u6216\u88ab\u53d6\u6d88\u65f6\uff0c\u6807\u8bb0\u4e3a\u53ef\u6e05\u9664\n  when (allocated(i) &amp;&amp; (robIdx(i).needFlush(io.redirect.bits) || isBefore(robIdx(i), io.ldWbPtr))) {\n    allocated(i) := false.B\n    released(i) := false.B\n  }\n}\n\n// \u66f4\u65b0\u51fa\u961f\u6307\u9488\nval deqNum = PopCount(deqMask)\ndeqPtrExt := deqPtrExt + deqNum\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#5-rar","title":"5. \u5177\u4f53\u793a\u4f8b\uff1a\u591a\u6838\u73af\u5883\u4e0b\u7684RAR\u8fdd\u4f8b","text":"<p>\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3LoadQueueRAR\u7684\u5de5\u4f5c\u673a\u5236\uff0c\u4e0b\u9762\u8be6\u7ec6\u8bf4\u660e\u4e00\u4e2a\u591a\u6838\u73af\u5883\u4e0bRAR\u8fdd\u4f8b\u68c0\u6d4b\u7684\u573a\u666f\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#_1","title":"\u573a\u666f\u8bbe\u7f6e","text":"<p>\u5047\u8bbe\u6709\u4e24\u4e2a\u6838\u5fc3\uff0c\u5728\u5f53\u524d\u6838\u5fc3\u6709\u4ee5\u4e0b\u52a0\u8f7d\u6307\u4ee4\u5e8f\u5217\uff1a 1. <code>LD x1, [0x1000]</code> (robIdx=10, \u8f83\u8001\u7684\u6307\u4ee4) 2. <code>LD x2, [0x1000]</code> (robIdx=20, \u8f83\u65b0\u7684\u6307\u4ee4)</p> <p>\u4f46\u7531\u4e8e\u4e71\u5e8f\u6267\u884c\uff0c\u6307\u4ee42\u5148\u4e8e\u6307\u4ee41\u6267\u884c\u3002\u540c\u65f6\uff0c\u53e6\u4e00\u4e2a\u6838\u5fc3\u5728\u4e24\u8005\u6267\u884c\u4e4b\u95f4\u5bf9\u5730\u57400x1000\u6267\u884c\u4e86\u5b58\u50a8\u64cd\u4f5c\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#12_1","title":"\u7b2c1\u6b65\uff1a\u6307\u4ee42\u5148\u6267\u884c","text":"<ol> <li> <p>\u6307\u4ee42\u5728\u6d41\u6c34\u7ebfs2\u9636\u6bb5\u67e5\u8be2RAR\u4f9d\u8d56\uff1a    <pre><code>io.query(0).req.valid = true\nio.query(0).req.bits.paddr = 0x1000\nio.query(0).req.bits.mask = 0xFF\nio.query(0).req.bits.robIdx = 20\n</code></pre></p> </li> <li> <p>\u6b64\u65f6LoadQueueRAR\u6ca1\u6709\u76f8\u5173\u6761\u76ee\uff0c\u6ca1\u6709\u68c0\u6d4b\u5230\u8fdd\u4f8b\uff1a    <pre><code>io.query(0).resp.bits.conflict = false\n</code></pre></p> </li> <li> <p>\u6307\u4ee42\u88ab\u8bb0\u5f55\u5230LoadQueueRAR\uff1a    <pre><code>idx = \u5206\u914d\u7684\u6761\u76ee\u7d22\u5f15\nallocated(idx) = true\npaddr(idx) = 0x1000\u7684\u538b\u7f29\u5730\u5740\nmask(idx) = 0xFF\nrobIdx(idx) = 20\nreleased(idx) = false (\u5c1a\u672a\u91ca\u653e)\n</code></pre></p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#2_1","title":"\u7b2c2\u6b65\uff1a\u5176\u4ed6\u6838\u5fc3\u6267\u884c\u5b58\u50a8\u64cd\u4f5c","text":"<p>\u53e6\u4e00\u4e2a\u6838\u5fc3\u5bf9\u5730\u57400x1000\u6267\u884c\u5b58\u50a8\u64cd\u4f5c\uff0c\u89e6\u53d1\u7f13\u5b58\u4e00\u81f4\u6027\u673a\u5236\uff1a</p> <ol> <li>L2 cache\u5411\u5f53\u524d\u6838\u5fc3\u53d1\u9001Probe\u8bf7\u6c42</li> <li>DCache\u63a5\u6536\u5230\u8bf7\u6c42\uff0c\u91ca\u653e\u5305\u542b0x1000\u7684\u7f13\u5b58\u884c</li> <li> <p>DCache\u901a\u77e5LoadQueueRAR\uff1a    <pre><code>io.release.valid = true\nio.release.bits.paddr = 0x1000\u6240\u5728\u7684\u7f13\u5b58\u884c\u5730\u5740\n</code></pre></p> </li> <li> <p>LoadQueueRAR\u6807\u8bb0\u76f8\u5173\u6761\u76ee\u4e3areleased\uff1a    <pre><code>// \u5bf9\u4e8e\u5305\u542b\u6307\u4ee42\u7684\u6761\u76eeidx\nval addrMatch = (paddr(idx) &amp; ~(lineBytesOffset.U)) === (releaseAddr &amp; ~(lineBytesOffset.U))\nwhen (allocated(idx) &amp;&amp; addrMatch) {\n  released(idx) = true\n}\n</code></pre></p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#31","title":"\u7b2c3\u6b65\uff1a\u6307\u4ee41\u540e\u6267\u884c","text":"<ol> <li> <p>\u6307\u4ee41\u5728\u6d41\u6c34\u7ebfs2\u9636\u6bb5\u67e5\u8be2RAR\u4f9d\u8d56\uff1a    <pre><code>io.query(0).req.valid = true\nio.query(0).req.bits.paddr = 0x1000\nio.query(0).req.bits.mask = 0xFF\nio.query(0).req.bits.robIdx = 10\n</code></pre></p> </li> <li> <p>LoadQueueRAR\u68c0\u67e5\u961f\u5217\u4e2d\u7684\u6761\u76ee\uff1a    <pre><code>// \u5bf9\u4e8e\u5305\u542b\u6307\u4ee42\u7684\u6761\u76eeidx\nval validEntry = allocated(idx)  // true\nval addrMatch = (paddr(idx) &amp; ~(7.U)) === (0x1000\u538b\u7f29\u5730\u5740 &amp; ~(7.U))  // true\nval maskOverlap = (0xFF &amp; mask(idx)).orR  // true\n\n// \u5173\u952e\u5224\u65ad\uff1a\u6307\u4ee42(robIdx=20)\u5728\u7a0b\u5e8f\u987a\u5e8f\u4e0a\u665a\u4e8e\u6307\u4ee41(robIdx=10)\nval needFlush = 10.needFlush(20)  // true\uff0c\u8fd9\u91cc\u6307\u7684\u662f\u5982\u679cflush robIdx=10\uff0c\u5219\u9700\u8981\u540c\u65f6flush robIdx=20\nval isReleased = released(idx)  // true\uff0c\u5df2\u88ab\u6807\u8bb0\u4e3areleased\n\n// \u68c0\u6d4b\u7ed3\u679c\nmatchVec(idx) = true\n</code></pre></p> </li> <li> <p>\u68c0\u6d4b\u5230\u8fdd\u4f8b\u5e76\u751f\u6210\u54cd\u5e94\uff1a    <pre><code>io.query(0).resp.bits.conflict = true\nio.query(0).resp.bits.conflictAddr = 0x1000\n</code></pre></p> </li> <li> <p>\u6d41\u6c34\u7ebf\u63a5\u6536\u5230\u54cd\u5e94\uff0c\u9700\u8981\u5c06\u8fdd\u4f8b\u7684\u52a0\u8f7d\u6307\u4ee41\u53ca\u5176\u540e\u7684\u6240\u6709\u6307\u4ee4\u5237\u65b0\uff0c\u786e\u4fdd\u6b63\u786e\u6027\u3002</p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#6","title":"6. \u63a5\u53e3\u65f6\u5e8f","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#61-loadqueuerar","title":"6.1 LoadQueueRAR\u8bf7\u6c42\u5165\u961f\u65f6\u5e8f","text":"<ol> <li>\u5f53<code>io.query(i).req.valid</code>\u548c<code>io.query(i).req.ready</code>\u90fd\u4e3a\u9ad8\u65f6\uff0c\u8868\u793a\u63e1\u624b\u6210\u529f</li> <li>\u5982\u679c<code>needEnqueue</code>\u548c<code>io.canAllocate(i)</code>\u90fd\u4e3a\u9ad8\uff0c\u5219\u5c06<code>io.doAllocate(i)</code>\u7f6e\u4e3a\u9ad8</li> <li><code>io.allocateSlot(i)</code>\u63d0\u4f9b\u63a5\u6536\u5165\u961f\u7684\u6761\u76ee\u7d22\u5f15</li> <li>\u8be5\u6761\u76ee\u5199\u5165\u76f8\u5173\u4fe1\u606f</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#62-load-load","title":"6.2 load-load\u8fdd\u4f8b\u68c0\u67e5\u65f6\u5e8f","text":"<ol> <li>\u7b2c\u4e00\u62cd\uff1a\u67e5\u8be2\u8bf7\u6c42\u63e1\u624b\u6210\u529f\uff0c\u6267\u884c\u6761\u4ef6\u5339\u914d\u751f\u6210<code>matchVec</code>\u63a9\u7801</li> <li>\u7b2c\u4e8c\u62cd\uff1a\u5c06<code>io.query(i).resp.valid</code>\u7f6e\u4e3a\u9ad8\uff0c\u7ed9\u51fa\u54cd\u5e94</li> <li>\u5982\u679c<code>io.query(i).resp.valid</code>\u548c<code>io.query(i).resp.bits.conflict</code>\u90fd\u4e3a\u9ad8\uff0c\u8868\u793a\u53d1\u751fRAR\u8fdd\u4f8b</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#7","title":"7. \u6027\u80fd\u76d1\u63a7\u4e0e\u5206\u6790","text":"<pre><code>// \u961f\u5217\u4f7f\u7528\u60c5\u51b5\u76d1\u63a7\nval validCount = distanceBetween(enqPtrExt, deqPtrExt)\nio.validCount := validCount\n\n// \u961f\u5217\u6ee1\u72b6\u6001\u76d1\u63a7\nval allowEnqueue = validCount &lt;= (RarQueueSize - LoadPipelineWidth).U\nio.lqFull := !allowEnqueue\n\n// \u51b2\u7a81\u548c\u91cd\u653e\u76d1\u63a7\nXSPerfAccumulate(\"rar_conflict\", io.query.map(_.resp.bits.conflict &amp;&amp; _.resp.valid).reduce(_||_))\nXSPerfAccumulate(\"release_events\", io.release.valid)\n\n// \u961f\u5217\u6027\u80fd\u76d1\u63a7\nQueuePerf(RarQueueSize, validCount, !allowEnqueue)\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_rar/#8","title":"8. \u603b\u7ed3\u4e0e\u5e94\u7528","text":"<p>LoadQueueRAR\u6a21\u5757\u5b9e\u73b0\u4e86XiangShan\u5904\u7406\u5668\u4e2d\u591a\u6838\u73af\u5883\u4e0b\u5185\u5b58\u987a\u5e8f\u4e00\u81f4\u6027\u4fdd\u969c\u7684\u5173\u952e\u673a\u5236\uff1a</p> <ol> <li>\u591a\u6838RAR\u8fdd\u4f8b\u68c0\u6d4b\uff1a\u8bc6\u522b\u4e0d\u540c\u6838\u5fc3\u95f4\u4ea4\u4e92\u5bfc\u81f4\u7684\u52a0\u8f7d-\u52a0\u8f7d\u987a\u5e8f\u8fdd\u4f8b</li> <li>\u7f13\u5b58\u4e00\u81f4\u6027\u652f\u6301\uff1a\u5904\u7406\u7f13\u5b58\u4e00\u81f4\u6027\u4e8b\u4ef6\u5bf9\u5df2\u6267\u884c\u52a0\u8f7d\u6307\u4ee4\u7684\u5f71\u54cd</li> <li>\u7cbe\u786e\u6062\u590d\u673a\u5236\uff1a\u5728\u68c0\u6d4b\u5230\u8fdd\u4f8b\u65f6\u63d0\u4f9b\u7cbe\u786e\u7684\u56de\u6eda\u4fe1\u606f</li> <li>\u9ad8\u6548\u5b9e\u73b0\uff1a\u901a\u8fc7\u538b\u7f29\u5730\u5740\u548c\u4f18\u5316\u7684\u68c0\u6d4b\u7b97\u6cd5\u5b9e\u73b0\u9ad8\u6027\u80fd</li> </ol> <p>\u5728\u73b0\u4ee3\u591a\u6838\u5904\u7406\u5668\u4e2d\uff0cLoadQueueRAR\u662f\u786e\u4fdd\u5185\u5b58\u4e00\u81f4\u6027\u7684\u5173\u952e\u7ec4\u4ef6\uff0c\u5b83\u4e0eLoadQueueRAW\u5171\u540c\u6784\u6210\u4e86\u5b8c\u6574\u7684\u5185\u5b58\u4f9d\u8d56\u68c0\u6d4b\u7cfb\u7edf\uff0c\u5728\u4fdd\u8bc1\u7a0b\u5e8f\u6b63\u786e\u6027\u7684\u540c\u65f6\u5c3d\u53ef\u80fd\u63d0\u4f9b\u9ad8\u6027\u80fd\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/","title":"LoadQueueRAW","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#1","title":"1. \u6a21\u5757\u6982\u8ff0","text":"<p><code>LoadQueueRAW.scala</code> \u5b9e\u73b0\u4e86XiangShan\u5904\u7406\u5668\u4e2d\u7684\u5199\u540e\u8bfb(RAW: Read-After-Write)\u4f9d\u8d56\u68c0\u6d4b\u673a\u5236\uff0c\u8fd9\u662f\u786e\u4fdd\u4e71\u5e8f\u5904\u7406\u5668\u4e2d\u5185\u5b58\u64cd\u4f5c\u6b63\u786e\u6027\u7684\u5173\u952e\u7ec4\u4ef6\u3002\u8be5\u6a21\u5757\u8d1f\u8d23\u68c0\u6d4b\u52a0\u8f7d\u6307\u4ee4\u53ef\u80fd\u8fdd\u53cd\u7684\u5b58\u50a8-\u52a0\u8f7d\u6570\u636e\u4f9d\u8d56\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u89e6\u53d1\u6d41\u6c34\u7ebf\u56de\u6eda\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#11","title":"1.1 \u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u68c0\u6d4b\u52a0\u8f7d\u6307\u4ee4\u4e0e\u65e9\u5148\u5b58\u50a8\u6307\u4ee4\u4e4b\u95f4\u7684\u6570\u636e\u4f9d\u8d56</li> <li>\u9ad8\u6548\u8bc6\u522b\u5730\u5740\u91cd\u53e0\u7684\u5b58\u50a8-\u52a0\u8f7d\u64cd\u4f5c</li> <li>\u751f\u6210\u7cbe\u786e\u7684\u8fdd\u4f8b\u4fe1\u53f7\u548c\u56de\u6eda\u8bf7\u6c42</li> <li>\u652f\u6301\u63a8\u6d4b\u6267\u884c\u548c\u539f\u5b50\u6027\u4fdd\u8bc1</li> <li>\u5904\u7406\u5185\u5b58\u4e00\u81f4\u6027\u6a21\u578b\u8981\u6c42\u7684\u987a\u5e8f\u7ea6\u675f</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#12","title":"1.2 \u6a21\u5757\u5b9a\u4e49","text":"<pre><code>class LoadQueueRAW(implicit p: Parameters) extends XSModule\n  with HasDCacheParameters\n  with HasCircularQueuePtrHelper\n  with HasPerfEvents {\n  // \u6a21\u5757\u5b9e\u73b0\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#2","title":"2. \u6570\u636e\u7ed3\u6784\u4e0e\u63a5\u53e3","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#21-io","title":"2.1 IO \u63a5\u53e3","text":"<pre><code>val io = IO(new Bundle() {\n  // \u63a7\u5236\u63a5\u53e3\n  val redirect = Flipped(Valid(new Redirect))\n\n  // \u5b58\u50a8\u6307\u4ee4\u63a5\u53e3\n  val storeIn = Vec(StorePipelineWidth, Flipped(Valid(new LsPipelineBundle)))\n  val stAddrReadySqPtr = Input(new SqPtr)\n  val stIssuePtr = Input(new SqPtr)\n\n  // \u67e5\u8be2\u63a5\u53e3\n  val query = Vec(LoadPipelineWidth, new LoadToStoreQueryIO)\n\n  // \u56de\u6eda\u63a5\u53e3\n  val rollback = Vec(StorePipelineWidth, Output(Valid(new Redirect)))\n\n  // ROB\u63a5\u53e3\n  val rob = Flipped(new RobLsqIO)\n\n  // \u72b6\u6001\u63a5\u53e3\n  val lqFull = Output(Bool())\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#22","title":"2.2 \u5185\u90e8\u6570\u636e\u7ed3\u6784","text":"<pre><code>// \u5df2\u6267\u884c\u7684\u52a0\u8f7d\u6307\u4ee4\u8bb0\u5f55\nval uop = Reg(Vec(RawQueueSize, new MicroOp))\nval mask = Reg(Vec(RawQueueSize, UInt(8.W)))\nval paddr = Reg(Vec(RawQueueSize, UInt(PAddrBits.W)))\nval allocated = RegInit(VecInit(List.fill(RawQueueSize)(false.B)))\nval addrvalid = RegInit(VecInit(List.fill(RawQueueSize)(false.B)))\nval datavalid = RegInit(VecInit(List.fill(RawQueueSize)(false.B)))\n\n// \u961f\u5217\u6307\u9488\u7ba1\u7406\nval enqPtrExt = RegInit(0.U.asTypeOf(new RawQueuePtr))\nval deqPtrExt = RegInit(0.U.asTypeOf(new RawQueuePtr))\nval enqPtr = enqPtrExt.value\nval deqPtr = deqPtrExt.value\n</code></pre> <p>\u5176\u4e2d\uff0c<code>RawQueuePtr</code>\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5faa\u73af\u961f\u5217\u6307\u9488\u7c7b\u578b\uff0c\u7528\u4e8e\u5904\u7406\u961f\u5217\u7684\u73af\u7ed5\u903b\u8f91\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#3","title":"3. \u4f9d\u8d56\u68c0\u6d4b\u7b97\u6cd5","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#31","title":"3.1 \u52a0\u8f7d\u6307\u4ee4\u67e5\u8be2","text":"<p>\u52a0\u8f7d\u6307\u4ee4\u5728\u6267\u884c\u9636\u6bb5\u9700\u8981\u67e5\u8be2\u662f\u5426\u5b58\u5728\u4e0e\u4e4b\u4f9d\u8d56\u7684\u5b58\u50a8\u6307\u4ee4\uff1a</p> <pre><code>def addrMatch(addr1: UInt, addr2: UInt, mask1: UInt, mask2: UInt): Bool = {\n  val overlap = (mask1 &amp; mask2).orR\n  val matchAddr = (addr1 &amp; ~0x7.U) === (addr2 &amp; ~0x7.U)\n  overlap &amp;&amp; matchAddr\n}\n\n// \u5904\u7406\u67e5\u8be2\u8bf7\u6c42\nfor (i &lt;- 0 until LoadPipelineWidth) {\n  val req = io.query(i).req\n  val resp = io.query(i).resp\n\n  when (req.valid) {\n    // \u83b7\u53d6\u67e5\u8be2\u4fe1\u606f\n    val queryAddr = req.bits.addr\n    val queryMask = req.bits.mask\n    val queryRobIdx = req.bits.robIdx\n\n    // \u68c0\u67e5\u4e0e\u6240\u6709\u5df2\u5730\u5740\u5c31\u7eea\u4f46\u6570\u636e\u672a\u5c31\u7eea\u7684\u5b58\u50a8\u4e4b\u95f4\u7684\u4f9d\u8d56\n    val matchVec = VecInit((0 until StoreQueueSize).map(j =&gt; {\n      val stReady = stAddrReadyVec(j) &amp;&amp; !stDataReadyVec(j)\n      val match = addrMatch(queryAddr, stAddr(j), queryMask, stMask(j))\n      stReady &amp;&amp; match\n    }))\n\n    // \u5224\u65ad\u662f\u5426\u6709\u4f9d\u8d56\u51b2\u7a81\n    resp.bits.conflict := matchVec.asUInt.orR\n    resp.bits.conflictAddr := PriorityMux(matchVec, stAddr)\n    resp.valid := req.valid\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#32","title":"3.2 \u5b58\u50a8\u6307\u4ee4\u5730\u5740\u5c31\u7eea","text":"<p>\u5f53\u5b58\u50a8\u6307\u4ee4\u5730\u5740\u5c31\u7eea\u65f6\uff0c\u9700\u8981\u68c0\u67e5\u5df2\u7ecf\u6267\u884c\u8fc7\u7684\u52a0\u8f7d\u6307\u4ee4\u662f\u5426\u53ef\u80fd\u8fdd\u53cd\u4e86\u5185\u5b58\u4f9d\u8d56\uff1a</p> <pre><code>for (i &lt;- 0 until StorePipelineWidth) {\n  val stIn = io.storeIn(i)\n\n  when (stIn.valid &amp;&amp; !io.redirect.valid) {\n    // \u83b7\u53d6\u5b58\u50a8\u4fe1\u606f\n    val stAddr = stIn.bits.vaddr\n    val stMask = stIn.bits.mask\n    val stRobIdx = stIn.bits.uop.robIdx\n\n    // \u68c0\u67e5\u6240\u6709\u5df2\u6267\u884c\u7684\u52a0\u8f7d\u6307\u4ee4\n    val violationVec = VecInit((0 until RawQueueSize).map(j =&gt; {\n      val ldValid = allocated(j) &amp;&amp; addrvalid(j)\n      val ldRobIdx = uop(j).robIdx\n\n      // \u5224\u65ad\u987a\u5e8f: \u52a0\u8f7d\u5728\u8be5\u5b58\u50a8\u4e4b\u540e\u53d1\u5c04\u4f46\u5df2\u7ecf\u6267\u884c\n      val ordering = ldRobIdx.needBrFlush(stRobIdx)\n\n      // \u5224\u65ad\u5730\u5740\u91cd\u53e0\n      val match = addrMatch(paddr(j), stAddr, mask(j), stMask)\n\n      ldValid &amp;&amp; ordering &amp;&amp; match\n    }))\n\n    // \u627e\u5230\u6700\u65e9\u7684\u8fdd\u4f8b\u52a0\u8f7d\n    val violationIdx = PriorityEncoder(violationVec)\n    val hasViolation = violationVec.asUInt.orR\n\n    // \u751f\u6210\u56de\u6eda\u8bf7\u6c42\n    when (hasViolation) {\n      io.rollback(i).valid := true.B\n      io.rollback(i).bits.robIdx := uop(violationIdx).robIdx\n      io.rollback(i).bits.ftqIdx := uop(violationIdx).cf.ftqPtr\n      io.rollback(i).bits.ftqOffset := uop(violationIdx).cf.ftqOffset\n      io.rollback(i).bits.level := RedirectLevel.flush\n      io.rollback(i).bits.memPredUpdate := false.B\n    }\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#4","title":"4. \u961f\u5217\u7ba1\u7406\u673a\u5236","text":"<p>LoadQueueRAW\u7684\u961f\u5217\u7ba1\u7406\u5305\u62ec\u5165\u961f\u64cd\u4f5c\u548c\u591a\u79cd\u6e05\u7406\u673a\u5236\uff0c\u786e\u4fdd\u961f\u5217\u8d44\u6e90\u7684\u9ad8\u6548\u5229\u7528\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#41","title":"4.1 \u5165\u961f\u64cd\u4f5c","text":"<p>\u5f53\u52a0\u8f7d\u6307\u4ee4\u6267\u884c\u65f6\uff0c\u5176\u4fe1\u606f\u88ab\u8bb0\u5f55\u5230LoadQueueRAW\u4e2d\uff1a</p> <pre><code>// \u8bb0\u5f55\u52a0\u8f7d\u6307\u4ee4\u4fe1\u606f\nfor (i &lt;- 0 until LoadPipelineWidth) {\n  val ld = io.query(i)\n\n  when (ld.req.valid &amp;&amp; ld.req.bits.isFirstIssue &amp;&amp; !ld.resp.bits.conflict) {\n    val idx = enqPtr + PopCount(ld.req.bits.isFirstIssue.take(i))\n\n    // \u8bb0\u5f55\u52a0\u8f7d\u4fe1\u606f\n    uop(idx) := ld.req.bits.uop\n    paddr(idx) := ld.req.bits.addr\n    mask(idx) := ld.req.bits.mask\n    allocated(idx) := true.B\n    addrvalid(idx) := true.B\n\n    // \u66f4\u65b0\u6307\u9488\n    enqPtrExt := enqPtrExt + PopCount(ld.req.bits.isFirstIssue)\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#42","title":"4.2 \u6761\u76ee\u6e05\u7406\u673a\u5236","text":"<p>LoadQueueRAW\u4e2d\u7684\u6761\u76ee\u6e05\u7406\u6709\u4e09\u79cd\u4e3b\u8981\u9014\u5f84\uff1a</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#421","title":"4.2.1 \u6b63\u5e38\u63d0\u4ea4\u6e05\u7406","text":"<p>\u5bf9\u4e8e\u6ca1\u6709\u51b2\u7a81\u7684\u52a0\u8f7d\u6307\u4ee4\uff0c\u5b83\u4eec\u5728ROB\u4e2d\u6b63\u5e38\u63d0\u4ea4\u65f6\u88ab\u6e05\u7406\uff1a</p> <pre><code>// \u8bc6\u522b\u5df2\u63d0\u4ea4\u7684\u52a0\u8f7d\u6307\u4ee4\nval commitMask = WireInit(0.U(RawQueueSize.W))\n\n// \u904d\u5386\u6240\u6709ROB\u63d0\u4ea4\u7684\u6307\u4ee4\nfor (i &lt;- 0 until CommitWidth) {\n  when (io.rob.commits(i).valid &amp;&amp; io.rob.commits(i).bits.isLoad) {\n    val robIdx = io.rob.commits(i).bits.uop.robIdx\n\n    // \u5728\u961f\u5217\u4e2d\u67e5\u627e\u5339\u914d\u7684\u6761\u76ee\n    for (j &lt;- 0 until RawQueueSize) {\n      when (allocated(j) &amp;&amp; uop(j).robIdx === robIdx) {\n        commitMask(j) := true.B\n      }\n    }\n  }\n}\n\n// \u6e05\u7406\u5df2\u63d0\u4ea4\u7684\u6761\u76ee\nfor (i &lt;- 0 until RawQueueSize) {\n  when (commitMask(i)) {\n    allocated(i) := false.B\n    addrvalid(i) := false.B\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#422","title":"4.2.2 \u91cd\u5b9a\u5411\u6e05\u7406","text":"<p>\u5f53\u5904\u7406\u5668\u53d1\u751f\u91cd\u5b9a\u5411\u65f6\uff08\u5982\u5206\u652f\u9884\u6d4b\u9519\u8bef\uff09\uff0c\u9700\u8981\u6e05\u7406\u9519\u8bef\u8def\u5f84\u4e0a\u7684\u6307\u4ee4\uff1a</p> <pre><code>// \u5904\u7406\u91cd\u5b9a\u5411\nval cancelMask = WireInit(0.U(RawQueueSize.W))\nwhen (io.redirect.valid) {\n  // \u6807\u8bb0\u9700\u8981\u53d6\u6d88\u7684\u6761\u76ee\n  for (i &lt;- 0 until RawQueueSize) {\n    when (allocated(i) &amp;&amp; uop(i).robIdx.needFlush(io.redirect.bits)) {\n      cancelMask(i) := true.B\n    }\n  }\n\n  // \u6062\u590d\u5165\u961f\u6307\u9488\n  val cancelCnt = PopCount(cancelMask)\n  enqPtrExt := enqPtrExt - cancelCnt\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#423","title":"4.2.3 \u8fdd\u4f8b\u56de\u6eda\u6e05\u7406","text":"<p>\u5f53\u68c0\u6d4b\u5230\u8fdd\u4f8b\u5e76\u89e6\u53d1\u56de\u6eda\u65f6\uff0c\u76f8\u5173\u6761\u76ee\u4f1a\u5728\u4e0b\u4e00\u4e2a\u91cd\u5b9a\u5411\u5468\u671f\u88ab\u6e05\u7406\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#43","title":"4.3 \u51fa\u961f\u6307\u9488\u66f4\u65b0","text":"<p>\u57fa\u4e8e\u63d0\u4ea4\u548c\u53d6\u6d88\u7684\u6e05\u7406\u64cd\u4f5c\uff0c\u66f4\u65b0\u51fa\u961f\u6307\u9488\uff1a</p> <pre><code>// \u5408\u5e76\u63d0\u4ea4\u548c\u53d6\u6d88\u63a9\u7801\nval clearMask = commitMask | cancelMask\n\n// \u8ba1\u7b97\u6e05\u7406\u6570\u91cf\u5e76\u66f4\u65b0\u51fa\u961f\u6307\u9488\nval deqNum = PopCount(clearMask)\ndeqPtrExt := deqPtrExt + deqNum\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#44","title":"4.4 \u6e05\u7406\u4f18\u5316\u673a\u5236","text":"<p>LoadQueueRAW\u5b9e\u73b0\u4e86\u591a\u79cd\u4f18\u5316\u673a\u5236\u6765\u63d0\u9ad8\u6e05\u7406\u6548\u7387\uff1a</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#441","title":"4.4.1 \u6279\u91cf\u5904\u7406","text":"<p>\u652f\u6301\u6bcf\u5468\u671f\u6279\u91cf\u5904\u7406\u591a\u4e2a\u63d0\u4ea4\u6307\u4ee4\uff1a</p> <pre><code>// \u652f\u6301\u591a\u5bbd\u5ea6\u63d0\u4ea4\nval commitMask = WireInit(0.U(RawQueueSize.W))\nfor (i &lt;- 0 until CommitWidth) {\n  // \u5904\u7406\u6bcf\u4e2a\u63d0\u4ea4\u901a\u9053\n}\n\n// \u4e00\u6b21\u6027\u6e05\u7406\u6240\u6709\u5339\u914d\u6761\u76ee\nval commitNum = PopCount(commitMask)\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#442","title":"4.4.2 \u5b89\u5168\u6e05\u7406\u63a7\u5236","text":"<p>\u786e\u4fdd\u4e0d\u4f1a\u8fc7\u65e9\u6e05\u7406\u53ef\u80fd\u4ecd\u9700\u8981\u7684\u6761\u76ee\uff1a</p> <pre><code>// \u786e\u4fdd\u6307\u4ee4\u5df2\u7ecf\u7ed3\u675f\u4f7f\u7528\u624d\u6e05\u7406\nval safeToCommit = WireInit(VecInit(Seq.fill(RawQueueSize)(false.B)))\n\nfor (i &lt;- 0 until RawQueueSize) {\n  // \u53ea\u6709\u5f53\u6307\u4ee4\u5b8c\u5168\u5b8c\u6210\u6240\u6709\u68c0\u67e5\u540e\u624d\u6807\u8bb0\u5b89\u5168\u63d0\u4ea4\n  safeToCommit(i) := allocated(i) &amp;&amp; datavalid(i)\n}\n\n// \u4fee\u6539\u63d0\u4ea4\u903b\u8f91\uff0c\u786e\u4fdd\u5b89\u5168\nfor (i &lt;- 0 until RawQueueSize) {\n  when (commitMask(i) &amp;&amp; safeToCommit(i)) {\n    allocated(i) := false.B\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#5","title":"5. \u5177\u4f53\u793a\u4f8b\uff1a\u6807\u91cf\u52a0\u8f7d\u4e0e\u5b58\u50a8\u7684\u4f9d\u8d56\u5904\u7406","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#51","title":"5.1 \u8fdd\u4f8b\u68c0\u6d4b\u793a\u4f8b","text":"<p>\u5047\u8bbe\u5904\u7406\u5668\u4e2d\u6709\u4ee5\u4e0b\u6307\u4ee4\u5e8f\u5217\uff1a 1. <code>ST [0x1000], x1</code> (ROB\u7d22\u5f15: 42) 2. <code>LD x2, [0x1000]</code> (ROB\u7d22\u5f15: 43)</p> <p>\u4f46\u7531\u4e8e\u4e71\u5e8f\u6267\u884c\uff0c\u5047\u8bbe\u52a0\u8f7d\u6307\u4ee4\u5728\u5b58\u50a8\u6307\u4ee4\u8ba1\u7b97\u5730\u5740\u4e4b\u524d\u5c31\u5df2\u7ecf\u6267\u884c\u5b8c\u6210\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#1_1","title":"\u7b2c1\u6b65\uff1a\u52a0\u8f7d\u6307\u4ee4\u6267\u884c","text":"<ol> <li> <p>\u52a0\u8f7d\u6307\u4ee4\u5728\u6267\u884c\u9636\u6bb5\u53d1\u9001\u67e5\u8be2\u8bf7\u6c42\uff1a    <pre><code>io.query(0).req.valid = true\nio.query(0).req.bits.addr = 0x1000\nio.query(0).req.bits.mask = 0xFF\nio.query(0).req.bits.uop.robIdx = 43\n</code></pre></p> </li> <li> <p>\u6b64\u65f6\u5b58\u50a8\u6307\u4ee4\u7684\u5730\u5740\u5c1a\u672a\u5c31\u7eea\uff0c\u56e0\u6b64\u6ca1\u6709\u68c0\u6d4b\u5230\u51b2\u7a81\uff1a    <pre><code>io.query(0).resp.bits.conflict = false\n</code></pre></p> </li> <li> <p>\u52a0\u8f7d\u6307\u4ee4\u88ab\u8bb0\u5f55\u5230\u961f\u5217\u4e2d\uff1a    <pre><code>uop(enqPtr) = \u52a0\u8f7d\u6307\u4ee4uop(robIdx=43)\npaddr(enqPtr) = 0x1000\nmask(enqPtr) = 0xFF\nallocated(enqPtr) = true\naddrvalid(enqPtr) = true\n</code></pre></p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#2_1","title":"\u7b2c2\u6b65\uff1a\u5b58\u50a8\u6307\u4ee4\u5730\u5740\u751f\u6210","text":"<p>\u7a0d\u540e\uff0c\u5b58\u50a8\u6307\u4ee4\u5b8c\u6210\u5730\u5740\u8ba1\u7b97\uff1a</p> <ol> <li> <p>\u5b58\u50a8\u5730\u5740\u4fe1\u606f\u53d1\u9001\u5230LoadQueueRAW\uff1a    <pre><code>io.storeIn(0).valid = true\nio.storeIn(0).bits.vaddr = 0x1000\nio.storeIn(0).bits.mask = 0xFF\nio.storeIn(0).bits.uop.robIdx = 42\n</code></pre></p> </li> <li> <p>\u68c0\u67e5\u662f\u5426\u6709\u52a0\u8f7d\u6307\u4ee4\u8fdd\u53cd\u4e86\u4e0e\u8be5\u5b58\u50a8\u7684\u4f9d\u8d56\uff1a    <pre><code>// \u5bf9\u4e8e\u961f\u5217\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\nval ldValid = allocated(j) &amp;&amp; addrvalid(j)  // \u6761\u76ee\u6709\u6548\nval ldRobIdx = uop(j).robIdx  // \u52a0\u8f7d\u7684ROB\u7d22\u5f15=43\nval stRobIdx = 42  // \u5b58\u50a8\u7684ROB\u7d22\u5f15\n\n// \u5224\u65ad\u987a\u5e8f: 43\u9700\u8981\u572842\u4e4b\u540e\u6267\u884c\uff0c\u4f46\u5df2\u7ecf\u6267\u884c\u4e86\nval ordering = ldRobIdx.needBrFlush(stRobIdx)  // \u8fd4\u56detrue\n\n// \u5730\u5740\u5339\u914d: 0x1000\u548c0x1000, \u63a9\u7801\u90fd\u662f0xFF\nval match = addrMatch(0x1000, 0x1000, 0xFF, 0xFF)  // \u8fd4\u56detrue\n\n// \u8fdd\u4f8b\u68c0\u6d4b\u7ed3\u679c\nviolationVec(j) = ldValid &amp;&amp; ordering &amp;&amp; match  // \u8fd4\u56detrue\n</code></pre></p> </li> <li> <p>\u53d1\u73b0\u8fdd\u4f8b\u5e76\u751f\u6210\u56de\u6eda\u8bf7\u6c42\uff1a    <pre><code>io.rollback(0).valid = true\nio.rollback(0).bits.robIdx = 43  // \u8fdd\u4f8b\u52a0\u8f7d\u7684ROB\u7d22\u5f15\nio.rollback(0).bits.level = RedirectLevel.flush\n</code></pre></p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#52","title":"5.2 \u65e0\u51b2\u7a81\u52a0\u8f7d\u7684\u6e05\u7406\u793a\u4f8b","text":"<p>\u5047\u8bbe\u6709\u4e00\u4e2a\u52a0\u8f7d\u6307\u4ee4\uff1a<code>LD x2, [0x2000]</code> (ROB\u7d22\u5f15: 50)\uff0c\u5b83\u4e0e\u524d\u9762\u7684\u5b58\u50a8\u6307\u4ee4\u6ca1\u6709\u5730\u5740\u91cd\u53e0\uff0c\u56e0\u6b64\u4e0d\u5b58\u5728RAW\u51b2\u7a81\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#1_2","title":"\u7b2c1\u6b65\uff1a\u52a0\u8f7d\u6307\u4ee4\u6267\u884c\u548c\u8bb0\u5f55","text":"<ol> <li> <p>\u52a0\u8f7d\u6307\u4ee4\u6267\u884c\u5e76\u67e5\u8be2\u6f5c\u5728\u51b2\u7a81\uff1a    <pre><code>io.query(0).req.valid = true\nio.query(0).req.bits.addr = 0x2000\nio.query(0).req.bits.mask = 0xFF\nio.query(0).req.bits.uop.robIdx = 50\n</code></pre></p> </li> <li> <p>\u67e5\u8be2\u7ed3\u679c\u8868\u660e\u6ca1\u6709\u51b2\u7a81\uff1a    <pre><code>io.query(0).resp.bits.conflict = false\n</code></pre></p> </li> <li> <p>\u52a0\u8f7d\u6307\u4ee4\u88ab\u8bb0\u5f55\u5230\u961f\u5217\u4e2d\uff1a    <pre><code>uop(enqPtr) = \u52a0\u8f7d\u6307\u4ee4uop(robIdx=50)\npaddr(enqPtr) = 0x2000\nmask(enqPtr) = 0xFF\nallocated(enqPtr) = true\naddrvalid(enqPtr) = true\n</code></pre></p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#2_2","title":"\u7b2c2\u6b65\uff1a\u6307\u4ee4\u6b63\u5e38\u63d0\u4ea4","text":"<p>\u52a0\u8f7d\u6307\u4ee4\u6700\u7ec8\u5728ROB\u4e2d\u6b63\u5e38\u63d0\u4ea4\uff1a</p> <ol> <li> <p>ROB\u53d1\u9001\u63d0\u4ea4\u4fe1\u53f7\uff1a    <pre><code>io.rob.commits(0).valid = true\nio.rob.commits(0).bits.isLoad = true\nio.rob.commits(0).bits.uop.robIdx = 50\n</code></pre></p> </li> <li> <p>LoadQueueRAW\u8bc6\u522b\u5339\u914d\u7684\u6761\u76ee\uff1a    <pre><code>// \u904d\u5386\u961f\u5217\u5bfb\u627e\u5339\u914d\u6761\u76ee\nfor (j &lt;- 0 until RawQueueSize) {\n  when (allocated(j) &amp;&amp; uop(j).robIdx === 50) {\n    commitMask(j) := true.B\n  }\n}\n</code></pre></p> </li> <li> <p>\u6e05\u7406\u5df2\u63d0\u4ea4\u7684\u6761\u76ee\uff1a    <pre><code>// \u5047\u8bbe\u5339\u914d\u5230\u7d22\u5f15\u4e3ak\u7684\u6761\u76ee\nwhen (commitMask(k)) {\n  allocated(k) := false.B\n  addrvalid(k) := false.B\n}\n</code></pre></p> </li> <li> <p>\u66f4\u65b0\u51fa\u961f\u6307\u9488\uff1a    <pre><code>deqPtrExt := deqPtrExt + 1\n</code></pre></p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#6","title":"6. \u4f18\u5316\u673a\u5236","text":"<p>LoadQueueRAW\u5b9e\u73b0\u4e86\u591a\u79cd\u4f18\u5316\u673a\u5236\u6765\u63d0\u9ad8\u6027\u80fd\u548c\u51c6\u786e\u5ea6\uff1a</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#61","title":"6.1 \u591a\u8def\u5e76\u884c\u67e5\u8be2","text":"<pre><code>// \u652f\u6301\u591a\u4e2a\u52a0\u8f7d\u5355\u5143\u5e76\u884c\u67e5\u8be2\nfor (i &lt;- 0 until LoadPipelineWidth) {\n  // \u67e5\u8be2\u5904\u7406\u903b\u8f91\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#62","title":"6.2 \u7cbe\u786e\u51b2\u7a81\u5730\u5740\u8bc6\u522b","text":"<pre><code>// \u4e0d\u4ec5\u8fd4\u56de\u51b2\u7a81\u72b6\u6001\uff0c\u8fd8\u8fd4\u56de\u5177\u4f53\u7684\u51b2\u7a81\u5730\u5740\nresp.bits.conflictAddr := PriorityMux(matchVec, stAddr)\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#63","title":"6.3 \u4f18\u5148\u7ea7\u7f16\u7801\u9009\u62e9","text":"<pre><code>// \u5bf9\u4e8e\u591a\u4e2a\u8fdd\u4f8b\uff0c\u9009\u62e9\u6700\u65e9\u7684\u4e00\u4e2a\u8fdb\u884c\u56de\u6eda\nval violationIdx = PriorityEncoder(violationVec)\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#64","title":"6.4 \u961f\u5217\u538b\u7f29","text":"<pre><code>// \u901a\u8fc7\u63d0\u4ea4\u548c\u53d6\u6d88\u4f18\u5316\u961f\u5217\u5229\u7528\u7387\nval deqNum = PopCount(commitMask | cancelMask)\ndeqPtrExt := deqPtrExt + deqNum\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#7","title":"7. \u6027\u80fd\u76d1\u63a7\u4e0e\u5206\u6790","text":"<p>LoadQueueRAW\u5305\u542b\u4e30\u5bcc\u7684\u6027\u80fd\u76d1\u63a7\u673a\u5236\uff1a</p> <pre><code>// \u51b2\u7a81\u548c\u56de\u6eda\u76d1\u63a7\nXSPerfAccumulate(\"raw_conflict\", io.query.map(_.resp.bits.conflict &amp;&amp; _.resp.valid).reduce(_||_))\nXSPerfAccumulate(\"rollback\", io.rollback.map(_.valid).reduce(_||_))\n\n// \u6e05\u7406\u76f8\u5173\u8ba1\u6570\nXSPerfAccumulate(\"commit_clear\", PopCount(commitMask))\nXSPerfAccumulate(\"redirect_clear\", PopCount(cancelMask))\nXSPerfAccumulate(\"total_clear\", PopCount(clearMask))\n\n// \u961f\u5217\u5229\u7528\u7387\u76d1\u63a7\nval validCount = distanceBetween(enqPtrExt, deqPtrExt)\nQueuePerf(RawQueueSize, validCount, !allowEnqueue)\nio.lqFull := !allowEnqueue\n\n// \u6761\u76ee\u5bff\u547d\u76d1\u63a7\nval oldestAge = RegInit(VecInit(Seq.fill(RawQueueSize)(0.U(8.W))))\nfor (i &lt;- 0 until RawQueueSize) {\n  when (allocated(i)) {\n    oldestAge(i) := oldestAge(i) + 1.U\n  } .otherwise {\n    oldestAge(i) := 0.U\n  }\n}\nXSPerfAccumulate(\"max_age\", Mux(validCount &gt; 0.U, \n                               oldestAge.fold(0.U)((a, b) =&gt; Mux(a &gt; b, a, b)), \n                               0.U))\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#8","title":"8. \u5b9e\u73b0\u6311\u6218\u4e0e\u89e3\u51b3\u65b9\u6848","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#81","title":"8.1 \u8de8\u65f6\u5e8f\u4f9d\u8d56\u68c0\u6d4b","text":"<p>\u6311\u6218\uff1a\u4e71\u5e8f\u6267\u884c\u4f7f\u5f97\u52a0\u8f7d\u6307\u4ee4\u53ef\u80fd\u5728\u5176\u4f9d\u8d56\u7684\u5b58\u50a8\u5730\u5740\u5c31\u7eea\u524d\u5c31\u6267\u884c\u3002</p> <p>\u89e3\u51b3\u65b9\u6848\uff1a 1. \u8bb0\u5f55\u6240\u6709\u5df2\u6267\u884c\u7684\u52a0\u8f7d\u6307\u4ee4\u4fe1\u606f 2. \u5f53\u5b58\u50a8\u5730\u5740\u5c31\u7eea\u65f6\u56de\u6eaf\u68c0\u67e5\u53ef\u80fd\u7684\u8fdd\u4f8b 3. \u4e00\u65e6\u53d1\u73b0\u8fdd\u4f8b\u7acb\u5373\u89e6\u53d1\u56de\u6eda 4. \u901a\u8fc7\u8bb0\u5f55ROB\u7d22\u5f15\u786e\u4fdd\u6b63\u786e\u7684\u987a\u5e8f\u5224\u65ad</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#82","title":"8.2 \u6570\u636e\u7ed3\u6784\u9ad8\u6548\u6027","text":"<p>\u6311\u6218\uff1a\u9700\u8981\u9ad8\u6548\u5b58\u50a8\u548c\u67e5\u8be2\u5927\u91cf\u52a0\u8f7d\u6307\u4ee4\u4fe1\u606f\u3002</p> <p>\u89e3\u51b3\u65b9\u6848\uff1a 1. \u4f7f\u7528\u9002\u5f53\u5927\u5c0f\u7684\u5faa\u73af\u961f\u5217\u6570\u636e\u7ed3\u6784 2. \u901a\u8fc7\u6807\u5fd7\u4f4d\u5feb\u901f\u8bc6\u522b\u6709\u6548\u6761\u76ee 3. \u5229\u7528\u4f18\u5148\u7ea7\u7f16\u7801\u5668\u5feb\u901f\u5b9a\u4f4d\u8fdd\u4f8b\u6761\u76ee 4. \u5e76\u884c\u5904\u7406\u591a\u4e2a\u67e5\u8be2\u548c\u5b58\u50a8\u6761\u76ee</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#83","title":"8.3 \u7cbe\u786e\u6062\u590d\u4e0e\u6027\u80fd\u5e73\u8861","text":"<p>\u6311\u6218\uff1a\u8fdd\u4f8b\u68c0\u6d4b\u9700\u8981\u5e73\u8861\u53ca\u65f6\u6027\u548c\u8bef\u62a5\u7387\u3002</p> <p>\u89e3\u51b3\u65b9\u6848\uff1a 1. \u786e\u4fdd\u5730\u5740\u6bd4\u8f83\u7684\u7cbe\u786e\u6027\uff0c\u51cf\u5c11\u8bef\u62a5 2. \u5bf9\u4e8e\u5730\u5740\u90e8\u5206\u91cd\u53e0\u7684\u8bbf\u95ee\u8fdb\u884c\u7cbe\u786e\u7684\u63a9\u7801\u6bd4\u8f83 3. \u4f18\u5148\u5904\u7406\u6700\u65e9\u7684\u8fdd\u4f8b\uff0c\u51cf\u5c11\u7ea7\u8054\u56de\u6eda 4. \u5728\u5408\u9002\u7684\u6d41\u6c34\u7ebf\u9636\u6bb5\u6267\u884c\u68c0\u67e5\u4ee5\u51cf\u5c11\u5ef6\u8fdf</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_raw/#9","title":"9. \u603b\u7ed3\uff1a\u5b8c\u6574\u7684\u6761\u76ee\u751f\u547d\u5468\u671f","text":"<p>\u4e00\u4e2a\u52a0\u8f7d\u6307\u4ee4\u5728LoadQueueRAW\u4e2d\u5b8c\u6574\u7684\u751f\u547d\u5468\u671f\u5305\u62ec\uff1a</p> <ol> <li>\u5165\u961f\uff1a\u6267\u884c\u9636\u6bb5\u8bb0\u5f55\u5230\u961f\u5217\u4e2d</li> <li>\u51b2\u7a81\u68c0\u67e5\uff1a\u4f5c\u4e3a\u88ab\u67e5\u8be2\u5bf9\u8c61\u53c2\u4e0e\u540e\u7eed\u5b58\u50a8\u6307\u4ee4\u7684\u8fdd\u4f8b\u68c0\u6d4b</li> <li>\u6e05\u7406\uff1a\u901a\u8fc7\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\u4e4b\u4e00\u88ab\u6e05\u7406<ul> <li>\u6b63\u5e38\u63d0\u4ea4\uff1a\u6307\u4ee4\u5728ROB\u4e2d\u63d0\u4ea4\u65f6</li> <li>\u91cd\u5b9a\u5411\uff1a\u53d1\u751f\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7b49\u91cd\u5b9a\u5411\u4e8b\u4ef6\u65f6</li> <li>\u8fdd\u4f8b\u56de\u6eda\uff1a\u7531\u4e8e\u8be5\u52a0\u8f7d\u81ea\u8eab\u8fdd\u4f8b\u800c\u88ab\u56de\u6eda\u65f6</li> </ul> </li> </ol> <p>\u5373\u4f7f\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u51b2\u7a81\uff0c\u52a0\u8f7d\u6307\u4ee4\u5728\u6b63\u5e38\u6267\u884c\u5b8c\u6bd5\u5e76\u63d0\u4ea4\u540e\uff0c\u4e5f\u4f1a\u901a\u8fc7\u76d1\u542cROB\u63d0\u4ea4\u4fe1\u53f7\uff0c\u88ab\u4eceLoadQueueRAW\u961f\u5217\u4e2d\u6b63\u5e38\u6e05\u9664\uff0c\u786e\u4fdd\u961f\u5217\u8d44\u6e90\u53ef\u4ee5\u88ab\u65b0\u7684\u52a0\u8f7d\u6307\u4ee4\u4f7f\u7528\u3002</p> <p>\u8fd9\u79cd\u591a\u8def\u5f84\u7684\u6e05\u7406\u673a\u5236\u548c\u7cbe\u786e\u7684\u4f9d\u8d56\u68c0\u6d4b\uff0c\u4f7fLoadQueueRAW\u80fd\u591f\u5728XiangShan\u5904\u7406\u5668\u4e2d\u5b9e\u73b0\u9ad8\u6548\u7684\u5185\u5b58\u4e00\u81f4\u6027\u4fdd\u969c\uff0c\u5e73\u8861\u4e86\u6027\u80fd\u548c\u6b63\u786e\u6027\u7684\u9700\u6c42\uff0c\u662f\u4e71\u5e8f\u6267\u884c\u5185\u5b58\u7cfb\u7edf\u7684\u5173\u952e\u7ec4\u4ef6\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/","title":"LoadQueueReplay \u6a21\u5757\u6587\u6863","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#1","title":"1. \u6a21\u5757\u6982\u8ff0","text":"<p>LoadQueueReplay \u662f XiangShan \u5904\u7406\u5668 LoadQueue \u7cfb\u7edf\u4e2d\u7684\u5173\u952e\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u5b58\u50a8\u548c\u7ba1\u7406\u9700\u8981\u91cd\u653e\u7684\u52a0\u8f7d\u6307\u4ee4\u3002\u5b83\u5904\u7406\u5404\u79cd\u539f\u56e0\u5bfc\u81f4\u7684\u91cd\u653e\u9700\u6c42\uff0c\u5982\u7f13\u5b58\u672a\u547d\u4e2d\u3001TLB \u672a\u547d\u4e2d\u3001\u5185\u5b58\u4f9d\u8d56\u51b2\u7a81\u7b49\uff0c\u5e76\u5728\u9002\u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\u5b89\u6392\u8fd9\u4e9b\u6307\u4ee4\u91cd\u65b0\u6267\u884c<sup>1</sup>\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#2","title":"2. \u5b58\u50a8\u4fe1\u606f","text":"<p>LoadQueueReplay \u5b58\u50a8\u4ee5\u4e0b\u5173\u952e\u4fe1\u606f<sup>1</sup>\uff1a</p> \u5b57\u6bb5 \u63cf\u8ff0 allocated \u662f\u5426\u5df2\u7ecf\u88ab\u5206\u914d\uff0c\u4e5f\u4ee3\u8868\u662f\u5426\u8be5\u9879\u662f\u5426\u6709\u6548 scheduled \u662f\u5426\u5df2\u7ecf\u88ab\u8c03\u5ea6\uff0c\u4ee3\u8868\u8be5\u9879\u5df2\u7ecf\u88ab\u9009\u51fa\uff0c\u5df2\u7ecf\u6216\u5373\u5c06\u88ab\u53d1\u9001\u81f3LoadUnit\u8fdb\u884c\u91cd\u53d1 uop load\u6307\u4ee4\u6267\u884c\u5305\u62ec\u7684uop\u4fe1\u606f vecReplay \u5411\u91cfload\u6307\u4ee4\u76f8\u5173\u4fe1\u606f vaddrModule Load\u6307\u4ee4\u7684\u865a\u62df\u5730\u5740 cause \u67d0load replay queue\u9879\u5bf9\u5e94load\u6307\u4ee4\u91cd\u53d1\u7684\u539f\u56e0 blocking Load\u6307\u4ee4\u6b63\u5728\u88ab\u963b\u585e strict \u8bbf\u5b58\u4f9d\u8d56\u9884\u6d4b\u5668\u5224\u65ad\u6307\u4ee4\u662f\u5426\u9700\u8981\u7b49\u5f85\u5b83\u4e4b\u524d\u7684\u6240\u6709store\u6307\u4ee4\u6267\u884c\u5b8c\u6bd5\u8fdb\u5165\u8c03\u5ea6\u9636\u6bb5 blockSqIdx \u4e0eload\u6307\u4ee4\u6709\u76f8\u5173\u6027\u7684store\u6307\u4ee4\u7684StoreQueue Index missMSHRId load\u6307\u4ee4\u7684dcache miss\u8bf7\u6c42\u63a5\u53d7ID tlbHintId load\u6307\u4ee4\u7684tlb miss\u8bf7\u6c42\u63a5\u53d7ID replacementUpdated DCcahe\u7684\u66ff\u6362\u7b97\u6cd5\u662f\u5426\u5df2\u7ecf\u66f4\u65b0 replayCarry DCache\u7684\u8def\u9884\u6d4b\u5668\u9884\u6d4b\u4fe1\u606f missDbUpdated ChiselDB\u4e2dMiss\u76f8\u5173\u60c5\u51b5\u66f4\u65b0 dataInLastBeatReg Load\u6307\u4ee4\u9700\u8981\u7684\u6570\u636e\u5728\u4e24\u7b14\u56de\u586b\u8bf7\u6c42\u7684\u6700\u540e\u4e00\u7b14"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#3","title":"3. \u91cd\u653e\u539f\u56e0\u4e0e\u4f18\u5148\u7ea7","text":"<p>LoadQueueReplay \u6a21\u5757\u5904\u7406\u591a\u79cd\u91cd\u653e\u539f\u56e0\uff0c\u6309\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u6392\u5217<sup>1</sup>\uff1a</p> <pre><code>val C_MA  = 0  // \u5b58\u50a8-\u52a0\u8f7d\u9884\u6d4b\u8fdd\u4f8b\nval C_TM  = 1  // TLB\u672a\u547d\u4e2d\nval C_FF  = 2  // \u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1(store\u6570\u636e\u672a\u51c6\u5907\u597d)\nval C_DR  = 3  // DCache\u62d2\u7edd(\u65e0\u6cd5\u5206\u914dMSHR)\nval C_DM  = 4  // DCache\u672a\u547d\u4e2d\nval C_WF  = 5  // \u8def\u9884\u6d4b\u5668\u9884\u6d4b\u9519\u8bef\nval C_BC  = 6  // DCache bank\u51b2\u7a81\nval C_RAR = 7  // \u8bfb\u540e\u8bfb\u961f\u5217\u7a7a\u95f4\u4e0d\u8db3\nval C_RAW = 8  // \u8bfb\u540e\u5199\u961f\u5217\u7a7a\u95f4\u4e0d\u8db3\nval C_NK  = 9  // LoadUnit\u76d1\u6d4b\u5230store-to-load-forwarding\u8fdd\u4f8b\nval C_MF  = 10 // LoadMisalignBuffer\u7a7a\u95f4\u4e0d\u8db3\n</code></pre> <p>\u4f18\u5148\u7ea7\u8bbe\u8ba1\u786e\u4fdd\u4e86\u66f4\u5173\u952e\u7684\u91cd\u653e\u539f\u56e0\u4f18\u5148\u5904\u7406\uff0c\u907f\u514d\u6f5c\u5728\u7684\u6b7b\u9501\u95ee\u9898\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#4","title":"4. \u6838\u5fc3\u7279\u6027","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#41-1","title":"4.1 \u7279\u60271\uff1a\u4e71\u5e8f\u5206\u914d","text":"<p>LoadQueueReplay \u91c7\u7528 Freelist \u8fdb\u884c\u961f\u5217\u7a7a\u95f2\u7ba1\u7406<sup>1</sup>\uff1a</p> <ul> <li>Freelist \u7684\u5927\u5c0f\u4e3a LoadQueueReplay \u7684\u9879\u6570</li> <li>\u5206\u914d\u5bbd\u5ea6\u4e3a Load \u7684\u5bbd\u5ea6\uff08LoadUnit \u7684\u6570\u91cf\uff09</li> <li>\u91ca\u653e\u5bbd\u5ea6\u4e3a 4</li> </ul> <p>\u5206\u914d\u6d41\u7a0b\uff1a</p> <ul> <li>\u5f53 LoadUnit S3 \u4f20\u5165\u4e00\u6761 load \u8bf7\u6c42\u540e\uff0c\u9996\u5148\u5224\u65ad\u662f\u5426\u9700\u8981\u5165\u961f</li> <li>\u5982\u679c\u4e0d\u9700\u8981\u91cd\u53d1\u3001\u53d1\u751f\u5f02\u5e38\u6216\u56e0 redirect \u88ab\u51b2\u5237\uff0c\u5219\u4e0d\u9700\u8981\u5165\u961f</li> <li>\u4e3a\u6bcf\u4e2a LoadUnit \u4ece\u7a7a\u95f2\u9879\u4e2d\u9009\u51fa\u4e00\u4e2a\u9879\u7d22\u5f15</li> <li>\u6839\u636e\u7d22\u5f15\u5c06\u6307\u4ee4\u4fe1\u606f\u586b\u5165\u5bf9\u5e94\u7684\u7d22\u5f15\u9879\u4e2d</li> </ul> <p>\u56de\u6536\u6d41\u7a0b\uff1a</p> <ul> <li>\u6210\u529f\u91cd\u53d1\u6216\u88ab\u5237\u65b0\u7684 load \u6307\u4ee4\u5360\u7528\u7684\u9879\u9700\u8981\u56de\u6536</li> <li>\u901a\u8fc7\u4f4d\u56fe FreeMask \u4fdd\u5b58\u6b63\u5728\u91ca\u653e\u7684\u9879</li> <li>\u6bcf\u4e2a\u5468\u671f Freelist \u6700\u591a\u56de\u6536 4 \u9879</li> </ul> <pre><code>// \u5206\u914d\u903b\u8f91\u793a\u4f8b\nwhen (needEnqueue(w) &amp;&amp; enq.ready) {\n  freeList.io.doAllocate(w) := !enq.bits.isLoadReplay\n  allocated(enqIndex) := true.B\n  scheduled(enqIndex) := false.B\n  uop(enqIndex) := enq.bits.uop\n  // \u5176\u4ed6\u5b57\u6bb5\u8bbe\u7f6e...\n}\n\n// \u56de\u6536\u903b\u8f91\u793a\u4f8b\nwhen (enq.valid &amp;&amp; enq.bits.isLoadReplay) {\n  when (!needReplay(w) || hasExceptions(w)) {\n    allocated(schedIndex) := false.B\n    freeMaskVec(schedIndex) := true.B\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#42-2","title":"4.2 \u7279\u60272\uff1a\u5524\u9192\u673a\u5236","text":"<p>\u4e0d\u540c\u963b\u585e\u6761\u4ef6\u6709\u4e0d\u540c\u7684\u5524\u9192\u6761\u4ef6<sup>1</sup>\uff1a</p> \u91cd\u653e\u539f\u56e0 \u5524\u9192\u6761\u4ef6 C_MA \u5982\u679cstrict=1\uff0c\u9700\u7b49\u5f85load\u6307\u4ee4\u4e4b\u524d\u6240\u6709store\u6307\u4ee4\u5730\u5740\u8ba1\u7b97\u5b8c\u6210\uff1b\u5426\u5219\u53ea\u9700\u7b49\u5f85blockSqIdx\u5bf9\u5e94store\u6307\u4ee4\u5730\u5740\u8ba1\u7b97\u5b8c\u6210 C_TM \u5982\u679cTLB\u65e0\u7a7a\u95f4\u5904\u7406miss\u8bf7\u6c42\uff0c\u6807\u8bb0\u4e3a\u53ef\u91cd\u53d1\u7b49\u5f85\u8c03\u5ea6\uff1b\u5426\u5219\u7b49\u5f85TLB\u8fd4\u56detlbHintId\u5339\u914d\u7684hint\u4fe1\u53f7 C_FF \u7b49\u5f85blockSqIdx\u5bf9\u5e94store\u6307\u4ee4\u6570\u636e\u51c6\u5907\u5b8c\u6210 C_DR \u53ef\u76f4\u63a5\u6807\u8bb0\u4e3a\u53ef\u91cd\u53d1\u72b6\u6001\uff0c\u7b49\u5f85\u8c03\u5ea6 C_DM \u7b49\u5f85\u4e0emissMSHRId\u5339\u914d\u7684L2 Hint\u4fe1\u53f7 C_WF \u53ef\u76f4\u63a5\u6807\u8bb0\u4e3a\u53ef\u91cd\u53d1\u72b6\u6001\uff0c\u7b49\u5f85\u8c03\u5ea6 C_BC \u53ef\u76f4\u63a5\u6807\u8bb0\u4e3a\u53ef\u91cd\u53d1\u72b6\u6001\uff0c\u7b49\u5f85\u8c03\u5ea6 C_RAR \u7b49\u5f85LoadQueueRAR\u6709\u7a7a\u95f2\u7a7a\u95f4\u6216\u8be5\u6761\u6307\u4ee4\u662f\u6700\u8001\u7684load\u6307\u4ee4 C_RAW \u7b49\u5f85LoadQueueRAW\u6709\u7a7a\u95f2\u7a7a\u95f4\u6216\u8be5\u6761load\u6307\u4ee4\u5728\u4e4b\u524dstore\u6307\u4ee4\u5730\u5740\u90fd\u8ba1\u7b97\u5b8c\u6210 C_MF \u7b49\u5f85LoadMisalignBuffer\u6709\u7a7a\u95f2\u7a7a\u95f4 <p>\u8fd9\u4e9b\u5524\u9192\u6761\u4ef6\u51b3\u5b9a\u4e86\u6307\u4ee4\u4f55\u65f6\u4ece\u963b\u585e\u72b6\u6001\u8f6c\u4e3a\u53ef\u91cd\u653e\u72b6\u6001\uff1a</p> <pre><code>// \u66f4\u65b0\u963b\u585e\u6761\u4ef6\u793a\u4f8b\n(0 until LoadQueueReplaySize).map(i =&gt; {\n  // \u5bf9\u4e8eC_MA\u539f\u56e0\n  when (cause(i)(LoadReplayCauses.C_MA)) {\n    blocking(i) := Mux(stAddrDeqVec(i), false.B, blocking(i))\n  }\n\n  // \u5bf9\u4e8eC_TM\u539f\u56e0\n  when (cause(i)(LoadReplayCauses.C_TM)) {\n    blocking(i) := Mux(io.tlb_hint.resp.valid &amp;&amp;\n                   (io.tlb_hint.resp.bits.replay_all ||\n                   io.tlb_hint.resp.bits.id === tlbHintId(i)), false.B, blocking(i))\n  }\n\n  // \u5176\u4ed6\u539f\u56e0\u7684\u5904\u7406...\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#43-3","title":"4.3 \u7279\u60273\uff1a\u9009\u62e9\u8c03\u5ea6","text":"<p>LoadQueueReplay \u91c7\u7528\u4e09\u79cd\u9009\u62e9\u8c03\u5ea6\u65b9\u5f0f<sup>1</sup>\uff1a</p> <ol> <li> <p>\u6839\u636e\u5165\u961f\u5e74\u9f84\uff1a</p> <ul> <li>\u4f7f\u75283\u4e2a\u5e74\u9f84\u77e9\u9635(\u6bcf\u4e00\u4e2aBank\u5bf9\u5e94\u4e00\u4e2a\u5e74\u9f84\u77e9\u9635)\u8bb0\u5f55\u5165\u961f\u65f6\u95f4</li> <li>\u4ece\u5df2\u51c6\u5907\u597d\u53ef\u91cd\u53d1\u7684\u6307\u4ee4\u4e2d\u9009\u62e9\u5165\u961f\u65f6\u95f4\u6700\u957f\u7684\u6307\u4ee4</li> </ul> </li> <li> <p>\u6839\u636eLoad\u6307\u4ee4\u7684\u5e74\u9f84\uff1a</p> <ul> <li>\u6839\u636eLqPtr\u5224\u65ad\u9760\u8fd1\u6700\u8001\u7684load\u6307\u4ee4\u8fdb\u884c\u91cd\u53d1</li> <li>\u5224\u65ad\u5bbd\u5ea6\u4e3aOldestSelectStride=4</li> </ul> </li> <li> <p>\u6570\u636e\u76f8\u5173\u4f18\u5148\u8c03\u5ea6\uff1a</p> <ul> <li>\u9996\u5148\u8c03\u5ea6\u56e0L2 Hint\u5524\u9192\u7684\u91cd\u53d1\uff08L2 Cache\u56de\u586b\u524d2-3\u62cd\u63d0\u524d\u7ed9\u51fa\u5524\u9192\u4fe1\u53f7\uff09</li> <li>\u5982\u4e0d\u5b58\u5728L2 Hint\u60c5\u51b5\uff0c\u5c06\u91cd\u653e\u539f\u56e0\u5206\u4e3a\u9ad8\u4f4e\u4f18\u5148\u7ea7\uff1a<ul> <li>\u9ad8\u4f18\u5148\u7ea7\uff1adcache\u7f3a\u5931(C_DM)\u6216\u8f6c\u53d1\u5931\u8d25(C_FF)\u5bfc\u81f4\u7684\u91cd\u653e</li> <li>\u4f4e\u4f18\u5148\u7ea7\uff1a\u5176\u4ed6\u91cd\u653e\u539f\u56e0</li> </ul> </li> </ul> </li> </ol> <pre><code>// \u91cd\u653e\u4f18\u5148\u7ea7\u9009\u62e9\u903b\u8f91\nval s0_remPriorityReplaySelVec = VecInit((0 until LoadPipelineWidth).map(rem =&gt; {\n  Mux(s0_remHintSelValidVec(rem), s0_remLoadHintSelMask(rem),\n    Mux(ParallelORR(s0_remLoadHigherPriorityReplaySelMask(rem)), \n        s0_remLoadHigherPriorityReplaySelMask(rem), \n        s0_remLoadLowerPriorityReplaySelMask(rem)))\n}))\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#5","title":"5. \u6570\u636e\u6d41\u5206\u6790","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#51","title":"5.1 \u5165\u961f\u6d41\u7a0b","text":"<p>\u5165\u961f\u65f6\u5e8f\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u91cd\u53d1\u5165\u961f\u548c\u975e\u91cd\u53d1\u5165\u961f<sup>1</sup>\u3002</p> <p>\u975e\u91cd\u53d1\u5165\u961f\u6d41\u7a0b\uff1a 1. LoadUnit \u6267\u884c\u6307\u4ee4\u53d1\u73b0\u9700\u8981\u91cd\u653e\uff08\u5982\u7f13\u5b58\u672a\u547d\u4e2d\uff09 2. \u901a\u8fc7 <code>io.enq</code> \u63a5\u53e3\u53d1\u9001\u4fe1\u606f\u5230 LoadQueueReplay 3. LoadQueueReplay \u5206\u914d\u4e00\u4e2a\u6761\u76ee\u5e76\u8bb0\u5f55\u91cd\u653e\u4fe1\u606f\uff1a</p> <pre><code>when (needEnqueue(w) &amp;&amp; enq.ready) {\n  // \u5206\u914d\u65b0\u6761\u76ee\n  allocated(enqIndex) := true.B\n  scheduled(enqIndex) := false.B\n  uop(enqIndex) := enq.bits.uop\n\n  // \u8bbe\u7f6e\u91cd\u653e\u539f\u56e0\u548c\u72b6\u6001\n  cause(enqIndex) := replayInfo.cause.asUInt\n  blocking(enqIndex) := true.B  // \u9ed8\u8ba4\u963b\u585e\u76f4\u5230\u6761\u4ef6\u6ee1\u8db3\n\n  // \u6839\u636e\u4e0d\u540c\u91cd\u653e\u539f\u56e0\u8bbe\u7f6e\u7279\u5b9a\u72b6\u6001\n  // ...\n}\n</code></pre> <p>\u91cd\u53d1\u5165\u961f\u6d41\u7a0b\uff1a 1. \u5df2\u91cd\u653e\u4f46\u4ecd\u9700\u518d\u6b21\u91cd\u653e\u7684\u6307\u4ee4\u8fd4\u56de\u5230 LoadQueueReplay 2. \u4e0d\u91cd\u65b0\u5206\u914d\u6761\u76ee\uff0c\u800c\u662f\u66f4\u65b0\u73b0\u6709\u6761\u76ee\u7684\u72b6\u6001\uff1a</p> <pre><code>when (enq.valid &amp;&amp; enq.bits.isLoadReplay) {\n  when (!needReplay(w) || hasExceptions(w)) {\n    // \u5982\u679c\u4e0d\u518d\u9700\u8981\u91cd\u653e\u6216\u6709\u5f02\u5e38\uff0c\u91ca\u653e\u91cd\u653e\u6761\u76ee\n    allocated(schedIndex) := false.B\n    freeMaskVec(schedIndex) := true.B\n  } .otherwise {\n    // \u5426\u5219\uff0c\u91cd\u7f6e\u8c03\u5ea6\u72b6\u6001\uff0c\u51c6\u5907\u4e0b\u4e00\u6b21\u91cd\u653e\n    scheduled(schedIndex) := false.B\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#52","title":"5.2 \u91cd\u653e\u6d41\u6c34\u7ebf","text":"<p>\u91cd\u653e\u8fc7\u7a0b\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5<sup>1</sup>\uff1a</p> <ol> <li> <p>S0\u9636\u6bb5\uff1a\u9009\u62e9\u9700\u8981\u91cd\u653e\u7684\u6761\u76ee</p> <ul> <li>\u4f18\u5148\u5904\u7406L2 Hint\u5524\u9192\u7684\u6761\u76ee</li> <li>\u7136\u540e\u662f\u9ad8\u4f18\u5148\u7ea7\u539f\u56e0\uff08C_DM\u548cC_FF\uff09</li> <li>\u6700\u540e\u662f\u5176\u4ed6\u539f\u56e0\u7684\u91cd\u653e\u6761\u76ee</li> <li>\u53ef\u80fd\u8fd8\u4f1a\u8003\u8651\u5165\u961f\u5e74\u9f84\u548c\u6307\u4ee4\u5e74\u9f84</li> </ul> </li> <li> <p>S1\u9636\u6bb5\uff1a\u8bfb\u53d6\u865a\u62df\u5730\u5740\u5e76\u6807\u8bb0\u8c03\u5ea6\u72b6\u6001    <pre><code>for (i &lt;- 0 until LoadPipelineWidth) {\n  // \u66f4\u65b0\u8c03\u5ea6\u72b6\u6001\n  when (s0_can_go &amp;&amp; s0_oldestSel(i).valid &amp;&amp; s0_oldestSelIndexOH(j)) {\n    scheduled(j) := true.B\n  }\n\n  // \u8bfb\u53d6\u865a\u62df\u5730\u5740\n  vaddrModule.io.ren(i) := s1_oldestSel(i).valid &amp;&amp; s1_can_go(i)\n  vaddrModule.io.raddr(i) := s1_oldestSel(i).bits\n}\n</code></pre></p> </li> <li> <p>S2\u9636\u6bb5\uff1a\u53d1\u9001\u91cd\u653e\u8bf7\u6c42\u5230\u52a0\u8f7d\u5355\u5143    <pre><code>replay_req(i).valid := s2_oldestSel(i).valid\nreplay_req(i).bits.uop := s2_replayUop\nreplay_req(i).bits.vaddr := vaddrModule.io.rdata(i)\nreplay_req(i).bits.isLoadReplay := true.B\n\n// \u8fde\u63a5\u5230\u8f93\u51fa\u63a5\u53e3\nio.replay(i) &lt;&gt; replay_req(i)\n</code></pre></p> </li> </ol> <p>\u53e6\u5916\uff0cLoadQueueReplay \u8fd8\u5b9e\u73b0\u4e86\u91cd\u653e\u51b7\u5374\u673a\u5236\uff0c\u907f\u514d\u9891\u7e41\u91cd\u653e\u5bfc\u81f4\u8d44\u6e90\u6d6a\u8d39\uff1a</p> <pre><code>// \u51b7\u5374\u673a\u5236\u5b9e\u73b0\nwhen (lastReplay(i) &amp;&amp; io.replay(i).fire) {\n  coldCounter(i) := coldCounter(i) + 1.U\n} .elsewhen (coldDownNow(i)) {\n  coldCounter(i) := coldCounter(i) + 1.U\n} .otherwise {\n  coldCounter(i) := 0.U\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#53-loadqueuereplay-loadqueue","title":"5.3 LoadQueueReplay \u4e0e LoadQueue \u7684\u5173\u7cfb","text":"<p>LoadQueueReplay \u4e0e LoadQueue \u662f\u76f8\u4e92\u914d\u5408\u4f46\u72b6\u6001\u72ec\u7acb\u7684\u4e24\u4e2a\u6a21\u5757\uff1a</p> <ol> <li> <p>\u72ec\u7acb\u7684\u6761\u76ee\u7ba1\u7406\uff1a</p> <ul> <li>LoadQueueReplay \u6709\u81ea\u5df1\u72ec\u7acb\u7684\u6761\u76ee\uff0c\u4e0d\u76f4\u63a5\u4fee\u6539 LoadQueue \u4e2d\u7684\u6761\u76ee\u72b6\u6001</li> <li>\u6bcf\u4e2a\u9700\u8981\u91cd\u653e\u7684\u52a0\u8f7d\u6307\u4ee4\u5728 LoadQueueReplay \u4e2d\u6709\u72ec\u7acb\u7684\u8ffd\u8e2a\u6761\u76ee</li> <li>LoadQueue \u4e2d\u7684\u539f\u59cb\u6761\u76ee\u4fdd\u6301\u5176\u72b6\u6001\uff0c\u76f4\u5230\u6700\u7ec8\u6267\u884c\u6210\u529f\u6216\u88ab\u53d6\u6d88</li> </ul> </li> <li> <p>\u6570\u636e\u6d41\u5411\uff1a    <pre><code>LoadQueue -&gt; \u52a0\u8f7d\u5355\u5143 -&gt; [\u6267\u884c] -&gt; \n  \u5982\u9700\u91cd\u653e: -&gt; LoadQueueReplay -&gt; \u52a0\u8f7d\u5355\u5143 -&gt; [\u518d\u6b21\u6267\u884c] -&gt; \n    \u5982\u6210\u529f: -&gt; LoadQueue (\u901a\u8fc7 io.ldu.ldin \u63a5\u53e3)\n    \u5982\u4ecd\u9700\u91cd\u653e: -&gt; \u8fd4\u56de LoadQueueReplay\n</code></pre></p> </li> </ol> <p>\u91cd\u653e\u540e\u7684\u6570\u636e\u65e0\u8bba\u662f\u6b63\u5e38\u6267\u884c\u8fd8\u662f\u91cd\u653e\u6267\u884c\uff0c\u5176\u6700\u7ec8\u7ed3\u679c\u90fd\u901a\u8fc7\u76f8\u540c\u7684\u63a5\u53e3\uff08<code>io.ldu.ldin</code>\uff09\u8fd4\u56de\u7ed9 LoadQueue\u3002\u8fd9\u610f\u5473\u7740\uff1a</p> <ol> <li>\u91cd\u653e\u6307\u4ee4\u4f7f\u7528\u4e0e\u539f\u59cb\u6307\u4ee4\u76f8\u540c\u7684 LQ \u7d22\u5f15\uff08lqIdx\uff09</li> <li>LoadQueue \u4e0d\u533a\u5206\u6570\u636e\u6765\u81ea\u6b63\u5e38\u6267\u884c\u8fd8\u662f\u91cd\u653e\u6267\u884c</li> <li>\u53ea\u6709\u5f53\u6307\u4ee4\u6210\u529f\u6267\u884c\uff08\u4e0d\u518d\u9700\u8981\u91cd\u653e\uff09\u65f6\uff0cLoadQueue \u624d\u4f1a\u5c06\u6761\u76ee\u6807\u8bb0\u4e3a\u5df2\u63d0\u4ea4</li> </ol> <pre><code>// \u52a0\u8f7d\u5355\u5143\u91cd\u65b0\u6267\u884c\u91cd\u653e\u6307\u4ee4\u540e\uff0c\u7ed3\u679c\u901a\u8fc7 io.ldu.ldin \u63a5\u53e3\u8fd4\u56de\u7ed9 LoadQueue\nfor(i &lt;- 0 until LoadPipelineWidth) {\n  io.ldin(i).ready := true.B\n  val loadWbIndex = io.ldin(i).bits.uop.lqIdx.value\n\n  when (io.ldin(i).valid) {\n    // \u5982\u679c\u6267\u884c\u6210\u529f\u4e14\u4e0d\u9700\u8981\u518d\u6b21\u91cd\u653e\uff0c\u66f4\u65b0 LoadQueue \u4e2d\u5bf9\u5e94\u6761\u76ee\u7684\u72b6\u6001\n    when (!need_rep &amp;&amp; need_valid &amp;&amp; !io.ldin(i).bits.isvec) {\n      committed(loadWbIndex) := true.B\n      // \u5176\u4ed6\u72b6\u6001\u66f4\u65b0...\n    }\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#6","title":"6. \u4e0e\u5176\u4ed6\u5b50\u6a21\u5757\u7684\u534f\u4f5c","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#61-virtualloadqueue","title":"6.1 \u4e0e VirtualLoadQueue \u7684\u534f\u4f5c","text":"<pre><code>// LoadQueueReplay \u4ece VirtualLoadQueue \u83b7\u53d6\u5199\u56de\u6307\u9488\u4fe1\u606f\nloadQueueReplay.io.ldWbPtr          &lt;&gt; virtualLoadQueue.io.ldWbPtr\n</code></pre> <p>LoadQueueReplay \u4f7f\u7528 VirtualLoadQueue \u63d0\u4f9b\u7684\u5199\u56de\u6307\u9488\uff08ldWbPtr\uff09\u6765\uff1a - \u786e\u5b9a\u961f\u5217\u4e2d\u6307\u4ee4\u7684\u76f8\u5bf9\u987a\u5e8f - \u5b9e\u73b0\u57fa\u4e8e\u7a0b\u5e8f\u987a\u5e8f\u7684\u6700\u65e7\u6307\u4ee4\u9009\u62e9\uff08\u4f18\u5148\u9009\u62e9\u63a5\u8fd1\u5199\u56de\u6307\u9488\u7684\u6307\u4ee4\uff09 - \u89e3\u9664 RAR/RAW \u963b\u585e\u6761\u4ef6\uff08\u5224\u65ad\u6307\u4ee4\u662f\u5426\u5df2\u8d85\u8fc7\u5199\u56de\u754c\u9650\uff09</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#62-loadqueuerarraw","title":"6.2 \u4e0e LoadQueueRAR/RAW \u7684\u534f\u4f5c","text":"<pre><code>loadQueueReplay.io.rarFull          &lt;&gt; loadQueueRAR.io.lqFull\nloadQueueReplay.io.rawFull          &lt;&gt; loadQueueRAW.io.lqFull\n</code></pre> <p>LoadQueueReplay \u76d1\u63a7 RAR \u548c RAW \u961f\u5217\u7684\u72b6\u6001\uff1a - \u5982\u679c\u961f\u5217\u6ee1\uff0c\u963b\u585e\u5bf9\u5e94\u539f\u56e0\u7684\u91cd\u653e - \u5f53\u961f\u5217\u6709\u7a7a\u95f4\u65f6\uff0c\u89e3\u9664\u963b\u585e\u5e76\u5141\u8bb8\u91cd\u653e - \u8fd9\u786e\u4fdd\u4e86\u4f9d\u8d56\u51b2\u7a81\u68c0\u6d4b\u6a21\u5757\u4e0d\u4f1a\u88ab\u5927\u91cf\u91cd\u653e\u6307\u4ee4\u538b\u57ae</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#7","title":"7. \u5178\u578b\u6570\u636e\u6d41\u573a\u666f\u793a\u4f8b","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#_1","title":"\u7f13\u5b58\u672a\u547d\u4e2d\u91cd\u653e\u7684\u5b8c\u6574\u6570\u636e\u6d41\uff1a","text":"<ol> <li>\u52a0\u8f7d\u6307\u4ee4\u5728 VirtualLoadQueue \u5206\u914d\u6761\u76ee\uff08lqIdx = 10\uff09</li> <li>\u52a0\u8f7d\u5355\u5143\u6267\u884c\u6307\u4ee4\uff0c\u53d1\u73b0\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u8bbe\u7f6e\u91cd\u653e\u6807\u5fd7</li> <li>\u6267\u884c\u7ed3\u679c\u901a\u8fc7 <code>io.ldu.ldin</code> \u8fd4\u56de\uff0c\u540c\u65f6\uff1a<ul> <li>VirtualLoadQueue \u4fdd\u6301\u539f\u59cb\u6761\u76ee\u72b6\u6001\u4e0d\u53d8</li> <li>\u6267\u884c\u7ed3\u679c\u540c\u65f6\u53d1\u9001\u5230 LoadQueueReplay \u7684 <code>io.enq</code> \u63a5\u53e3</li> </ul> </li> <li>LoadQueueReplay \u5206\u914d\u6761\u76ee\uff08\u4f8b\u5982 idx = 5\uff09\uff0c\u8bb0\u5f55:<ul> <li>\u539f\u59cb uop\uff08\u5305\u542b lqIdx = 10\uff09</li> <li>\u539f\u56e0 = C_DM\uff08\u7f13\u5b58\u672a\u547d\u4e2d\uff09</li> <li>\u865a\u62df\u5730\u5740\u548c MSHR ID</li> </ul> </li> <li>\u6536\u5230 L2 \u63d0\u793a\u6216\u7f13\u5b58\u884c\u8fd4\u56de\u65f6\uff1a<ul> <li>LoadQueueReplay \u89e3\u9664\u6761\u76ee\uff08idx = 5\uff09\u7684\u963b\u585e</li> <li>\u901a\u8fc7 <code>io.replay</code> \u63a5\u53e3\u53d1\u9001\u91cd\u653e\u8bf7\u6c42\u5230\u52a0\u8f7d\u5355\u5143</li> </ul> </li> <li>\u52a0\u8f7d\u5355\u5143\u91cd\u65b0\u6267\u884c\u6307\u4ee4\uff1a<ul> <li>\u4f7f\u7528\u76f8\u540c\u7684 lqIdx = 10</li> <li>\u8fd9\u6b21\u4ece\u7f13\u5b58\u6216 MSHR \u83b7\u53d6\u6570\u636e</li> </ul> </li> <li>\u91cd\u653e\u7ed3\u679c\u901a\u8fc7 <code>io.ldu.ldin</code> \u8fd4\u56de\uff1a<ul> <li>\u4e0d\u9700\u8981\u7ee7\u7eed\u91cd\u653e\u65f6\uff0cLoadQueue \u66f4\u65b0 lqIdx = 10 \u7684\u6761\u76ee\u72b6\u6001\uff08committed = true\uff09</li> <li>LoadQueueReplay \u91ca\u653e\u6761\u76ee idx = 5</li> <li>\u6700\u7ec8\u6570\u636e\u901a\u8fc7 LoadQueue \u7684\u8f93\u51fa\u63a5\u53e3\u4f20\u9012\u7ed9\u5904\u7406\u5668\u540e\u7aef</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_replay/#8","title":"8. \u603b\u7ed3","text":"<p>LoadQueueReplay \u662f XiangShan \u5904\u7406\u5668\u5185\u5b58\u7cfb\u7edf\u7684\u5173\u952e\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u7ba1\u7406\u9700\u8981\u91cd\u653e\u7684\u52a0\u8f7d\u6307\u4ee4\u3002\u5b83\u901a\u8fc7\u4e71\u5e8f\u5206\u914d\u3001\u590d\u6742\u7684\u5524\u9192\u673a\u5236\u548c\u667a\u80fd\u7684\u9009\u62e9\u8c03\u5ea6\uff0c\u9ad8\u6548\u5730\u5904\u7406\u5404\u79cd\u5185\u5b58\u8bbf\u95ee\u5f02\u5e38\u60c5\u51b5\u3002\u5b83\u7ef4\u62a4\u81ea\u5df1\u72ec\u7acb\u7684\u6761\u76ee\u72b6\u6001\uff0c\u4f46\u4e0e LoadQueue \u53ca\u5176\u4ed6\u5b50\u6a21\u5757\u7d27\u5bc6\u534f\u4f5c\uff0c\u5f62\u6210\u5b8c\u6574\u7684\u6570\u636e\u6d41\u548c\u63a7\u5236\u6d41\u3002\u91cd\u653e\u540e\u7684\u6570\u636e\u603b\u662f\u901a\u8fc7\u6807\u51c6\u8def\u5f84\u8fd4\u56de\u5230 LoadQueue\uff0c\u4fdd\u6301\u4e86\u6570\u636e\u6d41\u7684\u4e00\u81f4\u6027\uff0c\u540c\u65f6\u786e\u4fdd\u4e86\u7a0b\u5e8f\u7684\u6b63\u786e\u6267\u884c\u3002</p> <ol> <li> <p>LoadQueueReplay - \u9999\u5c71\u5f00\u6e90\u5904\u7406\u5668\u8bbe\u8ba1\u6587\u6863 \u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/","title":"LoadQueueUncache \u6a21\u5757\u6587\u6863","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#1","title":"1. \u529f\u80fd\u63cf\u8ff0","text":"<p>LoadQueueUncache \u662f XiangShan \u5904\u7406\u5668 LSQ \u7cfb\u7edf\u4e2d\u7684\u4e13\u7528\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u5904\u7406\u975e\u7f13\u5b58\u52a0\u8f7d\u6307\u4ee4\uff0c\u5305\u62ec\u5185\u5b58\u6620\u5c04 I/O (MMIO) \u548c\u5176\u4ed6\u975e\u7f13\u5b58 (NC) \u5185\u5b58\u533a\u57df\u7684\u8bbf\u95ee<sup>1</sup>\u3002\u8fd9\u4e9b\u7279\u6b8a\u8bbf\u95ee\u9700\u8981\u7ed5\u8fc7\u5e38\u89c4\u7f13\u5b58\u7cfb\u7edf\uff0c\u901a\u8fc7\u4e13\u7528\u901a\u9053\u76f4\u63a5\u4e0e\u5916\u90e8\u8bbe\u5907\u6216\u7279\u6b8a\u5185\u5b58\u533a\u57df\u4ea4\u4e92\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#11-1","title":"1.1 \u7279\u6027 1\uff1a\u5165\u961f\u903b\u8f91","text":"<p>LoadQueueUncache \u5b9e\u73b0\u4e86\u4e24\u9636\u6bb5\u6d41\u6c34\u7ebf\u5165\u961f\u5904\u7406<sup>1</sup>\uff1a</p> <ol> <li>\u7b2c\u4e00\u9636\u6bb5(s1)\uff1a\u6839\u636e ROB \u7d22\u5f15\u5bf9\u8bf7\u6c42\u8fdb\u884c\u6392\u5e8f\uff0c\u786e\u4fdd\u7a0b\u5e8f\u987a\u5e8f\u3002</li> <li>\u7b2c\u4e8c\u9636\u6bb5(s2)\uff1a\u5224\u65ad\u8bf7\u6c42\u662f\u5426\u6ee1\u8db3\u5165\u961f\u6761\u4ef6\uff1a<ul> <li>\u672a\u88ab\u91cd\u5b9a\u5411\u5237\u65b0</li> <li>\u65e0\u5f02\u5e38</li> <li>\u65e0\u9700\u91cd\u653e</li> <li>\u662f MMIO \u6216 NC \u8bf7\u6c42</li> </ul> </li> </ol> <p>\u7b26\u5408\u6761\u4ef6\u7684\u8bf7\u6c42\u901a\u8fc7 FreeList \u5206\u914d\u7a7a\u95f2\u6761\u76ee\uff0c\u5199\u5165\u76f8\u5e94\u7684 UncacheEntry\u3002\u5f53 Buffer \u6ee1\u4e14\u65e0\u6cd5\u5206\u914d\u7a7a\u95f4\u65f6\uff0c\u4f1a\u4ea7\u751f\u56de\u6eda\u8bf7\u6c42\u8981\u6c42\u91cd\u65b0\u6267\u884c\u6700\u8001\u7684\u65e0\u6cd5\u5165\u961f\u8bf7\u6c42\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#12-2","title":"1.2 \u7279\u6027 2\uff1a\u51fa\u961f\u903b\u8f91","text":"<p>\u51fa\u961f\u903b\u8f91\u5904\u7406\u5df2\u5b8c\u6210\u7684\u975e\u7f13\u5b58\u8bf7\u6c42\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9 LoadUnit<sup>1</sup>\uff1a</p> <ul> <li>\u5f53 UncacheEntry \u5b8c\u6210\u8bf7\u6c42\u5904\u7406\u3001\u88ab redirect \u5237\u65b0\u6216\u63a5\u6536\u5230\u5916\u90e8\u9519\u8bef\u54cd\u5e94\u65f6\uff0c\u8be5\u6761\u76ee\u4f1a\u51fa\u961f\u5e76\u91ca\u653e FreeList \u4e2d\u7684\u6807\u5fd7</li> <li>\u8fd4\u56de\u7ed9 LoadUnit \u7684\u8bf7\u6c42\u5728\u7b2c\u4e00\u62cd\u9009\u51fa\uff0c\u7b2c\u4e8c\u62cd\u8fd4\u56de</li> <li>MMIO \u548c NC \u6709\u56fa\u5b9a\u7684\u56de\u5199\u7aef\u53e3\u5206\u914d\uff1a<ul> <li>MMIO \u53ea\u8fd4\u56de\u5230 LoadUnit 2</li> <li>NC \u53ef\u8fd4\u56de\u5230 LoadUnit \u00bd\uff0c\u901a\u8fc7 entry id \u4e0e\u7aef\u53e3\u6570\u7684\u4f59\u6570\u786e\u5b9a</li> </ul> </li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#13-3uncache","title":"1.3 \u7279\u6027 3\uff1aUncache \u4ea4\u4e92\u903b\u8f91","text":"<p>\u4e0e Uncache \u6a21\u5757\u7684\u4ea4\u4e92\u5206\u4e3a\u4e09\u4e2a\u5173\u952e\u6b65\u9aa4<sup>1</sup>\uff1a</p> <ol> <li> <p>\u53d1\u9001\u8bf7\u6c42(req)\uff1a</p> <ul> <li>\u9009\u62e9\u51c6\u5907\u597d\u7684\u8bf7\u6c42\uff0c\u53d1\u9001\u7ed9 Uncache Buffer</li> <li>\u8bf7\u6c42\u4e2d\u5305\u542b\u6e90 ID (mid)</li> </ul> </li> <li> <p>\u63a5\u6536 ID \u54cd\u5e94(idResp)\uff1a</p> <ul> <li>Uncache Buffer \u63a5\u6536\u8bf7\u6c42\u540e\u8fd4\u56de idResp</li> <li>\u5305\u542b\u6e90 ID (mid) \u548c\u4e3a\u8be5\u8bf7\u6c42\u5206\u914d\u7684\u76ee\u6807 ID (sid)</li> <li>LoadQueueUncache \u901a\u8fc7 mid \u627e\u5230\u5bf9\u5e94\u6761\u76ee\u5e76\u5b58\u50a8 sid</li> </ul> </li> <li> <p>\u63a5\u6536\u7ed3\u679c\u54cd\u5e94(resp)\uff1a</p> <ul> <li>Uncache Buffer \u5b8c\u6210\u8bbf\u95ee\u540e\u8fd4\u56de\u7ed3\u679c</li> <li>\u901a\u8fc7 sid \u627e\u5230\u6240\u6709\u76f8\u5173\u6761\u76ee\u5e76\u4f20\u9012\u7ed3\u679c</li> <li>\u4e00\u4e2a sid \u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a\u6761\u76ee\uff08\u56e0\u4e3a Uncache Buffer \u7684\u5408\u5e76\u7279\u6027\uff09</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#2","title":"2. \u7cfb\u7edf\u67b6\u6784","text":"<p>LoadQueueUncache \u91c7\u7528entry buffer\u8bbe\u8ba1\uff0c\u5305\u542b\u4ee5\u4e0b\u4e3b\u8981\u7ec4\u4ef6<sup>1</sup>\uff1a</p> <pre><code>val entries = Seq.tabulate(LoadUncacheBufferSize)(i =&gt; Module(new UncacheEntry(i)))\n\nval freeList = Module(new FreeList(\n  size = LoadUncacheBufferSize,\n  allocWidth = LoadPipelineWidth,\n  freeWidth = 4,\n  enablePreAlloc = true,\n  moduleName = \"LoadQueueUncache freelist\"\n))\n</code></pre> <p>\u6574\u4f53\u67b6\u6784\u7279\u70b9\uff1a - \u591a\u4e2a UncacheEntry \u5b9e\u4f8b\u5e76\u884c\u5904\u7406\u8bf7\u6c42 - FreeList \u7ba1\u7406\u6761\u76ee\u5206\u914d\u548c\u56de\u6536 - \u4e13\u7528\u63a5\u53e3\u5904\u7406 MMIO \u548c NC \u8bf7\u6c42\u7684\u5206\u53d1\u4e0e\u56de\u6536 - \u72b6\u6001\u673a\u8ddf\u8e2a\u6bcf\u4e2a\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#3-uncacheentry","title":"3. UncacheEntry \u6a21\u5757","text":"<p>UncacheEntry \u662f LoadQueueUncache \u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u5904\u7406\u5355\u4e2a\u975e\u7f13\u5b58\u52a0\u8f7d\u8bf7\u6c42\u7684\u5b8c\u6574\u751f\u547d\u5468\u671f<sup>1</sup>\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#31-1","title":"3.1 \u7279\u6027 1\uff1a\u751f\u547d\u5468\u671f\u53ca\u72b6\u6001\u673a","text":"<p>UncacheEntry \u4f7f\u7528\u72b6\u6001\u673a\u8ddf\u8e2a\u8bf7\u6c42\u5904\u7406\uff1a</p> <pre><code>val s_idle :: s_req :: s_resp :: s_wait :: Nil = Enum(4)\nval uncacheState = RegInit(s_idle)\n</code></pre> <ul> <li>s_idle\uff1a\u9ed8\u8ba4\u72b6\u6001\uff0c\u8868\u793a\u65e0\u8bf7\u6c42\u6216\u8bf7\u6c42\u5c1a\u4e0d\u5177\u5907\u53d1\u9001\u6761\u4ef6</li> <li>s_req\uff1a\u5177\u5907\u53d1\u9001\u6761\u4ef6\uff0c\u7b49\u5f85\u88ab\u9009\u4e2d\u5e76\u7531\u4e2d\u95f4\u5bc4\u5b58\u5668\u63a5\u6536</li> <li>s_resp\uff1a\u8bf7\u6c42\u5df2\u88ab\u63a5\u6536\uff0c\u7b49\u5f85 Uncache Buffer \u8fd4\u56de\u8bbf\u95ee\u7ed3\u679c</li> <li>s_wait\uff1a\u5df2\u6536\u5230\u8bbf\u95ee\u7ed3\u679c\uff0c\u7b49\u5f85\u88ab\u9009\u4e2d\u5e76\u7531 LoadUnit \u63a5\u6536</li> </ul> <p>\u72b6\u6001\u8f6c\u6362\u89e6\u53d1\u6761\u4ef6\uff1a - s_idle \u2192 s_req\uff1a\u5bf9 MMIO\uff0c\u6307\u4ee4\u5230\u8fbe ROB \u5934\u90e8\uff1b\u5bf9 NC\uff0creq_valid \u6709\u6548 - s_req \u2192 s_resp\uff1a\u8bf7\u6c42\u88ab LoadQueueUncache \u4e2d\u95f4\u5bc4\u5b58\u5668\u63a5\u6536 - s_resp \u2192 s_wait\uff1a\u6536\u5230 Uncache Buffer \u8fd4\u56de\u7684\u8bbf\u95ee\u7ed3\u679c - s_wait \u2192 s_idle\uff1a\u5199\u56de\u6210\u529f\u6216\u88ab\u5237\u65b0</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#32-2redirect","title":"3.2 \u7279\u6027 2\uff1aredirect \u5237\u65b0\u903b\u8f91","text":"<p>\u5f53\u63a5\u6536\u5230\u6d41\u6c34\u7ebf redirect \u4fe1\u53f7\u65f6\uff0cUncacheEntry \u4f1a\u5224\u65ad\u662f\u5426\u9700\u8981\u5237\u65b0<sup>1</sup>\uff1a</p> <pre><code>val needFlushReg = RegInit(false.B)\nval needFlush = req_valid &amp;&amp; req.uop.robIdx.needFlush(io.redirect)\nval flush = WireInit(false.B)\n\nwhen(flush){\n  needFlushReg := false.B\n}.elsewhen(needFlush){\n  needFlushReg := true.B\n}\n</code></pre> <p>\u5237\u65b0\u5904\u7406\u6709\u4e24\u79cd\u60c5\u51b5\uff1a 1. \u76f4\u63a5\u5237\u65b0\uff1a\u5904\u4e8e s_idle \u72b6\u6001\u65f6\u53ef\u7acb\u5373\u5237\u65b0 2. \u5ef6\u8fdf\u5237\u65b0\uff1a\u5df2\u53d1\u51fa uncache \u8bf7\u6c42\u65f6\uff0c\u9700\u7b49\u5f85\u63a5\u6536\u5230\u54cd\u5e94\u540e\u624d\u80fd\u5237\u65b0\uff0c\u4ee5\u4fdd\u8bc1 uncache \u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u5b8c\u6574\u5bf9\u5e94</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#33-3","title":"3.3 \u7279\u6027 3\uff1a\u5f02\u5e38\u60c5\u51b5","text":"<p>UncacheEntry \u5904\u7406\u7684\u4e3b\u8981\u5f02\u5e38\u60c5\u51b5\u662f\u603b\u7ebf\u8fd4\u56de\u7684\u9519\u8bef<sup>1</sup>\uff1a</p> <pre><code>val nderr = RegInit(false.B)  // \u786c\u4ef6\u9519\u8bef\u6807\u5fd7\n\nwhen (io.uncache.resp.fire) {\n  uncacheData := io.uncache.resp.bits.data\n  nderr := io.uncache.resp.bits.nderr\n}\n\n// \u8bbe\u7f6e\u5f02\u5e38\u5411\u91cf\nio.mmioOut.bits.uop.exceptionVec(hardwareError) := nderr\nio.exception.valid := writeback\nio.exception.bits := req\nio.exception.bits.uop.exceptionVec(loadAccessFault) := nderr\n</code></pre> <p>\u5f53\u603b\u7ebf\u8fd4\u56de corrupt \u6216 denied \u65f6\uff1a 1. \u8bbe\u7f6e\u786c\u4ef6\u9519\u8bef\u6807\u5fd7 (nderr) 2. \u5728\u5199\u56de\u9636\u6bb5\u5c06\u5f02\u5e38\u4fe1\u606f\u6dfb\u52a0\u5230\u5f02\u5e38\u5411\u91cf 3. \u901a\u8fc7\u5f02\u5e38\u63a5\u53e3\u62a5\u544a\u7ed9\u5904\u7406\u5668</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#4","title":"4. \u8be6\u7ec6\u6570\u636e\u6d41\u5206\u6790","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#41-loadunit-loadqueueuncache","title":"4.1 \u5165\u961f\u6570\u636e\u6d41 (LoadUnit \u2192 LoadQueueUncache)","text":"<p>LoadQueueUncache \u7684\u5165\u961f\u6570\u636e\u6d41\u662f\u4e00\u4e2a\u591a\u9636\u6bb5\u6d41\u6c34\u7ebf\u5904\u7406\u8fc7\u7a0b\uff0c\u5177\u4f53\u5982\u4e0b<sup>1</sup>\uff1a</p> <pre><code>// s1: \u5bf9\u8f93\u5165\u8bf7\u6c42\u6392\u5e8f\nval s1_sortedVec = HwSort(VecInit(io.req.map { case x =&gt; DataWithPtr(x.valid, x.bits, x.bits.uop.robIdx) }))\nval s1_req = VecInit(s1_sortedVec.map(_.bits))\nval s1_valid = VecInit(s1_sortedVec.map(_.valid))\n\n// s2: \u68c0\u67e5\u8bf7\u6c42\u6709\u6548\u6027\nval s2_req = (0 until LoadPipelineWidth).map(i =&gt; {RegEnable(s1_req(i), s1_valid(i))})\nval s2_valid = (0 until LoadPipelineWidth).map(i =&gt; {\n  RegNext(s1_valid(i)) &amp;&amp;\n  !s2_req(i).uop.robIdx.needFlush(RegNext(io.redirect)) &amp;&amp;\n  !s2_req(i).uop.robIdx.needFlush(io.redirect)\n})\nval s2_has_exception = s2_req.map(x =&gt; ExceptionNO.selectByFu(x.uop.exceptionVec, LduCfg).asUInt.orR)\nval s2_need_replay = s2_req.map(_.rep_info.need_rep)\n\n// \u786e\u5b9a\u662f\u5426\u9700\u8981\u5165\u961f\nfor (w &lt;- 0 until LoadPipelineWidth) {\n  s2_enqueue(w) := s2_valid(w) &amp;&amp; !s2_has_exception(w) &amp;&amp; !s2_need_replay(w) &amp;&amp; (s2_req(w).mmio || s2_req(w).nc)\n}\n</code></pre> <p>\u6570\u636e\u6d41\u6b65\u9aa4\uff1a 1. \u521d\u59cb\u8f93\u5165\uff1a     - \u6765\u81ea\u5404\u4e2a LoadUnit \u7684\u8bf7\u6c42 (<code>io.req</code>) \u5305\u542b\u6307\u4ee4\u4fe1\u606f\u3001\u5730\u5740\u3001MMIO/NC \u6807\u5fd7\u7b49     - \u6bcf\u4e2a\u8bf7\u6c42\u90fd\u6709\u6548\u4f4d (<code>valid</code>) \u548c\u8bf7\u6c42\u6570\u636e (<code>bits</code>)</p> <ol> <li> <p>s1 \u9636\u6bb5\u6392\u5e8f\uff1a</p> <ul> <li>\u5bf9\u8f93\u5165\u8bf7\u6c42\u57fa\u4e8e ROB \u7d22\u5f15\u6392\u5e8f\uff0c\u786e\u4fdd\u5904\u7406\u6309\u7a0b\u5e8f\u987a\u5e8f\u8fdb\u884c</li> <li>\u6392\u5e8f\u7ed3\u679c\u5199\u5165 <code>s1_sortedVec</code>\uff0c\u63d0\u53d6\u6709\u6548\u4f4d (<code>s1_valid</code>) \u548c\u6570\u636e (<code>s1_req</code>)</li> </ul> </li> <li> <p>s1\u2192s2 \u5bc4\u5b58\uff1a</p> <ul> <li>\u6709\u6548\u8bf7\u6c42\u88ab\u5bc4\u5b58\u5230 s2 \u9636\u6bb5\u5bc4\u5b58\u5668 (<code>s2_req</code>)</li> <li>\u6709\u6548\u4f4d\u8003\u8651\u53ef\u80fd\u7684\u91cd\u5b9a\u5411\uff0c\u751f\u6210 <code>s2_valid</code></li> </ul> </li> <li> <p>s2 \u9636\u6bb5\u7b5b\u9009\uff1a</p> <ul> <li>\u68c0\u67e5\u5f02\u5e38\u72b6\u6001 (<code>s2_has_exception</code>)</li> <li>\u68c0\u67e5\u91cd\u653e\u9700\u6c42 (<code>s2_need_replay</code>)</li> <li>\u786e\u8ba4\u662f MMIO \u6216 NC \u8bf7\u6c42</li> <li>\u751f\u6210\u6700\u7ec8\u5165\u961f\u9700\u6c42 (<code>s2_enqueue</code>)</li> </ul> </li> <li> <p>\u7a7a\u95f4\u5206\u914d\uff1a    <pre><code>for (w &lt;- 0 until LoadPipelineWidth) {\n  val offset = PopCount(s2_enqueue.take(w))\n  s2_enqValidVec(w) := s2_enqueue(w) &amp;&amp; freeList.io.canAllocate(offset)\n  s2_enqIndexVec(w) := freeList.io.allocateSlot(offset)\n}\n\n// freeList\u771f\u6b63\u5206\u914d\nfor (w &lt;- 0 until LoadPipelineWidth) {\n  freeList.io.doAllocate(w) := s2_enqValidVec(w)\n}\n</code></pre></p> <ul> <li>\u8ba1\u7b97\u6bcf\u4e2a\u8bf7\u6c42\u7684\u504f\u79fb\u91cf\uff0c\u786e\u5b9a FreeList \u5206\u914d\u7684\u6761\u76ee\u7d22\u5f15</li> <li>\u53ea\u6709\u5f53 FreeList \u80fd\u591f\u5206\u914d\u7a7a\u95f4\u65f6\uff0c\u8bf7\u6c42\u624d\u80fd\u6709\u6548\u5165\u961f</li> </ul> </li> <li> <p>\u5199\u5165 UncacheEntry\uff1a    <pre><code>entries.zipWithIndex.foreach {\n  case (e, i) =&gt;\n    // \u5165\u961f\n    for (w &lt;- 0 until LoadPipelineWidth) {\n      when (s2_enqValidVec(w) &amp;&amp; (i.U === s2_enqIndexVec(w))) {\n        e.io.req.valid := true.B\n        e.io.req.bits := s2_req(w)\n      }\n    }\n}\n</code></pre></p> <ul> <li>\u6839\u636e\u5206\u914d\u7684\u7d22\u5f15\uff0c\u5c06\u8bf7\u6c42\u5199\u5165\u5bf9\u5e94\u7684 UncacheEntry</li> <li>\u8bbe\u7f6e UncacheEntry \u7684\u8bf7\u6c42\u6709\u6548\u4f4d\u548c\u6570\u636e</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#42-uncacheentry","title":"4.2 UncacheEntry \u5185\u90e8\u6570\u636e\u6d41","text":"<p>\u6bcf\u4e2a UncacheEntry \u5185\u90e8\u7ef4\u62a4\u8bf7\u6c42\u7684\u5b8c\u6574\u751f\u547d\u5468\u671f\uff0c\u6570\u636e\u5728\u72b6\u6001\u673a\u63a7\u5236\u4e0b\u6d41\u52a8<sup>1</sup>\uff1a</p> <pre><code>// \u5173\u952e\u5bc4\u5b58\u5668\nval req_valid = RegInit(false.B)    // \u6761\u76ee\u662f\u5426\u6709\u6548\nval req = Reg(new LqWriteBundle)    // \u8bf7\u6c42\u5185\u5bb9\nval slaveAccept = RegInit(false.B)  // \u662f\u5426\u88ab Uncache \u63a5\u53d7\nval slaveId = Reg(UInt(UncacheBufferIndexWidth.W)) // Uncache \u5206\u914d\u7684 ID\nval uncacheState = RegInit(s_idle)  // \u72b6\u6001\u673a\u72b6\u6001\nval uncacheData = Reg(io.uncache.resp.bits.data.cloneType) // \u54cd\u5e94\u6570\u636e\nval nderr = RegInit(false.B)        // \u786c\u4ef6\u9519\u8bef\u6807\u5fd7\n</code></pre> <p>\u6570\u636e\u6d41\u8f6c\u8be6\u7ec6\u8fc7\u7a0b\uff1a</p> <ol> <li> <p>\u8bf7\u6c42\u63a5\u6536\u4e0e\u5b58\u50a8\uff1a    <pre><code>when (io.req.valid) {\n  req_valid := true.B\n  slaveAccept := false.B\n  req := io.req.bits\n  nderr := false.B\n}\n</code></pre></p> <ul> <li>\u63a5\u6536\u8bf7\u6c42\u65f6\uff0c\u8bbe\u7f6e <code>req_valid</code> \u5e76\u5b58\u50a8\u8bf7\u6c42\u5185\u5bb9</li> <li>\u521d\u59cb\u5316\u9519\u8bef\u6807\u5fd7\u548c\u63a5\u53d7\u72b6\u6001</li> </ul> </li> <li> <p>\u72b6\u6001\u8f6c\u6362\u4e0e\u5904\u7406\uff1a    <pre><code>switch (uncacheState) {\n  is (s_idle) {\n    when (needFlush) {\n      uncacheState := s_idle\n      flush := true.B\n    }.elsewhen (canSendReq) {\n      uncacheState := s_req\n    }\n  }\n\n  is (s_req) {\n    when(needFlush) {\n      uncacheState := s_idle\n      flush := true.B\n    }.elsewhen(io.uncache.req.fire) {\n      uncacheState := s_resp\n    }\n  }\n\n  is (s_resp) {\n    when (io.uncache.resp.fire) {\n      when (needFlush || needFlushReg) {\n        uncacheState := s_idle\n        flush := true.B\n      }.otherwise {\n        uncacheState := s_wait\n      }\n    }\n  }\n\n  is (s_wait) {\n    when (needFlush || writeback) {\n      uncacheState := s_idle\n      flush := true.B\n    }\n  }\n}\n</code></pre></p> <ul> <li><code>canSendReq</code> \u89e6\u53d1\u6761\u4ef6:<ul> <li>\u5bf9 MMIO: \u6307\u4ee4\u5fc5\u987b\u5230\u8fbe ROB \u5934\u90e8 (<code>pendingld &amp;&amp; req.uop.robIdx === pendingPtr</code>)</li> <li>\u5bf9 NC: \u53ea\u9700 <code>req_valid</code> \u4e3a\u771f</li> </ul> </li> </ul> </li> <li> <p>ID \u54cd\u5e94\u5904\u7406\uff1a    <pre><code>when(slaveAck) {\n  slaveAccept := true.B\n  slaveId := io.uncache.idResp.bits.sid\n}\n</code></pre></p> <ul> <li>\u6536\u5230 Uncache \u7684 ID \u54cd\u5e94\u65f6\uff0c\u8bb0\u5f55 <code>slaveId</code> \u5e76\u8bbe\u7f6e <code>slaveAccept</code></li> </ul> </li> <li> <p>\u6570\u636e\u54cd\u5e94\u5904\u7406\uff1a    <pre><code>when (io.uncache.resp.fire) {\n  uncacheData := io.uncache.resp.bits.data\n  nderr := io.uncache.resp.bits.nderr\n}\n</code></pre></p> <ul> <li>\u63a5\u6536 Uncache \u8fd4\u56de\u7684\u6570\u636e\u5e76\u5b58\u50a8</li> <li>\u8bb0\u5f55\u53ef\u80fd\u7684\u786c\u4ef6\u9519\u8bef\u72b6\u6001</li> </ul> </li> <li> <p>\u7ed3\u679c\u5904\u7406\u4e0e\u683c\u5f0f\u5316\uff1a    <pre><code>val selUop = req.uop\nval func = selUop.fuOpType\nval raddr = req.paddr\nval rdataSel = LookupTree(raddr(2, 0), List(\n  \"b000\".U -&gt; uncacheData(63,  0),\n  // ... \u5176\u4ed6\u5b57\u8282\u504f\u79fb\u9009\u62e9\n))\nval rdataPartialLoad = rdataHelper(selUop, rdataSel)\n</code></pre></p> <ul> <li>\u6839\u636e\u5730\u5740\u7684\u4f4e3\u4f4d\u9009\u62e9\u6570\u636e\u5b57\u8282</li> <li>\u6839\u636e\u6307\u4ee4\u7c7b\u578b\u5904\u7406\u6570\u636e\uff08\u7b26\u53f7\u6269\u5c55\u3001\u5b57\u8282\u9009\u62e9\u7b49\uff09</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#43-uncache","title":"4.3 Uncache \u4ea4\u4e92\u6570\u636e\u6d41","text":"<p>\u4e0e Uncache \u6a21\u5757\u7684\u4ea4\u4e92\u662f LoadQueueUncache \u7684\u6838\u5fc3\u6570\u636e\u6d41\uff0c\u5206\u4e3a\u8bf7\u6c42\u53d1\u9001\u548c\u54cd\u5e94\u5904\u7406\u4e24\u90e8\u5206<sup>1</sup>\uff1a</p> <ol> <li> <p>\u8bf7\u6c42\u901a\u9053\u9009\u62e9\uff1a    <pre><code>val uncacheReq = Wire(DecoupledIO(io.uncache.req.bits.cloneType))\nval mmioSelect = entries.map(e =&gt; e.io.mmioSelect).reduce(_ || _)\nval mmioReq = Wire(DecoupledIO(io.uncache.req.bits.cloneType))\nval ncReqArb = Module(new RRArbiterInit(io.uncache.req.bits.cloneType, LoadUncacheBufferSize))\n\nwhen(mmioSelect) {\n  uncacheReq &lt;&gt; mmioReq\n}.otherwise {\n  uncacheReq &lt;&gt; ncReqArb.io.out\n}\n\n// \u8fde\u63a5\u5230\u8f93\u51fa\nAddPipelineReg(uncacheReq, io.uncache.req, false.B)\n</code></pre></p> <ul> <li>\u4f18\u5148\u5904\u7406 MMIO \u8bf7\u6c42\uff0c\u7136\u540e\u5904\u7406 NC \u8bf7\u6c42</li> <li>\u4f7f\u7528\u8f6e\u8be2\u4ef2\u88c1\u5668 (RRArbiter) \u9009\u62e9 NC \u8bf7\u6c42</li> <li>\u8bf7\u6c42\u901a\u8fc7\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u53d1\u9001\u5230 Uncache</li> </ul> </li> <li> <p>Entry \u8bf7\u6c42\u751f\u6210\uff1a    <pre><code>io.uncache.req.valid := uncacheState === s_req &amp;&amp; !needFlush\nio.uncache.req.bits.cmd := MemoryOpConstants.M_XRD\nio.uncache.req.bits.addr := req.paddr\nio.uncache.req.bits.vaddr := req.vaddr\nio.uncache.req.bits.mask := Mux(req.paddr(3), req.mask(15, 8), req.mask(7, 0))\nio.uncache.req.bits.id := entryIndex.U\nio.uncache.req.bits.nc := req.nc\n</code></pre></p> <ul> <li>\u5f53 UncacheEntry \u5904\u4e8e s_req \u72b6\u6001\u4e14\u672a\u88ab\u5237\u65b0\u65f6\uff0c\u751f\u6210\u6709\u6548\u8bf7\u6c42</li> <li>\u5305\u542b\u7269\u7406\u5730\u5740\u3001\u865a\u62df\u5730\u5740\u3001\u63a9\u7801\u3001\u8bf7\u6c42 ID \u7b49\u4fe1\u606f</li> <li>\u533a\u5206 MMIO (nc=false) \u548c NC (nc=true)</li> </ul> </li> <li> <p>ID \u54cd\u5e94\u8def\u7531\uff1a    <pre><code>// \u5bf9\u6bcf\u4e2a Entry\nwhen(i.U === io.uncache.idResp.bits.mid) {\n  e.io.uncache.idResp &lt;&gt; io.uncache.idResp\n}\n</code></pre></p> <ul> <li>\u6839\u636e\u54cd\u5e94\u4e2d\u7684 mid (\u6e90 ID) \u5c06 idResp \u8def\u7531\u5230\u5bf9\u5e94\u7684 UncacheEntry</li> </ul> </li> <li> <p>\u6570\u636e\u54cd\u5e94\u8def\u7531\uff1a    <pre><code>// \u5bf9\u6bcf\u4e2a Entry\nwhen (e.io.slaveId.valid &amp;&amp; e.io.slaveId.bits === io.uncache.resp.bits.id) {\n  e.io.uncache.resp &lt;&gt; io.uncache.resp\n}\n</code></pre></p> <ul> <li>\u6839\u636e\u54cd\u5e94\u4e2d\u7684 id \u4e0e Entry \u5b58\u50a8\u7684 slaveId \u6bd4\u8f83</li> <li>\u5c06\u6570\u636e\u54cd\u5e94\u8def\u7531\u5230\u5339\u914d\u7684 UncacheEntry</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#44-loadqueueuncache-loadunit","title":"4.4 \u7ed3\u679c\u56de\u5199\u6570\u636e\u6d41 (LoadQueueUncache \u2192 LoadUnit)","text":"<p>\u5b8c\u6210\u5904\u7406\u540e\uff0c\u7ed3\u679c\u9700\u8981\u56de\u5199\u5230 LoadUnit\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u533a\u5206\u4e86 MMIO \u548c NC \u4e24\u79cd\u8def\u5f84<sup>1</sup>\uff1a</p> <ol> <li> <p>MMIO \u7ed3\u679c\u51c6\u5907\uff1a    <pre><code>io.mmioOut.valid := (uncacheState === s_wait) &amp;&amp; !needFlush\nio.mmioOut.bits.uop := selUop\nio.mmioOut.bits.uop.lqIdx := req.uop.lqIdx\nio.mmioOut.bits.uop.exceptionVec(hardwareError) := nderr\nio.mmioOut.bits.data := rdataPartialLoad\nio.mmioOut.bits.debug.isMMIO := true.B\nio.mmioOut.bits.debug.paddr := req.paddr\nio.mmioOut.bits.debug.vaddr := req.vaddr\nio.mmioRawData.lqData := uncacheData\nio.mmioRawData.uop := req.uop\nio.mmioRawData.addrOffset := req.paddr\n</code></pre></p> <ul> <li>\u5f53 UncacheEntry \u5904\u4e8e s_wait \u72b6\u6001\u4e14\u672a\u88ab\u5237\u65b0\u65f6\uff0c\u51c6\u5907\u56de\u5199\u6570\u636e</li> <li>\u5305\u542b\u5904\u7406\u540e\u7684\u6570\u636e\u3001uop \u4fe1\u606f\u3001\u5730\u5740\u4fe1\u606f\u7b49</li> <li>\u8bbe\u7f6e\u5f02\u5e38\u72b6\u6001\uff08\u5982\u6709\uff09</li> </ul> </li> <li> <p>NC \u7ed3\u679c\u51c6\u5907\uff1a    <pre><code>io.ncOut.valid := (uncacheState === s_wait) &amp;&amp; !needFlush\nio.ncOut.bits.uop := selUop\nio.ncOut.bits.uop.lqIdx := req.uop.lqIdx\nio.ncOut.bits.uop.exceptionVec(hardwareError) := nderr\nio.ncOut.bits.data := rdataPartialLoad\nio.ncOut.bits.paddr := req.paddr\nio.ncOut.bits.vaddr := req.vaddr\nio.ncOut.bits.nc := true.B\nio.ncOut.bits.mask := Mux(req.paddr(3), req.mask(15, 8), req.mask(7, 0))\n</code></pre></p> <ul> <li>\u4e0e MMIO \u7c7b\u4f3c\uff0c\u4f46\u8def\u5f84\u548c\u90e8\u5206\u5b57\u6bb5\u6709\u6240\u4e0d\u540c</li> <li>\u660e\u786e\u6807\u8bb0 nc=true</li> </ul> </li> <li> <p>\u8f93\u51fa\u7aef\u53e3\u5206\u914d\uff1a    <pre><code>// \u5bf9 MMIO\nAddPipelineReg(mmioOut, io.mmioOut(UncacheWBPort), false.B)\nio.mmioRawData(UncacheWBPort) := RegEnable(mmioRawData, mmioOut.fire)\n\n// \u5bf9 NC\uff08\u9488\u5bf9\u591a\u7aef\u53e3\uff09\n(0 until NC_WB_MOD).map { w =&gt;\n  val (idx, ncOutValid) = PriorityEncoderWithFlag(ncOutValidVecRem(w))\n  val port = NCWBPorts(w)\n  when((i.U === idx) &amp;&amp; ncOutValid) {\n    ncOut(port).valid := ncOutValid\n    ncOut(port).bits := e.io.ncOut.bits\n    e.io.ncOut.ready := ncOut(port).ready\n  }\n}\n\n// \u6d41\u6c34\u7ebf\u6ce8\u518c\n(0 until LoadPipelineWidth).foreach { i =&gt; \n  AddPipelineReg(ncOut(i), io.ncOut(i), false.B) \n}\n</code></pre></p> <ul> <li>MMIO \u56fa\u5b9a\u4f7f\u7528 UncacheWBPort (=2) \u7aef\u53e3</li> <li>NC \u53ef\u4f7f\u7528 NCWBPorts \u4e2d\u5b9a\u4e49\u7684\u591a\u4e2a\u7aef\u53e3</li> <li>\u901a\u8fc7\u4f18\u5148\u7f16\u7801\u5668\u9009\u62e9\u8981\u56de\u5199\u7684\u6761\u76ee</li> <li>\u8f93\u51fa\u7ecf\u8fc7\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\uff0c\u786e\u4fdd\u65f6\u5e8f\u7a33\u5b9a</li> </ul> </li> <li> <p>\u5b8c\u6210\u540e\u91ca\u653e\uff1a    <pre><code>when ((e.io.mmioSelect &amp;&amp; e.io.mmioOut.fire) || e.io.ncOut.fire || e.io.flush) {\n  freeMaskVec(i) := true.B\n}\n\nfreeList.io.free := freeMaskVec.asUInt\n</code></pre></p> <ul> <li>\u5f53\u56de\u5199\u6210\u529f\u6216\u6761\u76ee\u88ab\u5237\u65b0\u65f6\uff0c\u6807\u8bb0\u4e3a\u53ef\u91ca\u653e</li> <li>\u5c06\u91ca\u653e\u63a9\u7801\u4f20\u9012\u7ed9 FreeList\uff0c\u5b8c\u6210\u8d44\u6e90\u56de\u6536</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#45","title":"4.5 \u8d44\u6e90\u6ee1\u56de\u6eda\u5904\u7406\u8be6\u7ec6\u6d41\u7a0b","text":"<p>\u5f53 LoadQueueUncache \u8d44\u6e90\u4e0d\u8db3\u65f6\uff0c\u5b8c\u6574\u7684\u56de\u6eda\u751f\u6210\u6d41\u7a0b<sup>1</sup>\uff1a</p> <ol> <li> <p>\u8bc6\u522b\u53d7\u963b\u8bf7\u6c42\uff1a    <pre><code>val reqNeedCheck = VecInit((0 until LoadPipelineWidth).map(w =&gt;\n  s2_enqueue(w) &amp;&amp; !s2_enqValidVec(w)\n))\n</code></pre></p> <ul> <li>\u627e\u51fa\u6240\u6709\u9700\u8981\u5165\u961f\u4f46\u65e0\u6cd5\u5206\u914d\u7a7a\u95f4\u7684\u8bf7\u6c42</li> </ul> </li> <li> <p>\u6784\u5efa\u56de\u6eda\u8bf7\u6c42\uff1a    <pre><code>val allRedirect = (0 until LoadPipelineWidth).map(i =&gt; {\n  val redirect = Wire(Valid(new Redirect))\n  redirect.valid := reqNeedCheck(i)\n  redirect.bits.robIdx := reqSelUops(i).robIdx\n  redirect.bits.ftqIdx := reqSelUops(i).ftqPtr\n  redirect.bits.ftqOffset := reqSelUops(i).ftqOffset\n  redirect.bits.level := RedirectLevel.flush\n  redirect.bits.cfiUpdate.target := reqSelUops(i).pc\n  // \u5176\u4ed6\u5b57\u6bb5...\n  redirect\n})\n</code></pre></p> <ul> <li>\u4e3a\u6bcf\u4e2a\u53d7\u963b\u8bf7\u6c42\u521b\u5efa\u6f5c\u5728\u7684\u56de\u6eda\u8bf7\u6c42</li> <li>\u5305\u542b\u5fc5\u8981\u7684\u91cd\u5b9a\u5411\u4fe1\u606f\uff1aROB \u7d22\u5f15\u3001FTQ \u7d22\u5f15\u548c\u504f\u79fb\u7b49</li> </ul> </li> <li> <p>\u9009\u62e9\u6700\u8001\u8bf7\u6c42\uff1a</p> <ul> <li>\u901a\u8fc7\u6bd4\u8f83 ROB \u7d22\u5f15\u627e\u51fa\u6700\u8001\u7684\u8bf7\u6c42</li> <li>\u751f\u6210\u4e00\u4e2a one-hot \u5411\u91cf\uff0c\u8868\u793a\u5e94\u9009\u62e9\u54ea\u4e2a\u8bf7\u6c42</li> <li>\u4f7f\u7528 Mux1H \u9009\u62e9\u6700\u7ec8\u7684\u56de\u6eda\u8bf7\u6c42</li> </ul> </li> <li> <p>\u9a8c\u8bc1\u4e0e\u8f93\u51fa\uff1a    <pre><code>io.rollback.valid := GatedValidRegNext(oldestRedirect.valid &amp;&amp;\n                    !oldestRedirect.bits.robIdx.needFlush(io.redirect) &amp;&amp;\n                    !oldestRedirect.bits.robIdx.needFlush(lastCycleRedirect) &amp;&amp;\n                    !oldestRedirect.bits.robIdx.needFlush(lastLastCycleRedirect))\nio.rollback.bits := RegEnable(oldestRedirect.bits, oldestRedirect.valid)\n</code></pre></p> <ul> <li>\u4fdd\u5b58\u6700\u8fd1\u4e24\u4e2a\u5468\u671f\u7684\u91cd\u5b9a\u5411\u4fe1\u606f</li> <li>\u786e\u4fdd\u9009\u4e2d\u7684\u8bf7\u6c42\u672a\u88ab\u8fd9\u4e9b\u91cd\u5b9a\u5411\u5237\u65b0</li> <li>\u5c06\u9a8c\u8bc1\u901a\u8fc7\u7684\u56de\u6eda\u8bf7\u6c42\u5728\u4e0b\u4e00\u5468\u671f\u8f93\u51fa</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#46-mmio","title":"4.6 \u5b8c\u6574\u6570\u636e\u6d41\u793a\u4f8b\uff1aMMIO \u52a0\u8f7d\u6307\u4ee4","text":"<p>\u4ee5\u4e00\u4e2a MMIO \u52a0\u8f7d\u6307\u4ee4\u4e3a\u4f8b\uff0c\u5b8c\u6574\u6570\u636e\u6d41\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u52a0\u8f7d\u5355\u5143\u68c0\u6d4b\u4e0e\u53d1\u9001\uff1a</p> <ul> <li>\u52a0\u8f7d\u5355\u5143\u6267\u884c <code>LD x5, 0x10000000</code> \u6307\u4ee4\uff0c\u5730\u5740\u6620\u5c04\u5230\u8bbe\u5907\u5bc4\u5b58\u5668</li> <li>\u68c0\u6d4b\u5230 MMIO \u5c5e\u6027\uff0c\u8bbe\u7f6e <code>mmio=true, nc=false</code></li> <li>\u8bf7\u6c42\u901a\u8fc7 <code>io.req(w)</code> \u53d1\u9001\u5230 LoadQueueUncache</li> </ul> </li> <li> <p>LoadQueueUncache \u5165\u961f\u5904\u7406\uff1a</p> <ul> <li>s1 \u9636\u6bb5\u5bf9\u8bf7\u6c42\u6309 ROB \u7d22\u5f15\u6392\u5e8f</li> <li>s2 \u9636\u6bb5\u9a8c\u8bc1\u6709\u6548\u6027\uff0c\u786e\u8ba4\u4e3a MMIO \u8bf7\u6c42</li> <li>\u4ece FreeList \u5206\u914d\u6761\u76ee\u53f7\uff08\u4f8b\u5982 3\uff09</li> <li>\u5c06\u8bf7\u6c42\u5199\u5165 UncacheEntry(3)</li> </ul> </li> <li> <p>\u7b49\u5f85 ROB \u5934\u90e8\uff1a</p> <ul> <li>UncacheEntry(3) \u5904\u4e8e s_idle \u72b6\u6001\uff0c\u7b49\u5f85\u6307\u4ee4\u5230\u8fbe ROB \u5934\u90e8</li> <li>\u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\uff0c\u72b6\u6001\u53d8\u4e3a s_req</li> </ul> </li> <li> <p>\u8bf7\u6c42\u53d1\u9001\u5230 Uncache\uff1a</p> <ul> <li>UncacheEntry(3) \u88ab\u9009\u4e2d\u53d1\u9001\u8bf7\u6c42</li> <li>\u901a\u8fc7\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u53d1\u9001\u5230 Uncache\uff0c\u5305\u542b mid=3</li> </ul> </li> <li> <p>\u63a5\u6536 ID \u54cd\u5e94\uff1a</p> <ul> <li>Uncache \u8fd4\u56de ID \u54cd\u5e94\uff0c\u5305\u542b sid=7</li> <li>UncacheEntry(3) \u5b58\u50a8 slaveId \u5e76\u8fdb\u5165 s_resp \u72b6\u6001</li> </ul> </li> <li> <p>\u7b49\u5f85\u6570\u636e\u54cd\u5e94\uff1a</p> <ul> <li>Uncache \u6267\u884c\u603b\u7ebf\u8bbf\u95ee\uff0c\u83b7\u53d6\u8bbe\u5907\u5bc4\u5b58\u5668\u6570\u636e</li> <li>\u8fd4\u56de\u6570\u636e\u54cd\u5e94\uff0cUncacheEntry(3) \u63a5\u6536\u6570\u636e\u5e76\u8fdb\u5165 s_wait \u72b6\u6001</li> </ul> </li> <li> <p>\u7ed3\u679c\u5904\u7406\u4e0e\u56de\u5199\uff1a</p> <ul> <li>UncacheEntry(3) \u51c6\u5907\u56de\u5199\u6570\u636e</li> <li>\u6570\u636e\u901a\u8fc7 <code>io.mmioOut(UncacheWBPort)</code> \u53d1\u9001\u5230 LoadUnit</li> </ul> </li> <li> <p>\u5b8c\u6210\u4e0e\u91ca\u653e\uff1a</p> <ul> <li>\u56de\u5199\u6210\u529f\u540e\uff0c\u6807\u8bb0 UncacheEntry(3) \u4e3a\u53ef\u91ca\u653e</li> <li>FreeList \u56de\u6536\u6761\u76ee\uff0cUncacheEntry(3) \u8fd4\u56de s_idle \u72b6\u6001</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#5","title":"5. \u63a5\u53e3\u65f6\u5e8f","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#51","title":"5.1 \u5165\u961f\u63a5\u53e3\u65f6\u5e8f\u5b9e\u4f8b","text":"<p>\u5165\u961f\u65f6\u5e8f\u5c55\u793a\u4e86\u8bf7\u6c42\u5206\u914d\u6761\u76ee\u7684\u8fc7\u7a0b<sup>1</sup>\uff1a - \u8bf7\u6c42\u7ecf\u8fc7\u6392\u5e8f\u540e\u6309\u987a\u5e8f\u5206\u914d\u7a7a\u95f2\u6761\u76ee - \u5f53\u961f\u5217\u6ee1\u65f6\uff0c\u65e0\u6cd5\u5206\u914d\u6761\u76ee\u7684\u8bf7\u6c42\u4f1a\u89e6\u53d1\u56de\u6eda - \u56de\u6eda\u8bf7\u6c42\u5728\u6392\u5e8f\u540e\u7684\u4e0b\u4e24\u4e2a\u5468\u671f\u4ea7\u751f</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#52","title":"5.2 \u51fa\u961f\u63a5\u53e3\u65f6\u5e8f\u5b9e\u4f8b","text":"<p>\u51fa\u961f\u65f6\u5e8f\u5c55\u793a\u4e86\u7ed3\u679c\u56de\u5199\u7684\u8fc7\u7a0b<sup>1</sup>\uff1a - \u7b2c\u4e00\u4e2a\u5468\u671f\u9009\u51fa\u5199\u56de\u9879 - \u66f4\u65b0 freeList \u5e76\u5bc4\u5b58\u4e00\u4e2a\u5468\u671f - \u4e0b\u4e00\u4e2a\u5468\u671f\u5c06\u7ed3\u679c\u5199\u56de LoadUnit</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#53-uncache","title":"5.3 uncache \u63a5\u53e3\u65f6\u5e8f\u5b9e\u4f8b","text":"<p>uncache \u4ea4\u4e92\u65f6\u5e8f\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5<sup>1</sup>\uff1a</p> <ol> <li> <p>\u65e0\u672a\u5b8c\u6210\u8bf7\u6c42\uff1a</p> <ul> <li>\u6bcf\u6bb5\u53ea\u80fd\u53d1\u51fa\u4e00\u4e2a\u8bf7\u6c42\uff0c\u76f4\u5230\u6536\u5230\u56de\u590d</li> <li>\u8bf7\u6c42\u53d1\u51fa\u540e\uff0cUncache \u4e0b\u4e00\u5468\u671f\u8fd4\u56de idResp</li> <li>\u7ecf\u8fc7\u603b\u7ebf\u8bbf\u95ee\u540e\uff0c\u6700\u7ec8\u6536\u5230\u8bbf\u95ee\u7ed3\u679c</li> </ul> </li> <li> <p>\u6709\u672a\u5b8c\u6210\u8bf7\u6c42\uff1a</p> <ul> <li>\u53ef\u4ee5\u8fde\u7eed\u53d1\u51fa\u591a\u4e2a\u8bf7\u6c42</li> <li>\u8bf7\u6c42\u53ef\u80fd\u4f1a\u56e0\u4e3a Uncache \u6ee1\u800c\u88ab\u4e2d\u95f4\u5bc4\u5b58\u5668\u6682\u5b58</li> <li>\u591a\u4e2a\u8bf7\u6c42\u53ef\u80fd\u4f1a\u5728\u4e0d\u540c\u65f6\u95f4\u6536\u5230\u56de\u590d</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#6","title":"6. \u4e0e\u7cfb\u7edf\u5176\u4ed6\u6a21\u5757\u7684\u4ea4\u4e92","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#61-loadqueue","title":"6.1 \u4e0e LoadQueue \u7cfb\u7edf\u4ea4\u4e92","text":"<p>LoadQueueUncache \u4f5c\u4e3a LoadQueue \u7684\u5b50\u6a21\u5757\uff0c\u4e0e\u5176\u4ed6\u7ec4\u4ef6\u534f\u540c\u5de5\u4f5c<sup>1</sup>\uff1a</p> <pre><code>// \u5728 LoadQueue \u4e2d\u8fde\u63a5 LoadQueueUncache\nuncacheBuffer.io.redirect &lt;&gt; io.redirect\nuncacheBuffer.io.mmioOut &lt;&gt; io.ldout\nuncacheBuffer.io.ncOut &lt;&gt; io.ncOut\nuncacheBuffer.io.mmioRawData &lt;&gt; io.ld_raw_data\nuncacheBuffer.io.rob &lt;&gt; io.rob\nuncacheBuffer.io.uncache &lt;&gt; io.uncache\n\nfor ((buff, w) &lt;- uncacheBuffer.io.req.zipWithIndex) {\n  val ldinBits = io.ldu.ldin(w).bits\n  buff.valid := io.ldu.ldin(w).valid &amp;&amp; !ldinBits.nc_with_data\n  buff.bits := ldinBits\n}\n\nio.nack_rollback(0) := uncacheBuffer.io.rollback\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#62-rob","title":"6.2 \u4e0e ROB \u534f\u4f5c","text":"<p>MMIO \u8bf7\u6c42\u9700\u8981\u4e0e ROB \u534f\u8c03\uff0c\u786e\u4fdd\u6309\u7a0b\u5e8f\u987a\u5e8f\u7cbe\u786e\u6267\u884c<sup>1</sup>\uff1a</p> <pre><code>val pendingld = GatedValidRegNext(io.rob.pendingMMIOld)\nval pendingPtr = GatedRegNext(io.rob.pendingPtr)\nval canSendReq = req_valid &amp;&amp; !needFlush &amp;&amp; Mux(\n  req.nc, true.B,\n  pendingld &amp;&amp; req.uop.robIdx === pendingPtr\n)\n</code></pre> <p>\u5173\u952e\u4ea4\u4e92\u70b9\uff1a - MMIO \u8bf7\u6c42\u7b49\u5f85\u6307\u4ee4\u5230\u8fbe ROB \u5934\u90e8 - NC \u8bf7\u6c42\u65e0\u9700\u7b49\u5f85 ROB \u5934\u90e8 - \u5411 ROB \u62a5\u544a MMIO \u72b6\u6001 - \u5904\u7406\u53ef\u80fd\u7684\u5f02\u5e38</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#63-uncache","title":"6.3 \u4e0e Uncache \u6a21\u5757\u4ea4\u4e92","text":"<p>\u4e0e Uncache \u6a21\u5757\u7684\u4ea4\u4e92\u5305\u62ec\u4e09\u4e2a\u5173\u952e\u63a5\u53e3<sup>1</sup>\uff1a</p> <ol> <li>req \u63a5\u53e3\uff1a\u53d1\u9001\u8bf7\u6c42\u5230</li> <li>idResp \u63a5\u53e3\uff1a\u63a5\u6536 Uncache \u5206\u914d\u7684 ID</li> <li>resp \u63a5\u53e3\uff1a\u63a5\u6536 Uncache \u8bbf\u95ee\u7ed3\u679c</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#7","title":"7. \u6027\u80fd\u76d1\u63a7","text":"<p>LoadQueueUncache \u5b9e\u73b0\u4e86\u4e30\u5bcc\u7684\u6027\u80fd\u8ba1\u6570\u5668\u4ee5\u76d1\u63a7\u7cfb\u7edf\u884c\u4e3a<sup>1</sup>\uff1a</p> <pre><code>XSPerfAccumulate(\"mmio_uncache_req\", io.uncache.req.fire &amp;&amp; !io.uncache.req.bits.nc)\nXSPerfAccumulate(\"mmio_writeback_success\", io.mmioOut(0).fire)\nXSPerfAccumulate(\"mmio_writeback_blocked\", io.mmioOut(0).valid &amp;&amp; !io.mmioOut(0).ready)\nXSPerfAccumulate(\"nc_uncache_req\", io.uncache.req.fire &amp;&amp; io.uncache.req.bits.nc)\nXSPerfAccumulate(\"nc_writeback_success\", io.ncOut(0).fire)\nXSPerfAccumulate(\"nc_writeback_blocked\", io.ncOut(0).valid &amp;&amp; !io.ncOut(0).ready)\nXSPerfAccumulate(\"uncache_full_rollback\", io.rollback.valid)\n</code></pre> <p>\u8fd9\u4e9b\u8ba1\u6570\u5668\u63d0\u4f9b\u4e86\u91cd\u8981\u7684\u6027\u80fd\u6307\u6807\uff1a - MMIO \u548c NC \u8bf7\u6c42\u6570\u91cf - \u56de\u5199\u6210\u529f\u7387\u548c\u963b\u585e\u60c5\u51b5 - \u56e0\u8d44\u6e90\u4e0d\u8db3\u5bfc\u81f4\u7684\u56de\u6eda\u6b21\u6570</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/load_queue_uncache/#8","title":"8. \u603b\u7ed3","text":"<p>LoadQueueUncache \u662f XiangShan \u5904\u7406\u5668 LSQ \u7cfb\u7edf\u4e2d\u5904\u7406\u975e\u7f13\u5b58\u5185\u5b58\u8bbf\u95ee\u7684\u4e13\u7528\u7ec4\u4ef6\u3002\u5b83\u901a\u8fc7\u5bf9 MMIO \u548c NC \u8bbf\u95ee\u7684\u7cbe\u786e\u7ba1\u7406\uff0c\u786e\u4fdd\u4e86\u8fd9\u4e9b\u7279\u6b8a\u5185\u5b58\u8bbf\u95ee\u80fd\u591f\u6309\u7167\u7a0b\u5e8f\u8981\u6c42\u6b63\u786e\u6267\u884c\u3002\u6838\u5fc3\u7279\u6027\u5305\u62ec\uff1a</p> <ol> <li>\u5206\u7ea7\u6d41\u6c34\u5165\u961f\uff1a\u6392\u5e8f\u548c\u6761\u4ef6\u68c0\u67e5\u786e\u4fdd\u8bf7\u6c42\u6309\u7a0b\u5e8f\u987a\u5e8f\u5904\u7406</li> <li>MMIO/NC \u533a\u5206\uff1aMMIO \u7b49\u5f85 ROB \u5934\u90e8\uff0cNC \u53ef\u7acb\u5373\u5904\u7406</li> <li>\u5b8c\u6574\u72b6\u6001\u673a\uff1a\u56db\u72b6\u6001\u8ddf\u8e2a\u8bf7\u6c42\u751f\u547d\u5468\u671f</li> <li>\u7cbe\u786e\u5f02\u5e38\u5904\u7406\uff1a\u6355\u83b7\u5e76\u62a5\u544a\u603b\u7ebf\u9519\u8bef</li> <li>\u8d44\u6e90\u4e0d\u8db3\u56de\u6eda\uff1a\u786e\u4fdd\u7cfb\u7edf\u5728\u8d44\u6e90\u53d7\u9650\u65f6\u4e0d\u4f1a\u6b7b\u9501</li> </ol> <p>\u5728\u4e71\u5e8f\u5904\u7406\u5668\u4e2d\uff0cLoadQueueUncache \u901a\u8fc7\u590d\u6742\u7684\u6570\u636e\u6d41\u5904\u7406\u673a\u5236\uff0c\u786e\u4fdd\u4e86\u975e\u7f13\u5b58\u5185\u5b58\u8bbf\u95ee\u7684\u6b63\u786e\u6027\u548c\u987a\u5e8f\u6027\uff0c\u4e3a\u7cfb\u7edf\u4e0e\u5916\u90e8\u8bbe\u5907\u7684\u4ea4\u4e92\u63d0\u4f9b\u4e86\u53ef\u9760\u7684\u652f\u6301\u3002</p> <ol> <li> <p>LoadQueueUncache - \u9999\u5c71\u5f00\u6e90\u5904\u7406\u5668\u8bbe\u8ba1\u6587\u6863 \u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq/","title":"Load Queue &amp; Store Queue","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/","title":"XiangShan LSQ \u5b66\u4e60\u8ba1\u5212\u6587\u6863","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_1","title":"\u4e00\u3001\u6982\u8ff0","text":"<p>XiangShan\u5904\u7406\u5668\u7684\u8bbf\u5b58\u5b50\u7cfb\u7edf\u4e2d\uff0cLSQ\uff08Load-Store Queue\uff09\u662f\u5904\u7406\u5668\u4e71\u5e8f\u6267\u884c\u4e2d\u8d1f\u8d23\u5904\u7406\u8bbf\u5b58\u6307\u4ee4\u91cd\u6392\u5e8f\u3001\u5185\u5b58\u4f9d\u8d56\u68c0\u67e5\u548c\u63d0\u4ea4\u7684\u5173\u952e\u6a21\u5757\u3002\u672c\u5b66\u4e60\u8ba1\u5212\u5c06\u7cfb\u7edf\u6027\u5730\u4ecb\u7ecdXiangShan LSQ\u76f8\u5173\u4ee3\u7801\u7ed3\u6784\u548c\u5de5\u4f5c\u539f\u7406\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#lsq","title":"\u4e8c\u3001LSQ\u67b6\u6784\u6982\u89c8","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#1","title":"1. \u603b\u4f53\u67b6\u6784","text":"<p>LSQ\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u6838\u5fc3\u7ec4\u4ef6\uff1a - VirtualLoadQueue: \u8ddf\u8e2aLoad\u6307\u4ee4\u6267\u884c\u72b6\u6001\u7684\u961f\u5217 - StoreQueue: \u8ddf\u8e2aStore\u6307\u4ee4\u6267\u884c\u72b6\u6001\u7684\u961f\u5217 - LoadQueueRAW: \u5199\u540e\u8bfb\u8fdd\u4f8b\u68c0\u67e5\u6a21\u5757 - LoadQueueRAR: \u8bfb\u540e\u8bfb\u8fdd\u4f8b\u68c0\u67e5\u6a21\u5757 - LoadQueueReplay: Load\u91cd\u53d1\u961f\u5217 - LSQWrapper: LSQ\u603b\u4f53\u5305\u88c5\u6a21\u5757\uff0c\u8d1f\u8d23\u5c06\u5404\u4e2a\u5b50\u6a21\u5757\u8fde\u63a5</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#2","title":"2. \u6574\u4f53\u6846\u56fe","text":"<pre><code>                  +-------------------+\n                  |                   |\n    Dispatch -----&gt;    LSQWrapper     &lt;----- ROB\n                  |                   |\n                  +-------------------+\n                     |        |\n            +--------+        +--------+\n            |                          |\n  +---------v----------+  +------------v--------+\n  |  VirtualLoadQueue  |  |     StoreQueue      |\n  +--------------------+  +---------------------+\n           |                         |\n           v                         v\n  +-------------------+    +-------------------+\n  | LoadQueueReplay   |    | Load/Store Units  |\n  | LoadQueueRAW      |    | SBuffer           |\n  | LoadQueueRAR      |    +-------------------+\n  | LoadQueueUncache  |\n  +-------------------+\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_2","title":"\u4e09\u3001\u5b66\u4e60\u987a\u5e8f","text":"<p>\u6839\u636e\u6a21\u5757\u7684\u4f9d\u8d56\u5173\u7cfb\u548c\u590d\u6742\u6027\uff0c\u5efa\u8bae\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u5b66\u4e60LSQ\u4ee3\u7801\uff1a</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_3","title":"\u7b2c\u4e00\u9636\u6bb5\uff1a\u57fa\u7840\u8bbe\u65bd\u548c\u6570\u636e\u7ed3\u6784","text":"<ol> <li>FreeList.scala</li> <li>\u529f\u80fd\uff1aLSQ\u4e2d\u4f7f\u7528\u7684\u7a7a\u95f2\u5217\u8868\u7ba1\u7406\u5668</li> <li>\u6838\u5fc3\u6982\u5ff5\uff1a\u7a7a\u95f2\u5217\u8868\u7ba1\u7406\u3001\u5206\u914d\u4e0e\u56de\u6536\u903b\u8f91</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#load","title":"\u7b2c\u4e8c\u9636\u6bb5\uff1aLoad\u961f\u5217\u7cfb\u7edf","text":"<ol> <li>VirtualLoadQueue.scala</li> <li>\u529f\u80fd\uff1a\u5b58\u50a8\u6240\u6709load\u6307\u4ee4\u7684MicroOp\uff0c\u7ef4\u62a4load\u6307\u4ee4\u4e4b\u95f4\u7684\u987a\u5e8f</li> <li> <p>\u6838\u5fc3\u6982\u5ff5\uff1a\u5165\u961f\u3001\u51fa\u961f\u3001\u63d0\u4ea4\u903b\u8f91</p> </li> <li> <p>LoadQueue.scala</p> </li> <li>\u529f\u80fd\uff1aLoad\u961f\u5217\u7684\u5177\u4f53\u5b9e\u73b0</li> <li> <p>\u6838\u5fc3\u6982\u5ff5\uff1aLoad\u961f\u5217\u7684\u64cd\u4f5c\u548c\u72b6\u6001\u7ba1\u7406</p> </li> <li> <p>LoadQueueData.scala</p> </li> <li>\u529f\u80fd\uff1aLoad\u961f\u5217\u7684\u6570\u636e\u5b58\u50a8\u7ed3\u6784</li> <li> <p>\u6838\u5fc3\u6982\u5ff5\uff1a\u6570\u636e\u5b58\u50a8\u548c\u8bbf\u95ee\u65b9\u5f0f</p> </li> <li> <p>LoadQueueRAW.scala</p> </li> <li>\u529f\u80fd\uff1a\u5199\u540e\u8bfb\u8fdd\u4f8b\u68c0\u67e5</li> <li> <p>\u6838\u5fc3\u6982\u5ff5\uff1a\u5185\u5b58\u4f9d\u8d56\u68c0\u67e5\u7b97\u6cd5</p> </li> <li> <p>LoadQueueRAR.scala</p> </li> <li>\u529f\u80fd\uff1a\u8bfb\u540e\u8bfb\u8fdd\u4f8b\u68c0\u67e5</li> <li> <p>\u6838\u5fc3\u6982\u5ff5\uff1a\u5185\u5b58\u987a\u5e8f\u4e00\u81f4\u6027\u7ef4\u62a4</p> </li> <li> <p>LoadQueueReplay.scala</p> </li> <li>\u529f\u80fd\uff1aLoad\u91cd\u53d1\u961f\u5217</li> <li> <p>\u6838\u5fc3\u6982\u5ff5\uff1a\u6307\u4ee4\u91cd\u53d1\u673a\u5236</p> </li> <li> <p>LoadQueueUncache.scala</p> </li> <li>\u529f\u80fd\uff1aUncache Load\u5904\u7406\u5355\u5143</li> <li> <p>\u6838\u5fc3\u6982\u5ff5\uff1a\u975e\u7f13\u5b58\u8bbf\u95ee\u5904\u7406</p> </li> <li> <p>LoadExceptionBuffer.scala</p> </li> <li>\u529f\u80fd\uff1aLoad\u5f02\u5e38\u7f13\u51b2</li> <li> <p>\u6838\u5fc3\u6982\u5ff5\uff1a\u5f02\u5e38\u5904\u7406\u673a\u5236</p> </li> <li> <p>LoadMisalignBuffer.scala</p> <ul> <li>\u529f\u80fd\uff1a\u975e\u5bf9\u9f50Load\u5904\u7406</li> <li>\u6838\u5fc3\u6982\u5ff5\uff1a\u5730\u5740\u975e\u5bf9\u9f50\u8bbf\u95ee\u5904\u7406</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#store","title":"\u7b2c\u4e09\u9636\u6bb5\uff1aStore\u961f\u5217\u7cfb\u7edf","text":"<ol> <li> <p>StoreQueue.scala</p> <ul> <li>\u529f\u80fd\uff1aStore\u961f\u5217\u7684\u5177\u4f53\u5b9e\u73b0</li> <li>\u6838\u5fc3\u6982\u5ff5\uff1aStore\u961f\u5217\u7684\u64cd\u4f5c\u548c\u72b6\u6001\u7ba1\u7406</li> </ul> </li> <li> <p>StoreQueueData.scala</p> <ul> <li>\u529f\u80fd\uff1aStore\u961f\u5217\u7684\u6570\u636e\u5b58\u50a8\u7ed3\u6784</li> <li>\u6838\u5fc3\u6982\u5ff5\uff1a\u6570\u636e\u5b58\u50a8\u548c\u8bbf\u95ee\u65b9\u5f0f</li> </ul> </li> <li> <p>StoreMisalignBuffer.scala</p> <ul> <li>\u529f\u80fd\uff1a\u975e\u5bf9\u9f50Store\u5904\u7406</li> <li>\u6838\u5fc3\u6982\u5ff5\uff1a\u5730\u5740\u975e\u5bf9\u9f50\u8bbf\u95ee\u5904\u7406</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_4","title":"\u7b2c\u56db\u9636\u6bb5\uff1a\u96c6\u6210\u548c\u63a5\u53e3","text":"<ol> <li>LSQWrapper.scala<ul> <li>\u529f\u80fd\uff1aLSQ\u603b\u4f53\u5305\u88c5\u6a21\u5757</li> <li>\u6838\u5fc3\u6982\u5ff5\uff1a\u5404\u6a21\u5757\u95f4\u7684\u8fde\u63a5\u548c\u534f\u8c03</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_5","title":"\u56db\u3001\u6bcf\u4e2a\u6a21\u5757\u7684\u8be6\u7ec6\u5b66\u4e60\u8ba1\u5212","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#1-freelistscala","title":"1. FreeList.scala","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_6","title":"\u529f\u80fd\u63cf\u8ff0","text":"<p>FreeList\u7ba1\u7406LSQ\u4e2d\u7684\u53ef\u7528\u6761\u76ee\uff0c\u63d0\u4f9b\u5206\u914d\u548c\u91ca\u653e\u673a\u5236\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_7","title":"\u5b66\u4e60\u8981\u70b9","text":"<ul> <li>\u5faa\u73af\u961f\u5217\u6307\u9488\u8f85\u52a9\u5668\uff08CircularQueuePtrHelper\uff09\u7684\u4f7f\u7528</li> <li>\u5206\u914d\u548c\u91ca\u653e\u903b\u8f91</li> <li>\u7a7a\u95f2\u69fd\u4f4d\u8ba1\u6570\u673a\u5236</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_8","title":"\u63a5\u53e3\u5206\u6790","text":"<ul> <li>\u5206\u914d\u8bf7\u6c42\u548c\u54cd\u5e94</li> <li>\u91ca\u653e\u673a\u5236</li> <li>\u8ba1\u6570\u5668\u7ba1\u7406</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#2-virtualloadqueuescala","title":"2. VirtualLoadQueue.scala","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_9","title":"\u529f\u80fd\u63cf\u8ff0","text":"<p>VirtualLoadQueue\u662f\u4e00\u4e2a\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u50a8\u6240\u6709load\u6307\u4ee4\u7684MicroOp\uff0c\u7ef4\u62a4load\u6307\u4ee4\u4e4b\u95f4\u7684\u987a\u5e8f\uff0c\u7c7b\u4f3c\u4e8eload\u6307\u4ee4\u7684ROB\uff0c\u5176\u4e3b\u8981\u529f\u80fd\u4e3a\u8ddf\u8e2aLoad\u6307\u4ee4\u6267\u884c\u72b6\u6001\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_10","title":"\u5b66\u4e60\u8981\u70b9","text":"<ul> <li>Load\u6307\u4ee4\u72b6\u6001\u8ddf\u8e2a\uff1aallocated\u3001isvec\u3001committed</li> <li>\u5165\u961f\u903b\u8f91\uff08dispatch\u9636\u6bb5\uff09</li> <li>\u6d41\u6c34\u7ebf\u5199\u56de\uff08load\u6d41\u6c34\u7ebfS3\u9636\u6bb5\uff09</li> <li>\u51fa\u961f\u6761\u4ef6\u548c\u903b\u8f91</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_11","title":"\u63a5\u53e3\u5206\u6790","text":"<ul> <li>\u5165\u961f\u8bf7\u6c42\u548c\u54cd\u5e94</li> <li>\u6d41\u6c34\u7ebf\u5199\u56de\u63a5\u53e3</li> <li>\u4e0eROB\u7684\u4ea4\u4e92\u63a5\u53e3</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#3-loadqueuescala","title":"3. LoadQueue.scala","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_12","title":"\u529f\u80fd\u63cf\u8ff0","text":"<p>LoadQueue\u5b9e\u73b0\u4e86Load\u961f\u5217\u7684\u4e3b\u8981\u529f\u80fd\uff0c\u7ba1\u7406Load\u6307\u4ee4\u7684\u6267\u884c\u548c\u63d0\u4ea4\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_13","title":"\u5b66\u4e60\u8981\u70b9","text":"<ul> <li>Load\u961f\u5217\u7684\u64cd\u4f5c\u548c\u72b6\u6001\u7ba1\u7406</li> <li>\u4e0eVirtualLoadQueue\u7684\u4ea4\u4e92</li> <li>\u52a0\u8f7d\u64cd\u4f5c\u7684\u6267\u884c\u548c\u63d0\u4ea4</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_14","title":"\u63a5\u53e3\u5206\u6790","text":"<ul> <li>\u4e0e\u6267\u884c\u5355\u5143\u7684\u63a5\u53e3</li> <li>\u4e0eROB\u7684\u4ea4\u4e92\u63a5\u53e3</li> <li>\u4e0eStoreQueue\u7684\u4ea4\u4e92\u63a5\u53e3</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#4-13","title":"4-13. \u5176\u4ed6\u6a21\u5757","text":"<p>\u7c7b\u4f3c\u5730\u5206\u6790\u5176\u4ed6\u6a21\u5757\u7684\u529f\u80fd\u63cf\u8ff0\u3001\u5b66\u4e60\u8981\u70b9\u548c\u63a5\u53e3\u5206\u6790\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#14-lsqwrapperscala","title":"14. LSQWrapper.scala","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_15","title":"\u529f\u80fd\u63cf\u8ff0","text":"<p>LSQWrapper\u662fLSQ\u7cfb\u7edf\u7684\u9876\u5c42\u6a21\u5757\uff0c\u8d1f\u8d23\u5c06VirtualLoadQueue\u3001StoreQueue\u7b49\u5404\u4e2a\u5b50\u6a21\u5757\u8fde\u63a5\u8d77\u6765\uff0c\u5f62\u6210\u5b8c\u6574\u7684LSQ\u7cfb\u7edf\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_16","title":"\u5b66\u4e60\u8981\u70b9","text":"<ul> <li>\u5404\u6a21\u5757\u95f4\u7684\u8fde\u63a5\u65b9\u5f0f</li> <li>\u63a7\u5236\u4fe1\u53f7\u7684\u4f20\u9012\u548c\u5904\u7406</li> <li>\u6307\u4ee4\u5165\u961f\u548c\u51fa\u961f\u7684\u603b\u4f53\u6d41\u7a0b</li> <li>\u5f02\u5e38\u548c\u91cd\u5b9a\u5411\u5904\u7406\u673a\u5236</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_17","title":"\u63a5\u53e3\u5206\u6790","text":"<ul> <li>\u4e0e\u6d3e\u9063\u9636\u6bb5\u7684\u63a5\u53e3</li> <li>\u4e0eROB\u7684\u63a5\u53e3</li> <li>\u4e0e\u6267\u884c\u5355\u5143\u7684\u63a5\u53e3</li> <li>\u4e0e\u7f13\u5b58\u7cfb\u7edf\u7684\u63a5\u53e3</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/lsq_plan/#_18","title":"\u4e94\u3001\u9ad8\u7ea7\u4e3b\u9898","text":"<p>\u5b8c\u6210\u57fa\u672c\u6a21\u5757\u5b66\u4e60\u540e\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5b66\u4e60\u4ee5\u4e0b\u9ad8\u7ea7\u4e3b\u9898\uff1a</p> <ol> <li>\u5185\u5b58\u4f9d\u8d56\u9884\u6d4b\uff1aXiangShan\u5982\u4f55\u9884\u6d4b\u548c\u5904\u7406\u5185\u5b58\u4f9d\u8d56</li> <li>\u8fdd\u4f8b\u6062\u590d\u673a\u5236\uff1a\u5f53\u53d1\u751fRAW\u6216RAR\u8fdd\u4f8b\u65f6\u7684\u6062\u590d\u6d41\u7a0b</li> <li>\u975e\u5bf9\u9f50\u8bbf\u5b58\u5904\u7406\uff1a\u5904\u7406\u975e\u5bf9\u9f50\u8bbf\u5b58\u7684\u673a\u5236\u548c\u4f18\u5316</li> <li>\u5411\u91cf\u8bbf\u5b58\u652f\u6301\uff1aLSQ\u5982\u4f55\u652f\u6301\u5411\u91cf\u8bbf\u5b58\u6307\u4ee4</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/","title":"StoreQueue","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#1","title":"1. \u6a21\u5757\u6982\u8ff0","text":"<p><code>StoreQueue.scala</code> \u5b9e\u73b0\u4e86XiangShan\u5904\u7406\u5668\u7684\u5b58\u50a8\u961f\u5217\uff0c\u5b83\u662f\u5185\u5b58\u5b50\u7cfb\u7edf\u7684\u5173\u952e\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u5904\u7406\u5b58\u50a8\u6307\u4ee4\u3002StoreQueue\u7ba1\u7406\u5b58\u50a8\u6307\u4ee4\u4ece\u53d1\u5c04\u5230\u6700\u7ec8\u5199\u5165\u5185\u5b58\u7684\u5168\u8fc7\u7a0b\uff0c\u5305\u62ec\u5b58\u50a8\u8f6c\u53d1\u3001\u5185\u5b58\u4e00\u81f4\u6027\u7ef4\u62a4\u548c\u975e\u5bf9\u9f50\u8bbf\u95ee\u5904\u7406\u7b49\u529f\u80fd\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#11","title":"1.1 \u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u63a5\u6536\u548c\u5904\u7406\u6765\u81ea\u540e\u7aef\u7684\u5b58\u50a8\u6307\u4ee4</li> <li>\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\uff0c\u652f\u6301\u90e8\u5206\u8f6c\u53d1\u548c\u7cbe\u786e\u7684\u5730\u5740\u5bf9\u6bd4</li> <li>\u7ba1\u7406\u5b58\u50a8\u6307\u4ee4\u7684\u63d0\u4ea4\u548c\u5199\u56de</li> <li>\u5904\u7406MMIO (Memory Mapped I/O) \u548c\u975e\u7f13\u5b58 (Non-cacheable) \u5b58\u50a8\u6307\u4ee4</li> <li>\u652f\u6301\u975e\u5bf9\u9f50\u8bbf\u95ee\u548c\u8de8\u9875\u5b58\u50a8\u6307\u4ee4\u5904\u7406</li> <li>\u5411SBuffer\u4f20\u9012\u5df2\u63d0\u4ea4\u7684\u5b58\u50a8\u6570\u636e</li> <li>\u652f\u6301\u5411\u91cf\u5b58\u50a8\u6307\u4ee4\u7684\u7279\u6b8a\u5904\u7406</li> <li>\u5b9e\u73b0CMO (Cache Maintenance Operations) \u548cCBO (Cache Block Operations) \u6307\u4ee4</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#12","title":"1.2 \u6a21\u5757\u5b9a\u4e49","text":"<pre><code>class StoreQueue(implicit p: Parameters) extends XSModule\n  with HasDCacheParameters\n  with HasCircularQueuePtrHelper\n  with HasPerfEvents\n  with HasVLSUParameters {\n  // \u6a21\u5757\u5b9e\u73b0\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#13","title":"1.3 \u4e03\u5927\u7279\u6027\u6982\u8ff0","text":"<p>\u6839\u636e\u5b98\u65b9\u6587\u6863\uff0cStoreQueue\u5177\u6709\u4ee5\u4e0b\u4e03\u5927\u6838\u5fc3\u7279\u6027\uff1a</p> <ol> <li>\u6570\u636e\u524d\u9012\uff1a\u5b9e\u73b0\u9ad8\u6548\u7684\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u673a\u5236\uff0c\u786e\u4fdd\u6570\u636e\u4f9d\u8d56\u7684\u6b63\u786e\u6027</li> <li>\u975e\u5bf9\u9f50store\u6307\u4ee4\uff1a\u652f\u6301\u5904\u7406\u975e\u5bf9\u9f50\u7684\u5b58\u50a8\u8bbf\u95ee\uff0c\u5305\u62ec\u8de816\u5b57\u8282\u8fb9\u754c\u548c\u8de8\u9875\u8bbf\u95ee</li> <li>\u5411\u91cfStore\u6307\u4ee4\uff1a\u652f\u6301\u5904\u7406RISC-V\u5411\u91cf\u6269\u5c55\u4e2d\u7684\u5411\u91cf\u5b58\u50a8\u6307\u4ee4</li> <li>CMO\u6307\u4ee4\uff1a\u5b9e\u73b0\u7f13\u5b58\u7ef4\u62a4\u64cd\u4f5c\uff0c\u7528\u4e8e\u7ba1\u7406\u7f13\u5b58\u5185\u5bb9</li> <li>CBO\u6307\u4ee4\uff1a\u652f\u6301\u7f13\u5b58\u5757\u64cd\u4f5c\uff0c\u7279\u522b\u662fCBO.ZERO\u6e05\u96f6\u64cd\u4f5c</li> <li>MMIO\u4e0eNonCacheable Store\u6307\u4ee4\uff1a\u901a\u8fc7UnCache\u63a5\u53e3\u5904\u7406\u8bbe\u5907\u8bbf\u95ee\u548c\u975e\u7f13\u5b58\u5b58\u50a8</li> <li>store\u6307\u4ee4\u63d0\u4ea4\u4e0eSBuffer\u5199\u5165\uff1a\u91c7\u7528\u63d0\u524d\u63d0\u4ea4\u7b56\u7565\uff0c\u9ad8\u6548\u5730\u5c06\u5b58\u50a8\u6570\u636e\u5199\u5165SBuffer</li> <li>\u5f3a\u5236\u5237\u65b0Sbuffer\uff1a\u4f7f\u7528\u53cc\u9608\u503c\u63a7\u5236\u7b56\u7565\u7ba1\u7406SBuffer\u7684\u5237\u65b0</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#2","title":"2. \u7cfb\u7edf\u67b6\u6784","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#21","title":"2.1 \u5b58\u50a8\u961f\u5217\u5728\u5904\u7406\u5668\u4e2d\u7684\u4f4d\u7f6e","text":"<p>StoreQueue\u662fXiangShan\u5904\u7406\u5668\u4e71\u5e8f\u6267\u884c\u5f15\u64ce\u4e2d\u7684\u5173\u952e\u7ec4\u4ef6\uff0c\u4f4d\u4e8eLoad-Store\u5355\u5143\u5185\u3002\u5b58\u50a8\u961f\u5217\u662f\u5904\u7406\u5668\u8fdb\u884c\u4e71\u5e8f\u6267\u884c\u65f6\u7ef4\u62a4\u5185\u5b58\u8bbf\u95ee\u987a\u5e8f\u6b63\u786e\u6027\u7684\u5173\u952e\u7ed3\u6784\u3002\u5b83\u4e0eLoadQueue\u534f\u540c\u5de5\u4f5c\uff0c\u5171\u540c\u6784\u6210\u5904\u7406\u5668\u7684\u5185\u5b58\u8bbf\u95ee\u5b50\u7cfb\u7edf\u3002</p> <p>\u5728XiangShan\u5904\u7406\u5668\u67b6\u6784\u4e2d\uff0cStoreQueue\u7684\u4e3b\u8981\u89d2\u8272\u5305\u62ec\uff1a 1. \u5b58\u50a8\u6240\u6709\u5904\u4e8e\u98de\u884c(in-flight)\u72b6\u6001\u7684\u5b58\u50a8\u6307\u4ee4 2. \u63d0\u4f9b\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\uff0c\u786e\u4fdd\u6570\u636e\u4f9d\u8d56\u7684\u6b63\u786e\u6027 3. \u6309\u7a0b\u5e8f\u987a\u5e8f\u63d0\u4ea4\u5b58\u50a8\u6570\u636e\u5230\u5185\u5b58\u5c42\u6b21\u7ed3\u6784 4. \u5904\u7406\u7279\u6b8a\u7684\u5b58\u50a8\u7c7b\u578b\uff08\u5982MMIO\u3001\u975e\u7f13\u5b58\u3001\u5411\u91cf\u5b58\u50a8\u7b49\uff09</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#22","title":"2.2 \u8bbe\u8ba1\u7279\u6027","text":"<p>StoreQueue\u91c7\u7528\u73af\u5f62\u961f\u5217\u8bbe\u8ba1\uff0c\u5177\u6709\u4ee5\u4e0b\u4e3b\u8981\u7279\u6027\uff1a</p> <ol> <li> <p>\u5355\u53d1\u5c04\u591a\u63d0\u4ea4\u67b6\u6784\uff1a</p> <ul> <li>\u6bcf\u5468\u671f\u53ef\u4ee5\u63a5\u6536\u6700\u591a<code>LSQEnqWidth</code>\u4e2a\u65b0\u7684\u5b58\u50a8\u6307\u4ee4</li> <li>\u6bcf\u5468\u671f\u53ef\u4ee5\u63d0\u4ea4\u6700\u591a<code>CommitWidth</code>\u4e2a\u7ecfROB\u786e\u8ba4\u63d0\u4ea4\u7684\u5b58\u50a8\u6307\u4ee4</li> <li>\u6bcf\u5468\u671f\u53ef\u4ee5\u5411\u4e0b\u5c42\u5b58\u50a8\u5b50\u7cfb\u7edf\u53d1\u5c04\u6700\u591a<code>EnsbufferWidth</code>\u4e2a\u5df2\u63d0\u4ea4\u7684\u5b58\u50a8\u6307\u4ee4</li> </ul> </li> <li> <p>\u5206\u79bb\u7684\u5730\u5740\u548c\u6570\u636e\u5904\u7406\uff1a</p> <ul> <li>\u5730\u5740\u548c\u6570\u636e\u5206\u522b\u901a\u8fc7\u4e0d\u540c\u7684\u7aef\u53e3\u5199\u5165\uff0c\u652f\u6301\u5730\u5740\u548c\u6570\u636e\u5728\u4e0d\u540c\u65f6\u95f4\u5230\u8fbe</li> <li>\u901a\u8fc7<code>addrvalid</code>\u548c<code>datavalid</code>\u6807\u5fd7\u8ddf\u8e2a\u6bcf\u6761\u6307\u4ee4\u7684\u72b6\u6001</li> </ul> </li> <li> <p>\u6a21\u5757\u5316\u6570\u636e\u5b58\u50a8\uff1a</p> <ul> <li>\u4f7f\u7528\u4e13\u7528\u7684<code>SQDataModule</code>\u548c<code>SQAddrModule</code>\u6a21\u5757\u7ba1\u7406\u6570\u636e\u548c\u5730\u5740</li> <li>\u652f\u6301\u9ad8\u6548\u7684CAM (Content Addressable Memory) \u64cd\u4f5c\u7528\u4e8e\u5730\u5740\u5339\u914d</li> </ul> </li> <li> <p>\u4f18\u5316\u7684\u8f6c\u53d1\u903b\u8f91\uff1a</p> <ul> <li>\u4f7f\u7528\u5206\u6bb5\u7684\u8f6c\u53d1\u8def\u5f84\u5b9e\u73b0\u4f4e\u5ef6\u8fdf\u8f6c\u53d1</li> <li>\u652f\u6301\u90e8\u5206\u8f6c\u53d1\uff08Partial Forwarding\uff09\u548c\u7cbe\u786e\u7684\u63a9\u7801\u5339\u914d</li> </ul> </li> <li> <p>\u7279\u6b8a\u72b6\u6001\u673a\uff1a</p> <ul> <li>\u4e3aMMIO\u3001\u975e\u7f13\u5b58\u8bbf\u95ee\u548cCMO\u64cd\u4f5c\u63d0\u4f9b\u4e13\u7528\u7684\u72b6\u6001\u673a\u5904\u7406</li> <li>\u652f\u6301\u975e\u5bf9\u9f50\u5b58\u50a8\u548c\u8de8\u9875\u5b58\u50a8\u7684\u7279\u6b8a\u5904\u7406</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#23","title":"2.3 \u6570\u636e\u6d41\u67b6\u6784","text":"<pre><code>flowchart TB\n    BE[\u540e\u7aef\u91cd\u547d\u540d/\u8c03\u5ea6] --&gt; |\u53d1\u5c04\u5b58\u50a8\u6307\u4ee4| SQ[\u5b58\u50a8\u961f\u5217 StoreQueue]\n    SQ --&gt; |\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1| LQ[\u52a0\u8f7d\u961f\u5217]\n    ROB[\u91cd\u6392\u5e8f\u7f13\u51b2\u533a] --&gt; |\u63d0\u4ea4\u5b58\u50a8\u6307\u4ee4| SQ\n    SQ --&gt; |\u5199\u56de\u5df2\u63d0\u4ea4\u6570\u636e| SB[\u5b58\u50a8\u7f13\u51b2\u533a SBuffer]\n    SQ --&gt; |MMIO/\u975e\u7f13\u5b58\u8bbf\u95ee| UC[UnCache\u6a21\u5757]\n    UC --&gt; |\u54cd\u5e94| SQ\n    SQ --&gt; |\u5b8c\u6210\u5199\u56de| ROB\n    SB --&gt; |\u5199\u5165| L1D[L1 \u6570\u636e\u7f13\u5b58]\n    SMA[StoreMisalignBuffer] &lt;--&gt; |\u975e\u5bf9\u9f50/\u8de8\u9875\u8bbf\u95ee| SQ</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#3","title":"3. \u6570\u636e\u7ed3\u6784\u4e0e\u63a5\u53e3","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#31","title":"3.1 \u4e3b\u8981\u63a5\u53e3","text":"<p>StoreQueue\u63d0\u4f9b\u4ee5\u4e0b\u4e3b\u8981\u63a5\u53e3\uff0c\u7528\u4e8e\u4e0e\u5904\u7406\u5668\u5176\u4ed6\u6a21\u5757\u4ea4\u4e92\uff1a</p> <pre><code>val io = IO(new Bundle {\n  // \u6838\u5fc3ID\n  val hartId = Input(UInt(hartIdLen.W))\n\n  // \u5b58\u50a8\u6307\u4ee4\u5165\u961f\u63a5\u53e3\n  val enq = new SqEnqIO\n\n  // \u5206\u652f\u91cd\u5b9a\u5411\u4fe1\u53f7\n  val brqRedirect = Flipped(ValidIO(new Redirect))\n\n  // \u5411\u91cf\u53cd\u9988\n  val vecFeedback = Vec(VecLoadPipelineWidth, Flipped(ValidIO(new FeedbackToLsqIO)))\n\n  // \u5b58\u50a8\u5730\u5740\u548c\u6570\u636e\u8f93\u5165\n  val storeAddrIn = Vec(StorePipelineWidth, Flipped(Valid(new LsPipelineBundle)))\n  val storeDataIn = Vec(StorePipelineWidth, Flipped(Valid(new MemExuOutput(isVector = true))))\n  val storeMaskIn = Vec(StorePipelineWidth, Flipped(Valid(new StoreMaskBundle)))\n\n  // SBuffer\u63a5\u53e3\n  val sbuffer = Vec(EnsbufferWidth, Decoupled(new DCacheWordReqWithVaddrAndPfFlag))\n\n  // \u7279\u6b8a\u64cd\u4f5c\u63a5\u53e3\n  val mmioStout = DecoupledIO(new MemExuOutput)\n  val vecmmioStout = DecoupledIO(new MemExuOutput(isVector = true))\n  val cmoOpReq = DecoupledIO(new CMOReq)\n  val cmoOpResp = Flipped(DecoupledIO(new CMOResp))\n\n  // \u52a0\u8f7d\u8f6c\u53d1\u67e5\u8be2\n  val forward = Vec(LoadPipelineWidth, Flipped(new PipeLoadForwardQueryIO))\n\n  // ROB\u63a5\u53e3\n  val rob = Flipped(new RobLsqIO)\n\n  // \u72b6\u6001\u8f93\u51fa\n  val sqEmpty = Output(Bool())\n  val sqFull = Output(Bool())\n  // \u66f4\u591a\u63a5\u53e3...\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#32","title":"3.2 \u6570\u636e\u5b58\u50a8\u6a21\u5757","text":"<p>StoreQueue\u5b9e\u73b0\u4e86\u591a\u4e2a\u4e13\u7528\u7684\u6570\u636e\u5b58\u50a8\u6a21\u5757\uff0c\u7528\u4e8e\u9ad8\u6548\u7ba1\u7406\u5b58\u50a8\u6307\u4ee4\u7684\u6570\u636e\u3001\u5730\u5740\u548c\u72b6\u6001\uff1a</p> <ol> <li> <p>SQDataModule\uff1a\u7ba1\u7406\u5b58\u50a8\u6570\u636e\uff0c\u652f\u6301\u8bfb\u53d6\u3001\u5199\u5165\u548c\u8f6c\u53d1\u64cd\u4f5c    <pre><code>val dataModule = Module(new SQDataModule(\n  numEntries = StoreQueueSize,\n  numRead = EnsbufferWidth,\n  numWrite = StorePipelineWidth,\n  numForward = LoadPipelineWidth\n))\n</code></pre></p> </li> <li> <p>SQAddrModule\uff1a\u7ba1\u7406\u7269\u7406\u548c\u865a\u62df\u5730\u5740\uff0c\u652f\u6301CAM\u64cd\u4f5c\u7528\u4e8e\u5730\u5740\u5339\u914d    <pre><code>val paddrModule = Module(new SQAddrModule(\n  dataWidth = PAddrBits,\n  numEntries = StoreQueueSize,\n  numRead = EnsbufferWidth,\n  numWrite = StorePipelineWidth,\n  numForward = LoadPipelineWidth\n))\n</code></pre></p> </li> <li> <p>DatamoduleResultBuffer\uff1a\u7528\u4e8e\u7f13\u5b58\u5199\u56deSBuffer\u7684\u6570\u636e</p> </li> <li>StoreExceptionBuffer\uff1a\u5b58\u50a8\u5f02\u5e38\u4fe1\u606f</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#33","title":"3.3 \u91cd\u8981\u7684\u6570\u636e\u7c7b\u578b","text":"<ol> <li> <p>SqPtr\uff1a\u5b58\u50a8\u961f\u5217\u6307\u9488\uff0c\u7528\u4e8e\u73af\u5f62\u961f\u5217\u7d22\u5f15    <pre><code>class SqPtr(implicit p: Parameters) extends CircularQueuePtr[SqPtr](\n  p =&gt; p(XSCoreParamsKey).StoreQueueSize\n)\n</code></pre></p> </li> <li> <p>DataBufferEntry\uff1a\u6570\u636e\u7f13\u51b2\u6761\u76ee\uff0c\u5305\u542b\u5730\u5740\u3001\u6570\u636e\u548c\u63a7\u5236\u4fe1\u606f    <pre><code>class DataBufferEntry(implicit p: Parameters) extends DCacheBundle {\n  val addr = UInt(PAddrBits.W)\n  val vaddr = UInt(VAddrBits.W)\n  val data = UInt(VLEN.W)\n  val mask = UInt((VLEN/8).W)\n  val wline = Bool()\n  val sqPtr = new SqPtr\n  val prefetch = Bool()\n  val vecValid = Bool()\n  val sqNeedDeq = Bool()\n}\n</code></pre></p> </li> <li> <p>SQDataEntry\uff1a\u5b58\u50a8\u961f\u5217\u6570\u636e\u6761\u76ee    <pre><code>class SQDataEntry(implicit p: Parameters) extends XSBundle {\n  val mask = UInt((VLEN/8).W)\n  val data = UInt(VLEN.W)\n}\n</code></pre></p> </li> </ol> <p>\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\u4e86\u5b58\u50a8\u961f\u5217\u4e2d\u5404\u79cd\u6570\u636e\u7ed3\u6784\u7684\u683c\u5f0f\u548c\u64cd\u4f5c\u65b9\u5f0f\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#4","title":"4. \u5185\u90e8\u6570\u636e\u7ed3\u6784\u4e0e\u72b6\u6001","text":"<p>StoreQueue\u5185\u90e8\u7ef4\u62a4\u4e86\u591a\u79cd\u6570\u636e\u7ed3\u6784\u548c\u72b6\u6001\u6807\u5fd7\uff0c\u7528\u4e8e\u8ddf\u8e2a\u6bcf\u6761\u5b58\u50a8\u6307\u4ee4\u7684\u751f\u547d\u5468\u671f\u548c\u72b6\u6001\uff1a</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#41","title":"4.1 \u4e3b\u8981\u6570\u636e\u6570\u7ec4","text":"<pre><code>// \u5fae\u64cd\u4f5c\u6570\u636e\uff0c\u4fdd\u5b58\u6bcf\u6761\u5b58\u50a8\u6307\u4ee4\u7684\u8be6\u7ec6\u4fe1\u606f\nval uop = Reg(Vec(StoreQueueSize, new DynInst))\n\n// \u8c03\u8bd5\u7528\u6570\u636e\nval debug_paddr = Reg(Vec(StoreQueueSize, UInt((PAddrBits).W)))\nval debug_vaddr = Reg(Vec(StoreQueueSize, UInt((VAddrBits).W)))\nval debug_data = Reg(Vec(StoreQueueSize, UInt((XLEN).W)))\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#42","title":"4.2 \u72b6\u6001\u6807\u5fd7\u6570\u7ec4","text":"<p>StoreQueue\u4f7f\u7528\u591a\u4e2a\u72b6\u6001\u6807\u5fd7\u6570\u7ec4\u8ddf\u8e2a\u5b58\u50a8\u6307\u4ee4\u7684\u751f\u547d\u5468\u671f\u548c\u72b6\u6001\uff1a</p> <pre><code>// \u57fa\u672c\u72b6\u6001\u6807\u5fd7\nval allocated = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u6761\u76ee\u5df2\u5206\u914d\nval completed = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u6761\u76ee\u5df2\u5b8c\u6210\u5904\u7406\nval addrvalid = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u5730\u5740\u6709\u6548\nval datavalid = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u6570\u636e\u6709\u6548\nval allvalid  = VecInit((0 until StoreQueueSize).map(i =&gt; addrvalid(i) &amp;&amp; datavalid(i)))  // \u5730\u5740\u548c\u6570\u636e\u90fd\u6709\u6548\nval committed = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u6307\u4ee4\u5df2\u88abROB\u63d0\u4ea4\n\n// \u5730\u5740\u76f8\u5173\u6807\u5fd7\nval unaligned = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u975e\u5bf9\u9f50\u5b58\u50a8\nval cross16Byte = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u8de8\u8d8a16\u5b57\u8282\u8fb9\u754c\n\n// \u7279\u6b8a\u8bbf\u95ee\u7c7b\u578b\u6807\u5fd7\nval pending = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // MMIO\u6302\u8d77\nval nc = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u975e\u7f13\u5b58\u6307\u4ee4\nval mmio = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // MMIO\u6307\u4ee4\nval memBackTypeMM = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u5185\u5b58\u540e\u7aef\u7c7b\u578b\nval prefetch = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u9700\u8981\u9884\u53d6\n\n// \u5411\u91cf\u5b58\u50a8\u76f8\u5173\u6807\u5fd7\nval isVec = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u5411\u91cf\u5b58\u50a8\u6307\u4ee4\nval vecLastFlow = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u5411\u91cf\u5b58\u50a8\u7684\u6700\u540e\u6d41\nval vecMbCommit = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u5411\u91cf\u5b58\u50a8\u4ece\u5408\u5e76\u7f13\u51b2\u533a\u63d0\u4ea4\n\n// \u5f02\u5e38\u76f8\u5173\u6807\u5fd7\nval hasException = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u5b58\u50a8\u6709\u5f02\u5e38\nval waitStoreS2 = RegInit(VecInit(List.fill(StoreQueueSize)(false.B)))  // \u7b49\u5f85\u5b58\u50a8S2\u9636\u6bb5\u7ed3\u679c\n</code></pre> <p>\u8fd9\u4e9b\u6807\u5fd7\u7684\u7ec4\u5408\u4f7f\u5f97StoreQueue\u80fd\u591f\u51c6\u786e\u8ddf\u8e2a\u6bcf\u6761\u5b58\u50a8\u6307\u4ee4\u7684\u72b6\u6001\u548c\u7c7b\u578b\uff0c\u4ece\u800c\u6b63\u786e\u5904\u7406\u5404\u79cd\u590d\u6742\u60c5\u51b5\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#43","title":"4.3 \u961f\u5217\u6307\u9488","text":"<p>StoreQueue\u4f7f\u7528\u591a\u7ec4\u6307\u9488\u7ba1\u7406\u73af\u5f62\u961f\u5217\u7684\u64cd\u4f5c\uff1a</p> <pre><code>// \u5165\u961f\u6307\u9488\uff08\u65b0\u6307\u4ee4\u63d2\u5165\u4f4d\u7f6e\uff09\nval enqPtrExt = RegInit(VecInit((0 until io.enq.req.length).map(_.U.asTypeOf(new SqPtr))))\nval enqPtr = enqPtrExt(0).value\n\n// \u8bfb\u53d6\u6570\u636e\u6307\u9488\uff08\u7528\u4e8e\u5411SBuffer\u53d1\u9001\u6570\u636e\uff09\nval rdataPtrExt = RegInit(VecInit((0 until EnsbufferWidth).map(_.U.asTypeOf(new SqPtr))))\n\n// \u51fa\u961f\u6307\u9488\uff08\u6307\u4ee4\u5b8c\u6210\u5904\u7406\u7684\u4f4d\u7f6e\uff09\nval deqPtrExt = RegInit(VecInit((0 until EnsbufferWidth).map(_.U.asTypeOf(new SqPtr))))\nval deqPtr = deqPtrExt(0).value\n\n// \u63d0\u4ea4\u6307\u9488\uff08ROB\u5df2\u63d0\u4ea4\u6307\u4ee4\u7684\u4f4d\u7f6e\uff09\nval cmtPtrExt = RegInit(VecInit((0 until CommitWidth).map(_.U.asTypeOf(new SqPtr))))\nval cmtPtr = cmtPtrExt(0).value\n\n// \u5730\u5740\u548c\u6570\u636e\u5c31\u7eea\u6307\u9488\uff08\u7528\u4e8e\u53d1\u5c04\u9636\u6bb5\uff09\nval addrReadyPtrExt = RegInit(0.U.asTypeOf(new SqPtr))\nval dataReadyPtrExt = RegInit(0.U.asTypeOf(new SqPtr))\n</code></pre> <p>\u8fd9\u4e9b\u6307\u9488\u5171\u540c\u7ef4\u62a4\u4e86\u961f\u5217\u7684\u72b6\u6001\u548c\u64cd\u4f5c\uff0c\u786e\u4fdd\u6307\u4ee4\u6309\u6b63\u786e\u7684\u987a\u5e8f\u5904\u7406\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#44-mmio","title":"4.4 MMIO\u548c\u975e\u7f13\u5b58\u64cd\u4f5c\u72b6\u6001\u673a","text":"<p>StoreQueue\u4e3aMMIO\u548c\u975e\u7f13\u5b58\u64cd\u4f5c\u7ef4\u62a4\u4e13\u7528\u7684\u72b6\u6001\u673a\uff1a</p> <pre><code>// MMIO\u72b6\u6001\u673a\nval s_idle :: s_req :: s_resp :: s_wb :: s_wait :: Nil = Enum(5)\nval mmioState = RegInit(s_idle)\nval uncacheUop = Reg(new DynInst)  // \u5f53\u524d\u5904\u7406\u7684MMIO\u5fae\u64cd\u4f5c\n\n// \u975e\u7f13\u5b58\u72b6\u6001\u673a\nval nc_idle :: nc_req :: nc_req_ack :: nc_resp :: Nil = Enum(4)\nval ncState = RegInit(nc_idle)\nval ncWaitRespPtrReg = RegInit(0.U(uncacheIdxBits.W))  // \u7b49\u5f85\u54cd\u5e94\u7684\u975e\u7f13\u5b58\u6307\u4ee4\u6307\u9488\n</code></pre> <p>\u8fd9\u4e9b\u72b6\u6001\u673a\u786e\u4fdd\u7279\u6b8a\u7c7b\u578b\u7684\u5b58\u50a8\u64cd\u4f5c\u80fd\u591f\u6b63\u786e\u5b8c\u6210\uff0c\u540c\u65f6\u907f\u514d\u4e0e\u6b63\u5e38\u5b58\u50a8\u6307\u4ee4\u7684\u5904\u7406\u51b2\u7a81\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#5","title":"5. \u5b58\u50a8\u961f\u5217\u5904\u7406\u6d41\u7a0b","text":"<p>StoreQueue\u5904\u7406\u5b58\u50a8\u6307\u4ee4\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\uff0c\u4ece\u5165\u961f\u5230\u6700\u7ec8\u5199\u5165\u5185\u5b58\u3002\u4ee5\u4e0b\u662f\u8be6\u7ec6\u7684\u5904\u7406\u6d41\u7a0b\uff1a</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#51","title":"5.1 \u6307\u4ee4\u5165\u961f","text":"<p>\u5b58\u50a8\u6307\u4ee4\u4ece\u540e\u7aef\u8c03\u5ea6\u5668\u53d1\u5c04\u540e\u9996\u5148\u8fdb\u5165StoreQueue\uff1a</p> <pre><code>// \u63a5\u6536\u6765\u81ea\u540e\u7aef\u7684\u5b58\u50a8\u6307\u4ee4\nval canEnqueue = io.enq.req.map(_.valid)\nval enqCancel = io.enq.req.map(_.bits.robIdx.needFlush(io.brqRedirect))\n\n// \u652f\u6301\u5411\u91cf\u5b58\u50a8\u6307\u4ee4\u7684\u6d41\u5904\u7406\nval vStoreFlow = io.enq.req.map(_.bits.numLsElem.asTypeOf(UInt(elemIdxBits.W)))\nval validVStoreFlow = vStoreFlow.zipWithIndex.map{case (vStoreFlowNumItem, index) =&gt; \n  Mux(!RegNext(io.brqRedirect.valid) &amp;&amp; canEnqueue(index), vStoreFlowNumItem, 0.U)}\n</code></pre> <p>\u5165\u961f\u8fc7\u7a0b\u4e2d\uff0cStoreQueue\u4e3a\u6bcf\u4e2a\u6709\u6548\u7684\u5165\u961f\u8bf7\u6c42\u5206\u914d\u5b58\u50a8\u961f\u5217\u6761\u76ee\uff0c\u521d\u59cb\u5316\u6240\u6709\u72b6\u6001\u6807\u5fd7\u548c\u5fae\u64cd\u4f5c\u4fe1\u606f\uff0c\u540c\u65f6\u5904\u7406\u5206\u652f\u91cd\u5b9a\u5411\u53ef\u80fd\u5bfc\u81f4\u7684\u53d6\u6d88\u60c5\u51b5\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#52","title":"5.2 \u5730\u5740\u548c\u6570\u636e\u5199\u5165","text":"<p>\u5165\u961f\u540e\uff0c\u5b58\u50a8\u6307\u4ee4\u7684\u5730\u5740\u548c\u6570\u636e\u901a\u8fc7\u4e0d\u540c\u7684\u8def\u5f84\u5199\u5165StoreQueue\uff1a</p> <ol> <li> <p>\u5730\u5740\u5199\u5165\u6d41\u7a0b\uff1a    <pre><code>// \u5730\u5740\u5199\u5165\u793a\u4f8b\nwhen (io.storeAddrIn(i).fire &amp;&amp; io.storeAddrIn(i).bits.updateAddrValid) {\n  val addr_valid = !io.storeAddrIn(i).bits.miss\n  addrvalid(stWbIndex) := addr_valid\n  nc(stWbIndex) := io.storeAddrIn(i).bits.nc\n}\n\nwhen (io.storeAddrIn(i).fire &amp;&amp; !io.storeAddrIn(i).bits.isFrmMisAlignBuf) {\n  unaligned(stWbIndex) := io.storeAddrIn(i).bits.isMisalign\n  cross16Byte(stWbIndex) := io.storeAddrIn(i).bits.isMisalign &amp;&amp; \n                           !io.storeAddrIn(i).bits.misalignWith16Byte\n\n  // \u5199\u5165\u7269\u7406\u5730\u5740\u6a21\u5757\n  paddrModule.io.waddr(i) := stWbIndex\n  paddrModule.io.wdata(i) := io.storeAddrIn(i).bits.paddr\n  // \u5176\u4ed6\u5730\u5740\u5199\u5165\u64cd\u4f5c...\n}\n</code></pre></p> </li> <li> <p>\u6570\u636e\u5199\u5165\u6d41\u7a0b\uff1a    <pre><code>// \u6570\u636e\u5199\u5165\u793a\u4f8b\nwhen (io.storeDataIn(i).fire) {\n  // \u5199\u5165\u6570\u636e\u6a21\u5757\n  dataModule.io.data.waddr(i) := stWbIndex\n  dataModule.io.data.wdata(i) := Mux(io.storeDataIn(i).bits.uop.fuOpType === LSUOpType.cbo_zero,\n    0.U,\n    Mux(isVec,\n      io.storeDataIn(i).bits.data,\n      genVWdata(io.storeDataIn(i).bits.data, io.storeDataIn(i).bits.uop.fuOpType(2,0)))\n  )\n  dataModule.io.data.wen(i) := true.B\n}\n</code></pre></p> </li> </ol> <p>\u5730\u5740\u548c\u6570\u636e\u5199\u5165\u5305\u62ec\u8bbe\u7f6e\u5404\u79cd\u6807\u5fd7\u3001\u5904\u7406\u975e\u5bf9\u9f50\u8bbf\u95ee\u548c\u7279\u6b8a\u60c5\u51b5\uff0c\u4ee5\u53ca\u5c06\u7269\u7406\u548c\u865a\u62df\u5730\u5740\u5199\u5165\u5bf9\u5e94\u6a21\u5757\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#53-rob","title":"5.3 ROB\u63d0\u4ea4\u5904\u7406","text":"<p>\u5f53\u6307\u4ee4\u5230\u8fbeROB\u5934\u90e8\u4e14\u786e\u8ba4\u63d0\u4ea4\u65f6\uff0cStoreQueue\u5c06\u5176\u6807\u8bb0\u4e3a\u5df2\u63d0\u4ea4\u72b6\u6001\uff1a</p> <pre><code>// \u63d0\u4ea4\u5411\u91cf\uff0c\u8bb0\u5f55\u54ea\u4e9b\u6307\u4ee4\u88ab\u63d0\u4ea4\nval commitVec = WireInit(VecInit(Seq.fill(CommitWidth)(false.B)))\nval needCancel = Wire(Vec(StoreQueueSize, Bool()))\n\nfor (i &lt;- 0 until CommitWidth) {\n  when (\n    allocated(cmtPtrExt(i).value) &amp;&amp;\n    isNotAfter(uop(cmtPtrExt(i).value).robIdx, GatedRegNext(io.rob.pendingPtr)) &amp;&amp;\n    !needCancel(cmtPtrExt(i).value) &amp;&amp;\n    (!waitStoreS2(cmtPtrExt(i).value) || isVec(cmtPtrExt(i).value))\n  ) {\n    // \u63d0\u4ea4\u5904\u7406\u903b\u8f91\n    // ...\n  }\n}\n\n// \u66f4\u65b0\u63d0\u4ea4\u6307\u9488\ncommitCount := PopCount(commitVec)\ncmtPtrExt := cmtPtrExt.map(_ + commitCount)\n</code></pre> <p>\u63d0\u4ea4\u8fc7\u7a0b\u786e\u4fdd\u53ea\u6709\u7ecf\u8fc7ROB\u786e\u8ba4\u7684\u6307\u4ee4\u624d\u4f1a\u5199\u5165\u5185\u5b58\uff0c\u8fd9\u662f\u4fdd\u8bc1\u7a0b\u5e8f\u6b63\u786e\u6027\u7684\u5173\u952e\u6b65\u9aa4\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#54-sbuffer","title":"5.4 \u5c06\u63d0\u4ea4\u7684\u5b58\u50a8\u5199\u5165SBuffer","text":"<p>\u5f53\u5b58\u50a8\u6307\u4ee4\u88ab\u6807\u8bb0\u4e3a\u5df2\u63d0\u4ea4\u4e14\u5730\u5740\u548c\u6570\u636e\u90fd\u6709\u6548\u540e\uff0c\u5b58\u50a8\u6570\u636e\u5c06\u5199\u5165\u6570\u636e\u7f13\u51b2\u533a\uff0c\u7136\u540e\u53d1\u9001\u5230SBuffer\uff1a</p> <pre><code>// \u51c6\u5907\u5199\u5165\u6570\u636e\u7f13\u51b2\u533a\u7684\u6761\u76ee\ndataBuffer.io.enq(i).valid := (\n  allocated(ptr) &amp;&amp; committed(ptr)\n    &amp;&amp; ((!isVec(ptr) &amp;&amp; (allvalid(ptr) || hasException(ptr))) || vecMbCommit(ptr))\n    &amp;&amp; !mmioStall &amp;&amp; !ncStall\n    &amp;&amp; (!unaligned(ptr) || !cross16Byte(ptr) &amp;&amp; (allvalid(ptr) || hasException(ptr)))\n)\n\n// \u586b\u5145\u6570\u636e\u7f13\u51b2\u533a\u6761\u76ee\ndataBuffer.io.enq(i).bits.addr := paddrModule.io.rdata(i)\ndataBuffer.io.enq(i).bits.vaddr := vaddrModule.io.rdata(i)\ndataBuffer.io.enq(i).bits.data := dataModule.io.rdata(i).data\n// \u5176\u4ed6\u5b57\u6bb5\u8bbe\u7f6e...\n\n// \u5c06\u6570\u636e\u4ece\u6570\u636e\u7f13\u51b2\u533a\u5199\u5165SBuffer\nio.sbuffer(i).valid := dataBuffer.io.deq(i).valid\ndataBuffer.io.deq(i).ready := io.sbuffer(i).ready\n\nio.sbuffer(i).bits.cmd := MemoryOpConstants.M_XWR\nio.sbuffer(i).bits.addr := dataBuffer.io.deq(i).bits.addr\n// \u5176\u4ed6\u5b57\u6bb5\u8bbe\u7f6e...\n</code></pre> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u5b8c\u6210\u4e86\u5b58\u50a8\u6307\u4ee4\u7684\u4e3b\u8981\u529f\u80fd\uff1a\u5c06\u6570\u636e\u5199\u5165\u5185\u5b58\u5c42\u6b21\u7ed3\u6784\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#55","title":"5.5 \u5904\u7406\u7279\u6b8a\u5b58\u50a8\u7c7b\u578b","text":"<p>StoreQueue\u4f7f\u7528\u4e13\u7528\u7684\u72b6\u6001\u673a\u5904\u7406MMIO\u548c\u975e\u7f13\u5b58\u5b58\u50a8\u6307\u4ee4\uff1a</p> <ol> <li> <p>MMIO\u5904\u7406\u6d41\u7a0b\uff1a    <pre><code>// MMIO\u72b6\u6001\u673a\nswitch(mmioState) {\n  is(s_idle) {\n    when(RegNext(io.rob.pendingst &amp;&amp; uop(deqPtr).robIdx === io.rob.pendingPtr &amp;&amp; \n          pending(deqPtr) &amp;&amp; allocated(deqPtr) &amp;&amp; datavalid(deqPtr) &amp;&amp; addrvalid(deqPtr) &amp;&amp; \n          !hasException(deqPtr))) {\n      mmioState := s_req\n      uncacheUop := uop(deqPtr)\n      // \u521d\u59cb\u5316MMIO\u64cd\u4f5c...\n    }\n  }\n  // \u5176\u4ed6\u72b6\u6001\u5904\u7406...\n}\n</code></pre></p> </li> <li> <p>\u975e\u7f13\u5b58\u5b58\u50a8\u5904\u7406\u6d41\u7a0b\uff1a    <pre><code>// \u975e\u7f13\u5b58\u72b6\u6001\u673a\nswitch(ncState){\n  is(nc_idle) {\n    when(nc(rptr0) &amp;&amp; allocated(rptr0) &amp;&amp; committed(rptr0) &amp;&amp; !mmio(rptr0) &amp;&amp; !isVec(rptr0)) {\n      ncState := nc_req\n      ncWaitRespPtrReg := rptr0\n    }\n  }\n  // \u5176\u4ed6\u72b6\u6001\u5904\u7406...\n}\n</code></pre></p> </li> </ol> <p>\u8fd9\u4e9b\u7279\u6b8a\u5904\u7406\u673a\u5236\u786e\u4fddMMIO\u548c\u975e\u7f13\u5b58\u5b58\u50a8\u80fd\u591f\u6b63\u786e\u5b8c\u6210\uff0c\u540c\u65f6\u7ef4\u62a4\u7a0b\u5e8f\u7684\u6267\u884c\u987a\u5e8f\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#56","title":"5.6 \u5904\u7406\u5206\u652f\u9884\u6d4b\u9519\u8bef\u548c\u5f02\u5e38","text":"<p>\u5f53\u53d1\u751f\u5206\u652f\u9884\u6d4b\u9519\u8bef\u65f6\uff0cStoreQueue\u9700\u8981\u64a4\u9500\u53d7\u5f71\u54cd\u7684\u5b58\u50a8\u6307\u4ee4\uff1a</p> <pre><code>// \u5224\u65ad\u54ea\u4e9b\u6761\u76ee\u9700\u8981\u53d6\u6d88\nfor (i &lt;- 0 until StoreQueueSize) {\n  needCancel(i) := uop(i).robIdx.needFlush(io.brqRedirect) &amp;&amp; allocated(i) &amp;&amp; !committed(i)\n  when (needCancel(i)) {\n    allocated(i) := false.B\n    completed(i) := false.B\n  }\n}\n\n// \u5904\u7406\u91cd\u5b9a\u5411\u540e\u7684\u6307\u9488\u6062\u590d\n// ...\n</code></pre> <p>\u8fd9\u4e2a\u673a\u5236\u786e\u4fdd\u9519\u8bef\u9884\u6d4b\u8def\u5f84\u4e0a\u7684\u5b58\u50a8\u6307\u4ee4\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u72b6\u6001\uff0c\u662f\u4fdd\u8bc1\u63a8\u6d4b\u6267\u884c\u6b63\u786e\u6027\u7684\u5173\u952e\u90e8\u5206\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#6-","title":"6. \u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u673a\u5236","text":"<p>\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u662fStoreQueue\u7684\u6838\u5fc3\u529f\u80fd\u4e4b\u4e00\uff0c\u5b83\u786e\u4fdd\u540e\u7eed\u7684\u52a0\u8f7d\u6307\u4ee4\u80fd\u591f\u4ece\u5c1a\u672a\u5199\u5165\u7f13\u5b58\u7684\u5b58\u50a8\u6570\u636e\u4e2d\u8bfb\u53d6\u6b63\u786e\u7684\u503c\u3002XiangShan\u7684\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u8bbe\u8ba1\u5728\u6ee1\u8db3\u6b63\u786e\u6027\u7684\u540c\u65f6\u8003\u8651\u4e86\u9ad8\u6027\u80fd\u9700\u6c42\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#61","title":"6.1 \u8f6c\u53d1\u8bf7\u6c42\u548c\u54cd\u5e94\u63a5\u53e3","text":"<p>LoadUnit\u901a\u8fc7\u4ee5\u4e0b\u63a5\u53e3\u5411StoreQueue\u53d1\u9001\u8f6c\u53d1\u67e5\u8be2\u8bf7\u6c42\uff1a</p> <pre><code>val forward = Vec(LoadPipelineWidth, Flipped(new PipeLoadForwardQueryIO))\n</code></pre> <p>\u6bcf\u4e2a\u8f6c\u53d1\u67e5\u8be2\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\uff1a - \u7269\u7406\u5730\u5740\u548c\u865a\u62df\u5730\u5740 - \u8bbf\u95ee\u63a9\u7801 - \u5b58\u50a8\u961f\u5217\u7d22\u5f15\uff08\u6307\u793a\u54ea\u4e9b\u8f83\u8001\u7684\u5b58\u50a8\u6307\u4ee4\u9700\u8981\u8003\u8651\uff09 - \u5fae\u64cd\u4f5c\u4fe1\u606f\uff08\u7528\u4e8eStoreSet\u4f9d\u8d56\u68c0\u67e5\uff09</p> <p>StoreQueue\u63d0\u4f9b\u4e24\u79cd\u65f6\u5e8f\u7684\u8f6c\u53d1\u54cd\u5e94\uff1a 1. \u5feb\u901f\u54cd\u5e94(Fast): \u5728\u8bf7\u6c42\u5468\u671f\u4e2d\u751f\u6210\uff0c\u7528\u4e8e\u52a0\u8f7d\u6d41\u6c34\u7ebf\u7684\u5feb\u901f\u68c0\u67e5 2. \u5b8c\u6574\u54cd\u5e94: \u5728\u8bf7\u6c42\u540e1\u4e2a\u5468\u671f\u751f\u6210\uff0c\u5305\u542b\u8be6\u7ec6\u7684\u6570\u636e\u548c\u63a7\u5236\u4fe1\u606f</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#62","title":"6.2 \u5730\u5740\u5339\u914d\u903b\u8f91","text":"<p>\u8f6c\u53d1\u7684\u7b2c\u4e00\u6b65\u662f\u786e\u5b9a\u54ea\u4e9b\u5b58\u50a8\u6307\u4ee4\u7684\u5730\u5740\u4e0e\u52a0\u8f7d\u6307\u4ee4\u5339\u914d\uff1a</p> <pre><code>// \u5224\u65ad\u54ea\u4e9b\u533a\u57df\u9700\u8981\u68c0\u67e5\nval differentFlag = deqPtrExt(0).flag =/= io.forward(i).sqIdx.flag\nval forwardMask = io.forward(i).sqIdxMask\nval forwardMask1 = Mux(differentFlag, ~deqMask, deqMask ^ forwardMask)\nval forwardMask2 = Mux(differentFlag, forwardMask, 0.U(StoreQueueSize.W))\nval needForward = Mux(differentFlag, ~deqMask | forwardMask, deqMask ^ forwardMask)\n\n// \u5730\u5740\u6709\u6548\u7684\u5b58\u50a8\u6307\u4ee4\nval addrValidVec = WireInit(VecInit((0 until StoreQueueSize).map(j =&gt; \n  addrvalid(j) &amp;&amp; allocated(j))))\nval dataValidVec = WireInit(VecInit((0 until StoreQueueSize).map(j =&gt; \n  datavalid(j))))\nval allValidVec = WireInit(VecInit((0 until StoreQueueSize).map(j =&gt; \n  addrvalid(j) &amp;&amp; datavalid(j) &amp;&amp; allocated(j))))\n\n// \u8ba1\u7b97\u53ef\u4ee5\u8f6c\u53d1\u7684\u5b58\u50a8\u6307\u4ee4\nval canForward1 = forwardMask1 &amp; allValidVec.asUInt\nval canForward2 = forwardMask2 &amp; allValidVec.asUInt\n\n// \u6267\u884cCAM\u67e5\u627e\ndataModule.io.needForward(i)(0) := canForward1 &amp; vaddrModule.io.forwardMmask(i).asUInt\ndataModule.io.needForward(i)(1) := canForward2 &amp; vaddrModule.io.forwardMmask(i).asUInt\n// \u8bbe\u7f6eCAM\u67e5\u627e\u53c2\u6570...\n</code></pre> <p>\u5730\u5740\u5339\u914d\u901a\u8fc7CAM (Content Addressable Memory) \u64cd\u4f5c\u5b9e\u73b0\u3002SQAddrModule\u5185\u90e8\u4f1a\u6bd4\u8f83\u5b58\u50a8\u548c\u52a0\u8f7d\u6307\u4ee4\u7684\u5730\u5740\uff0c\u5224\u65ad\u662f\u5426\u5339\u914d\u3002\u5339\u914d\u5206\u4e3a\u7cbe\u786e\u5339\u914d\uff08\u5730\u5740\u5b8c\u5168\u76f8\u7b49\u4e14\u63a9\u7801\u76f8\u4ea4\uff09\u548c\u884c\u5339\u914d\uff08\u7f13\u5b58\u884c\u5730\u5740\u76f8\u7b49\u4e14\u5b58\u50a8\u6307\u4ee4\u6709\u884c\u6807\u5fd7\uff09\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#63","title":"6.3 \u8f6c\u53d1\u6570\u636e\u751f\u6210","text":"<p>\u5728\u5339\u914d\u5230\u5b58\u50a8\u6307\u4ee4\u540e\uff0cSQDataModule\u8d1f\u8d23\u751f\u6210\u8f6c\u53d1\u6570\u636e\uff1a</p> <pre><code>// \u5e76\u884c\u8f6c\u53d1\u903b\u8f91\u793a\u4f8b\uff08\u7b80\u5316\u7248\uff09\nfor (j &lt;- 0 until numEntries) {\n  val needCheck0 = io.needForward(i)(0)(j)\n  val needCheck1 = io.needForward(i)(1)(j)\n\n  matchResultVec(j).validFast := needCheck0 &amp;&amp; data(j).valid\n  matchResultVec(j).valid := needCheck0Reg &amp;&amp; data(j).valid\n  matchResultVec(j).data := data(j).data\n  // \u540c\u6837\u8bbe\u7f6e\u7b2c\u4e8c\u90e8\u5206...\n}\n\n// \u4f7f\u7528\u5e76\u884c\u64cd\u4f5c\u627e\u5230\u6700\u7ec8\u7ed3\u679c\nval parallelFwdResult = parallelFwd(matchResultVec).asTypeOf(new FwdEntry)\n\n// \u751f\u6210\u8f6c\u53d1\u7ed3\u679c\nio.forwardValidFast(i) := parallelFwdResult.validFast\nio.forwardValid(i) := parallelFwdResult.valid\nio.forwardData(i) := parallelFwdResult.data\n</code></pre> <p>\u8f6c\u53d1\u6570\u636e\u751f\u6210\u4f7f\u7528\u5e76\u884c\u4f18\u5148\u7ea7\u903b\u8f91\uff0c\u5feb\u901f\u627e\u5230\u6700\u76f8\u5173\u7684\u5339\u914d\uff08\u4f18\u5148\u8003\u8651\u8f83\u65b0\u7684\u5b58\u50a8\u6307\u4ee4\uff09\uff0c\u5e76\u751f\u6210\u5bf9\u5e94\u7684\u8f6c\u53d1\u6570\u636e\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#64","title":"6.4 \u8f6c\u53d1\u72b6\u6001\u68c0\u67e5","text":"<p>\u8f6c\u53d1\u673a\u5236\u9700\u8981\u5904\u7406\u65e0\u6cd5\u8fdb\u884c\u8f6c\u53d1\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u5982\u5730\u5740\u5c1a\u672a\u5c31\u7eea\u3001\u6570\u636e\u5c1a\u672a\u5c31\u7eea\u6216\u865a\u62df\u5730\u5740\u5339\u914d\u4f46\u7269\u7406\u5730\u5740\u4e0d\u5339\u914d\uff1a</p> <pre><code>// \u5730\u5740\u5c1a\u672a\u5c31\u7eea\u4f46\u5b58\u5728StoreSet\u4f9d\u8d56\nval storeSetHitVec = Mux(lfstEnable,\n  WireInit(VecInit((0 until StoreQueueSize).map(j =&gt; \n    io.forward(i).uop.loadWaitBit &amp;&amp; uop(j).robIdx === io.forward(i).uop.waitForRobIdx))),\n  WireInit(VecInit((0 until StoreQueueSize).map(j =&gt; \n    uop(j).storeSetHit &amp;&amp; uop(j).ssid === io.forward(i).uop.ssid)))\n)\n\n// \u6570\u636e\u5c1a\u672a\u5c31\u7eea\u4f46\u5730\u5740\u5339\u914d\nval dataInvalidMask1 = ((addrValidVec.asUInt &amp; ~dataValidVec.asUInt &amp; vaddrModule.io.forwardMmask(i).asUInt) | \n                       unaligned.asUInt &amp; allocated.asUInt) &amp; forwardMask1.asUInt\n// ...\n\n// \u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u5339\u914d\u7ed3\u679c\u4e0d\u4e00\u81f4\nval vpmaskNotEqual = (\n  (RegEnable(paddrModule.io.forwardMmask(i).asUInt, io.forward(i).valid) ^ \n   RegEnable(vaddrModule.io.forwardMmask(i).asUInt, io.forward(i).valid)) &amp;\n  RegNext(needForward) &amp;\n  GatedRegNext(addrRealValidVec.asUInt)\n) =/= 0.U\n</code></pre> <p>\u8fd9\u4e9b\u72b6\u6001\u68c0\u67e5\u786e\u4fdd\u4e86\u8f6c\u53d1\u64cd\u4f5c\u7684\u6b63\u786e\u6027\uff0c\u9632\u6b62\u4f7f\u7528\u9519\u8bef\u6216\u4e0d\u5b8c\u6574\u7684\u6570\u636e\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#65","title":"6.5 \u5730\u5740\u4f9d\u8d56\u548c\u6570\u636e\u4f9d\u8d56\u6307\u793a","text":"<p>\u5f53\u65e0\u6cd5\u8fdb\u884c\u8f6c\u53d1\u65f6\uff0cStoreQueue\u9700\u8981\u63d0\u4f9b\u4f9d\u8d56\u6307\u793a\uff0c\u544a\u77e5LoadUnit\u9700\u8981\u91cd\u653e\uff1a</p> <pre><code>// \u5730\u5740\u4f9d\u8d56\u6307\u793a\u793a\u4f8b\nwhen (RegEnable(io.forward(i).uop.loadWaitStrict, io.forward(i).valid)) {\n  io.forward(i).addrInvalidSqIdx := RegEnable((io.forward(i).uop.sqIdx - 1.U), io.forward(i).valid)\n} .elsewhen (addrInvalidFlag) {\n  io.forward(i).addrInvalidSqIdx.flag := Mux(!s2_differentFlag || addrInvalidSqIdx &gt;= s2_deqPtrExt.value, \n                                           s2_deqPtrExt.flag, s2_enqPtrExt.flag)\n  io.forward(i).addrInvalidSqIdx.value := addrInvalidSqIdx\n} .otherwise {\n  // \u53ef\u80fd\u5b58\u50a8\u6307\u4ee4\u5df2\u5199\u5165sbuffer\n  io.forward(i).addrInvalidSqIdx := RegEnable(io.forward(i).uop.sqIdx, io.forward(i).valid)\n}\n</code></pre> <p>\u8fd9\u4e9b\u4f9d\u8d56\u6307\u793a\u5e2e\u52a9LoadUnit\u51b3\u5b9a\u4f55\u65f6\u91cd\u65b0\u6267\u884c\u52a0\u8f7d\u6307\u4ee4\uff0c\u662f\u4fdd\u8bc1\u6570\u636e\u4f9d\u8d56\u6b63\u786e\u6027\u7684\u5173\u952e\u673a\u5236\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#66","title":"6.6 \u534f\u8bae\u548c\u65f6\u5e8f\u4f18\u5316","text":"<p>XiangShan\u7684\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u673a\u5236\u91c7\u7528\u4e86\u591a\u9879\u4f18\u5316\u63aa\u65bd\u6765\u63d0\u9ad8\u6027\u80fd\u5e76\u786e\u4fdd\u6b63\u786e\u6027\uff1a</p> <ol> <li> <p>\u4e24\u7ea7\u8f6c\u53d1\u54cd\u5e94\uff1a</p> <ul> <li>\u5feb\u901f\u54cd\u5e94\u5728\u8bf7\u6c42\u5468\u671f\u751f\u6210\uff0c\u7528\u4e8e\u52a0\u901f\u6267\u884c\u6b63\u5e38\u60c5\u51b5</li> <li>\u5b8c\u6574\u54cd\u5e94\u5728\u4e0b\u4e00\u5468\u671f\u63d0\u4f9b\uff0c\u5305\u542b\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u548c\u5904\u7406\u8fb9\u7f18\u60c5\u51b5</li> </ul> </li> <li> <p>\u5e76\u884cCAM\u64cd\u4f5c\uff1a</p> <ul> <li>\u540c\u65f6\u8fdb\u884c\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u5339\u914d</li> <li>\u4f7f\u7528\u5e76\u884c\u4f18\u5148\u7ea7\u903b\u8f91\u5feb\u901f\u627e\u5230\u6700\u76f8\u5173\u7684\u5339\u914d</li> </ul> </li> <li> <p>\u90e8\u5206\u8f6c\u53d1\u68c0\u6d4b\uff1a</p> <ul> <li>\u63d0\u524d\u68c0\u6d4b\u65e0\u6cd5\u5b8c\u6210\u8f6c\u53d1\u7684\u60c5\u51b5\uff0c\u51cf\u5c11\u91cd\u653e</li> <li>\u652f\u6301\u90e8\u5206\u5b57\u8282\u8f6c\u53d1\uff0c\u53ea\u8f6c\u53d1\u6240\u9700\u7684\u6570\u636e</li> </ul> </li> <li> <p>\u5b89\u5168\u4fdd\u969c\u63aa\u65bd\uff1a</p> <ul> <li>\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u5339\u914d\u7ed3\u679c\u6bd4\u8f83\uff0c\u907f\u514d\u522b\u540d\u95ee\u9898</li> <li>\u672a\u5bf9\u9f50\u5b58\u50a8\u6307\u4ee4\u7279\u6b8a\u5904\u7406\uff0c\u907f\u514d\u4e0d\u5b8c\u6574\u8f6c\u53d1</li> </ul> </li> </ol> <p>\u8fd9\u4e9b\u4f18\u5316\u673a\u5236\u4f7f\u5f97XiangShan\u7684\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u80fd\u591f\u540c\u65f6\u6ee1\u8db3\u9ad8\u6027\u80fd\u548c\u6b63\u786e\u6027\u9700\u6c42\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#7-mmio","title":"7. MMIO\u4e0e\u975e\u7f13\u5b58\u5b58\u50a8\u5904\u7406","text":"<p>\u5185\u5b58\u6620\u5c04I/O (MMIO) \u548c\u975e\u7f13\u5b58 (Non-cacheable) \u5b58\u50a8\u662f\u7279\u6b8a\u7c7b\u578b\u7684\u5b58\u50a8\u64cd\u4f5c\uff0c\u9700\u8981\u901a\u8fc7UnCache\u63a5\u53e3\u76f4\u63a5\u8bbf\u95ee\u8bbe\u5907\u6216\u5185\u5b58\uff0c\u4e0d\u4f7f\u7528\u7f13\u5b58\u673a\u5236\u3002XiangShan\u5904\u7406\u5668\u4e2d\uff0cStoreQueue\u8d1f\u8d23\u8fd9\u4e9b\u7279\u6b8a\u5b58\u50a8\u6307\u4ee4\u7684\u5904\u7406\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#71-mmio","title":"7.1 MMIO\u548c\u975e\u7f13\u5b58\u5b58\u50a8\u7684\u8bc6\u522b","text":"<p>\u5728\u5730\u5740\u751f\u6210\u9636\u6bb5\uff0c\u5b58\u50a8\u6307\u4ee4\u4f1a\u88ab\u6807\u8bb0\u4e3aMMIO\u6216\u975e\u7f13\u5b58\u8bbf\u95ee\uff1a</p> <pre><code>// \u66f4\u65b0MMIO\u548c\u975e\u7f13\u5b58\u6807\u5fd7\nwhen (storeAddrInFireReg) {\n  pending(stWbIndexReg) := io.storeAddrInRe(i).mmio\n  mmio(stWbIndexReg) := io.storeAddrInRe(i).mmio\n  memBackTypeMM(stWbIndexReg) := io.storeAddrInRe(i).memBackTypeMM\n  nc(stWbIndexReg) := io.storeAddrInRe(i).nc\n}\n</code></pre> <p>\u8fd9\u4e9b\u6807\u8bb0\u901a\u5e38\u57fa\u4e8e\u7269\u7406\u5730\u5740\u8303\u56f4\u6216\u7279\u6b8a\u7684PMA (Physical Memory Attributes) \u5c5e\u6027\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#72-mmio","title":"7.2 MMIO\u5b58\u50a8\u5904\u7406","text":"<p>MMIO\u5b58\u50a8\u4f7f\u7528\u4e13\u7528\u7684\u72b6\u6001\u673a\u5904\u7406\uff0c\u53ea\u6709\u5f53\u6307\u4ee4\u5230\u8fbeROB\u5934\u90e8\u5e76\u786e\u8ba4\u63d0\u4ea4\u65f6\u624d\u4f1a\u6267\u884c\uff1a</p> <pre><code>val s_idle :: s_req :: s_resp :: s_wb :: s_wait :: Nil = Enum(5)\nval mmioState = RegInit(s_idle)\n\nswitch(mmioState) {\n  is(s_idle) {\n    // \u5f53MMIO\u5b58\u50a8\u5230\u8fbeROB\u5934\u90e8\u65f6\u542f\u52a8\n    when(RegNext(io.rob.pendingst &amp;&amp; uop(deqPtr).robIdx === io.rob.pendingPtr &amp;&amp; \n          pending(deqPtr) &amp;&amp; allocated(deqPtr) &amp;&amp; datavalid(deqPtr) &amp;&amp; addrvalid(deqPtr) &amp;&amp; \n          !hasException(deqPtr))) {\n      mmioState := s_req\n      uncacheUop := uop(deqPtr)\n      // \u521d\u59cb\u5316\u72b6\u6001...\n    }\n  }\n  is(s_req) {\n    when (mmioDoReq) {\n      mmioState := s_resp\n    }\n  }\n  // \u5176\u4ed6\u72b6\u6001\u5904\u7406...\n}\n</code></pre> <p>MMIO\u5904\u7406\u7684\u7279\u70b9\u662f\u4e32\u884c\u6267\u884c\uff0c\u786e\u4fdd\u6bcf\u6761MMIO\u6307\u4ee4\u6309\u7a0b\u5e8f\u987a\u5e8f\u5b8c\u6210\uff0c\u8fd9\u5bf9\u4e8e\u5177\u6709\u526f\u4f5c\u7528\u7684\u8bbe\u5907\u8bbf\u95ee\u81f3\u5173\u91cd\u8981\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#73","title":"7.3 \u975e\u7f13\u5b58\u5b58\u50a8\u5904\u7406","text":"<p>\u975e\u7f13\u5b58(NC)\u5b58\u50a8\u4e5f\u4f7f\u7528\u4e13\u7528\u7684\u72b6\u6001\u673a\u5904\u7406\uff0c\u4f46\u4e0eMMIO\u4e0d\u540c\uff0c\u5b83\u4eec\u5728ROB\u63d0\u4ea4\u540e\u76f4\u63a5\u5904\u7406\uff0c\u4e0d\u9700\u8981\u5230\u8fbeROB\u5934\u90e8\uff1a</p> <pre><code>val nc_idle :: nc_req :: nc_req_ack :: nc_resp :: Nil = Enum(4)\nval ncState = RegInit(nc_idle)\n\nswitch(ncState){\n  is(nc_idle) {\n    // \u5f53NC\u5b58\u50a8\u88ab\u63d0\u4ea4\u540e\u542f\u52a8\n    when(nc(rptr0) &amp;&amp; allocated(rptr0) &amp;&amp; committed(rptr0) &amp;&amp; !mmio(rptr0) &amp;&amp; !isVec(rptr0)) {\n      ncState := nc_req\n      ncWaitRespPtrReg := rptr0\n    }\n  }\n  // \u5176\u4ed6\u72b6\u6001\u5904\u7406...\n}\n</code></pre> <p>\u975e\u7f13\u5b58\u5b58\u50a8\u5141\u8bb8\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5e76\u884c\u6267\u884c\uff0c\u4f46\u4ecd\u7136\u4fdd\u8bc1\u4e86\u7a0b\u5e8f\u987a\u5e8f\u7684\u6b63\u786e\u6027\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#74-uncache","title":"7.4 UnCache\u901a\u9053\u590d\u7528","text":"<p>MMIO\u548c\u975e\u7f13\u5b58\u5b58\u50a8\u5171\u4eab\u540c\u4e00\u4e2aUnCache\u901a\u9053\uff0c\u4f46\u5177\u6709\u4e0d\u540c\u7684\u4f18\u5148\u7ea7\uff1a</p> <pre><code>mmioReq.ready := io.uncache.req.ready\nncReq.ready := io.uncache.req.ready &amp;&amp; !mmioReq.valid\nio.uncache.req.valid := mmioReq.valid || ncReq.valid\nio.uncache.req.bits := Mux(mmioReq.valid, mmioReq.bits, ncReq.bits)\n</code></pre> <p>MMIO\u8bf7\u6c42\u5177\u6709\u66f4\u9ad8\u4f18\u5148\u7ea7\uff0c\u975e\u7f13\u5b58\u8bf7\u6c42\u53ea\u5728\u6ca1\u6709MMIO\u8bf7\u6c42\u65f6\u624d\u80fd\u4f7f\u7528\u901a\u9053\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#75-cmo","title":"7.5 \u7f13\u5b58\u64cd\u4f5c\u6307\u4ee4(CMO)\u5904\u7406","text":"<p>\u7f13\u5b58\u64cd\u4f5c\u6307\u4ee4\u662f\u4e00\u7c7b\u7279\u6b8a\u7684MMIO\u6307\u4ee4\uff0c\u7528\u4e8e\u7ba1\u7406\u7f13\u5b58\u7684\u5185\u5bb9\u3002\u5728XiangShan\u4e2d\uff0c\u6709\u4e24\u79cd\u4e3b\u8981\u7684CMO\u5904\u7406\u673a\u5236\uff1a</p> <ol> <li> <p>\u901a\u7528CMO\u5904\u7406\uff1a\u901a\u8fc7\u4e13\u7528\u63a5\u53e3\u53d1\u9001\u64cd\u4f5c\u8bf7\u6c42\uff0c\u7b49\u5f85\u64cd\u4f5c\u5b8c\u6210</p> </li> <li> <p>CBO.ZERO\u7279\u6b8a\u5904\u7406\uff1a\u9700\u8981\u7b49\u5f85SBuffer\u5237\u65b0\uff0c\u7136\u540e\u6267\u884c\u7279\u6b8a\u7684\u96f6\u5316\u64cd\u4f5c</p> </li> </ol> <p>CMO\u64cd\u4f5c\u901a\u5e38\u7528\u4e8e\u7ef4\u62a4\u7f13\u5b58\u4e00\u81f4\u6027\uff0c\u5c24\u5176\u662f\u5728\u591a\u6838\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u7279\u6b8a\u7684\u5904\u7406\u673a\u5236\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#8","title":"8. \u5f02\u5e38\u5904\u7406","text":"<p>StoreQueue\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\u9700\u8981\u5904\u7406\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u5f02\u5e38\u3002\u4e3a\u4e86\u786e\u4fdd\u7cfb\u7edf\u7684\u53ef\u9760\u6027\u548c\u6b63\u786e\u6027\uff0cXiangShan\u5b9e\u73b0\u4e86\u5b8c\u5907\u7684\u5f02\u5e38\u5904\u7406\u673a\u5236\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#81","title":"8.1 \u5f02\u5e38\u7c7b\u578b","text":"<p>StoreQueue\u5904\u7406\u7684\u4e3b\u8981\u5f02\u5e38\u7c7b\u578b\u5305\u62ec\uff1a</p> <ol> <li> <p>\u5b58\u50a8\u5730\u5740\u4e0d\u5bf9\u9f50(Store Address Misaligned)\uff1a</p> <ul> <li>\u5b58\u50a8\u6307\u4ee4\u7684\u5730\u5740\u672a\u6309\u7167\u5176\u8bbf\u95ee\u5927\u5c0f\u5bf9\u9f50</li> <li>\u4f8b\u5982\uff1a\u534a\u5b57\u5b58\u50a8\u5730\u5740\u4e0d\u662f2\u5b57\u8282\u5bf9\u9f50\uff0c\u5b57\u5b58\u50a8\u5730\u5740\u4e0d\u662f4\u5b57\u8282\u5bf9\u9f50</li> </ul> </li> <li> <p>\u5b58\u50a8\u8bbf\u95ee\u9519\u8bef(Store Access Fault)\uff1a</p> <ul> <li>\u7269\u7406\u5730\u5740\u65e0\u6548\u6216\u4e0d\u5141\u8bb8\u5199\u5165</li> <li>PMP/PMA\u6743\u9650\u4e0d\u5141\u8bb8\u5f53\u524d\u8bf7\u6c42\u8bbf\u95ee</li> </ul> </li> <li> <p>\u9875\u9519\u8bef(Page Fault)\uff1a</p> <ul> <li>\u865a\u62df\u5730\u5740\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u9875\u9519\u8bef</li> <li>\u5305\u62ec\u7f3a\u9875\u3001\u6743\u9650\u4e0d\u8db3\u3001\u4fdd\u62a4\u9519\u8bef\u7b49</li> </ul> </li> <li> <p>\u786c\u4ef6\u9519\u8bef(Hardware Error)\uff1a</p> <ul> <li>\u8bbe\u5907\u6216\u603b\u7ebf\u9519\u8bef</li> <li>ECC\u9519\u8bef</li> <li>\u7cfb\u7edf\u9519\u8bef</li> </ul> </li> <li> <p>\u975e\u6cd5\u6307\u4ee4(Illegal Instruction)\uff1a</p> <ul> <li>\u4e0d\u652f\u6301\u7684\u5b58\u50a8\u6307\u4ee4\u6216\u683c\u5f0f</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#82","title":"8.2 \u5f02\u5e38\u68c0\u6d4b","text":"<p>\u5f02\u5e38\u68c0\u6d4b\u4e3b\u8981\u5728\u5b58\u50a8\u5730\u5740\u8ba1\u7b97\u9636\u6bb5\u8fdb\u884c\uff1a</p> <pre><code>// \u5728Store_S2\u9636\u6bb5\u8bc6\u522b\u548c\u8bb0\u5f55\u5f02\u5e38\nwhen (storeAddrInFireReg) {\n  hasException(stWbIndexReg) := io.storeAddrInRe(i).hasException\n  addrvalid(stWbIndexReg) := addrvalid(stWbIndexReg) || io.storeAddrInRe(i).hasException\n\n  // \u5b58\u50a8\u5730\u5740\u9519\u8bef\n  exceptionBuffer.io.storeAddrIn(StorePipelineWidth + i).valid := io.storeAddrInRe(i).hasException &amp;&amp; \n                                                               !io.storeAddrInRe(i).isvec\n  // \u66f4\u591a\u5f02\u5e38\u5904\u7406...\n}\n</code></pre> <p>\u5411\u91cf\u5b58\u50a8\u7684\u5f02\u5e38\u5904\u7406\u7a0d\u6709\u4e0d\u540c\uff0c\u9700\u8981\u901a\u8fc7\u4e13\u95e8\u7684\u53cd\u9988\u901a\u9053\u63a5\u6536\u5f02\u5e38\u4fe1\u606f\u3002MMIO\u8bbf\u95ee\u53ef\u80fd\u5728UnCache\u54cd\u5e94\u9636\u6bb5\u68c0\u6d4b\u5230\u786c\u4ef6\u9519\u8bef\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#83-storeexceptionbuffer","title":"8.3 StoreExceptionBuffer","text":"<p>\u4e3a\u4e86\u9ad8\u6548\u5904\u7406\u5f02\u5e38\u4fe1\u606f\uff0c\u5c24\u5176\u662f\u5728\u9700\u8981\u63d0\u4f9b\u7cbe\u786e\u7684\u865a\u62df\u5730\u5740\u65f6\uff0cStoreQueue\u4f7f\u7528\u4e13\u7528\u7684StoreExceptionBuffer\uff1a</p> <pre><code>class StoreExceptionBuffer(implicit p: Parameters) extends XSModule with HasCircularQueuePtrHelper {\n  // \u5b9a\u4e49\u63a5\u53e3\u548c\u5185\u90e8\u72b6\u6001\n  // ...\n\n  // \u5165\u961f\u903b\u8f91 - \u68c0\u6d4bS1\u9636\u6bb5\u7684\u5b58\u50a8\u5f02\u5e38\n  val s1_req = VecInit(io.storeAddrIn.map(_.bits))\n  val s1_valid = VecInit(io.storeAddrIn.map(x =&gt;\n      x.valid &amp;&amp; !x.bits.uop.robIdx.needFlush(io.redirect) &amp;&amp; \n        ExceptionNO.selectByFu(x.bits.uop.exceptionVec, StaCfg).asUInt.orR\n  ))\n\n  // S2\u9636\u6bb5 - \u5ef6\u8fdf1\u4e2a\u5468\u671f\n  // ...\n\n  // \u9009\u62e9\u6700\u65e7\u7684\u5f02\u5e38\u8fdb\u884c\u5904\u7406\n  val reqSel = selectOldest(s2_enqueue, s2_req)\n\n  // \u66f4\u65b0\u5f02\u5e38\u4fe1\u606f\n  // ...\n\n  // \u8f93\u51fa\u5f02\u5e38\u5730\u5740\u4fe1\u606f\n  io.exceptionAddr.vaddr := req.fullva\n  // \u5176\u4ed6\u5f02\u5e38\u4fe1\u606f...\n}\n</code></pre> <p>StoreExceptionBuffer\u63a5\u6536\u6765\u81ea\u591a\u4e2a\u7aef\u53e3\u7684\u5f02\u5e38\u4fe1\u606f\uff0c\u9009\u62e9\u6700\u65e7\u7684\u5f02\u5e38\u8fdb\u884c\u5904\u7406\uff0c\u5e76\u63d0\u4f9b\u7cbe\u786e\u7684\u5f02\u5e38\u5730\u5740\u4fe1\u606f\u7ed9\u5904\u7406\u5668\u7684\u5f02\u5e38\u5904\u7406\u673a\u5236\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#84","title":"8.4 \u5f02\u5e38\u5904\u7406\u6d41\u7a0b","text":"<p>\u5f02\u5e38\u7684\u5904\u7406\u6d41\u7a0b\u9075\u5faa\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u68c0\u6d4b\u5f02\u5e38\uff1a\u5728\u5b58\u50a8\u5730\u5740\u8ba1\u7b97\u9636\u6bb5\u68c0\u6d4b\u5f02\u5e38</li> <li>\u8ddf\u8e2a\u5f02\u5e38\uff1a\u5c06\u5e26\u6709\u5f02\u5e38\u6807\u8bb0\u7684\u5b58\u50a8\u6307\u4ee4\u6b63\u5e38\u6d41\u8fc7\u5b58\u50a8\u961f\u5217</li> <li>\u66f4\u65b0StoreExceptionBuffer\uff1a\u5c06\u5f02\u5e38\u4fe1\u606f\u5199\u5165\u4e13\u7528\u7684\u5f02\u5e38\u7f13\u51b2\u533a</li> <li>\u63d0\u4f9b\u7cbe\u786e\u5f02\u5e38\u4fe1\u606f\uff1a\u5f53ROB\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u63d0\u4f9b\u7cbe\u786e\u7684\u865a\u62df\u5730\u5740\u548c\u5f02\u5e38\u4fe1\u606f</li> <li>\u7279\u6b8a\u60c5\u51b5\u5904\u7406\uff1a\u5904\u7406MMIO\u786c\u4ef6\u9519\u8bef\u548c\u5411\u91cf\u5b58\u50a8\u5f02\u5e38</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#85","title":"8.5 \u5411\u91cf\u5b58\u50a8\u5f02\u5e38\u7684\u7279\u6b8a\u5904\u7406","text":"<p>\u5411\u91cf\u5b58\u50a8\u6307\u4ee4\u53ef\u80fd\u6d89\u53ca\u591a\u4e2a\u5143\u7d20\uff0c\u9700\u8981\u7279\u6b8a\u7684\u5f02\u5e38\u5904\u7406\u673a\u5236\uff1a</p> <pre><code>// \u5411\u91cf\u5f02\u5e38\u6807\u8bb0\u793a\u4f8b\nval vecCommitHasException = (0 until EnsbufferWidth).map{ i =&gt;\n  val ptr = rdataPtrExt(i).value\n  val exceptionVliad = isVec(ptr) &amp;&amp; hasException(ptr) &amp;&amp; dataBuffer.io.enq(i).fire\n  (exceptionVliad, uop(ptr), vecLastFlow(ptr))\n}\n\n// \u8bbe\u7f6e\u5411\u91cf\u5f02\u5e38\u6807\u8bb0\nwhen(!vecExceptionFlag.valid &amp;&amp; vecCommitHasExceptionValidOR &amp;&amp; !vecCommitLastFlow) {\n  vecExceptionFlag.valid := true.B\n  vecExceptionFlag.bits := vecCommitHasExceptionSelectUop\n}.elsewhen(vecExceptionFlag.valid &amp;&amp; vecExceptionFlagCancel) {\n  vecExceptionFlag.valid := false.B\n  vecExceptionFlag.bits := 0.U.asTypeOf(new DynInst)\n}\n</code></pre> <p>\u8fd9\u79cd\u673a\u5236\u786e\u4fdd\u4e86\u5411\u91cf\u6307\u4ee4\u7684\u5f02\u5e38\u80fd\u591f\u6b63\u786e\u5904\u7406\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u7a0b\u5e8f\u6267\u884c\u7684\u6b63\u786e\u987a\u5e8f\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#9","title":"9. \u6027\u80fd\u76d1\u63a7\u4e0e\u8c03\u8bd5","text":"<p>StoreQueue\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6027\u80fd\u76d1\u63a7\u548c\u8c03\u8bd5\u529f\u80fd\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u7406\u89e3\u548c\u4f18\u5316\u5b58\u50a8\u7cfb\u7edf\u6027\u80fd\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#91","title":"9.1 \u6027\u80fd\u8ba1\u6570\u5668","text":"<p>StoreQueue\u5b9e\u73b0\u4e86\u591a\u9879\u6027\u80fd\u8ba1\u6570\u5668\u4ee5\u76d1\u63a7\u5173\u952e\u6027\u80fd\u6307\u6807\uff1a</p> <pre><code>// \u961f\u5217\u72b6\u6001\u7edf\u8ba1\nQueuePerf(StoreQueueSize, validCount, !allowEnqueue)\nval vecValidVec = WireInit(VecInit((0 until StoreQueueSize).map(i =&gt; allocated(i) &amp;&amp; isVec(i))))\nQueuePerf(StoreQueueSize, PopCount(vecValidVec), !allowEnqueue)\n\n// MMIO\u76f8\u5173\u7edf\u8ba1\nXSPerfAccumulate(\"mmioCycle\", mmioState =/= s_idle) // lq is busy dealing with uncache req\nXSPerfAccumulate(\"mmioCnt\", mmioDoReq)\nXSPerfAccumulate(\"mmio_wb_success\", io.mmioStout.fire || io.vecmmioStout.fire)\nXSPerfAccumulate(\"mmio_wb_blocked\", (io.mmioStout.valid &amp;&amp; !io.mmioStout.ready) || \n                                (io.vecmmioStout.valid &amp;&amp; !io.vecmmioStout.ready))\n\n// \u961f\u5217\u5229\u7528\u7387\u7edf\u8ba1\nXSPerfAccumulate(\"validEntryCnt\", distanceBetween(enqPtrExt(0), deqPtrExt(0)))\nXSPerfAccumulate(\"cmtEntryCnt\", distanceBetween(cmtPtrExt(0), deqPtrExt(0)))\nXSPerfAccumulate(\"nCmtEntryCnt\", distanceBetween(enqPtrExt(0), cmtPtrExt(0)))\n</code></pre> <p>\u8fd9\u4e9b\u6027\u80fd\u8ba1\u6570\u5668\u5e2e\u52a9\u5f00\u53d1\u8005\u4e86\u89e3StoreQueue\u7684\u8fd0\u884c\u72b6\u6001\u548c\u6027\u80fd\u74f6\u9888\uff0c\u4e3a\u6027\u80fd\u4f18\u5316\u63d0\u4f9b\u4f9d\u636e\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#92","title":"9.2 \u8f6c\u53d1\u6027\u80fd\u76d1\u63a7","text":"<p>StoreQueue\u5bf9\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u8fc7\u7a0b\u63d0\u4f9b\u4e86\u7279\u6b8a\u7684\u6027\u80fd\u76d1\u63a7\uff1a</p> <pre><code>// \u865a\u62df\u5730\u5740\u5339\u914d\u5931\u8d25\u7edf\u8ba1\nXSPerfAccumulate(\"vaddr_match_failed\", vpmaskNotEqual)\nXSPerfAccumulate(\"vaddr_match_really_failed\", vaddrMatchFailed)\n</code></pre> <p>\u8fd9\u4e9b\u7edf\u8ba1\u4fe1\u606f\u6709\u52a9\u4e8e\u7406\u89e3\u548c\u4f18\u5316\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u673a\u5236\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#93","title":"9.3 \u961f\u5217\u72b6\u6001\u8f93\u51fa","text":"<p>StoreQueue\u63d0\u4f9b\u591a\u4e2a\u72b6\u6001\u8f93\u51fa\u63a5\u53e3\uff0c\u5e2e\u52a9\u5904\u7406\u5668\u5176\u4ed6\u90e8\u5206\u76d1\u63a7\u5b58\u50a8\u961f\u5217\u72b6\u6001\uff1a</p> <pre><code>// \u961f\u5217\u72b6\u6001\u8f93\u51fa\nio.sqEmpty := RegNext(\n  enqPtrExt(0).value === deqPtrExt(0).value &amp;&amp;\n  enqPtrExt(0).flag === deqPtrExt(0).flag\n)\nio.sqFull := !allowEnqueue\nio.sqCancelCnt := redirectCancelCount\n\n// \u961f\u5217\u6307\u9488\u8f93\u51fa\nio.stAddrReadySqPtr := addrReadyPtrExt\nio.stAddrReadyVec := GatedValidRegNext(stAddrReadyVecReg)\nio.stDataReadySqPtr := dataReadyPtrExt\nio.stDataReadyVec := GatedValidRegNext(stDataReadyVecReg)\nio.stIssuePtr := enqPtrExt(0)\nio.sqDeqPtr := deqPtrExt(0)\n</code></pre> <p>\u8fd9\u4e9b\u72b6\u6001\u8f93\u51fa\u4f7f\u5904\u7406\u5668\u5176\u4ed6\u90e8\u5206\u80fd\u591f\u4e86\u89e3StoreQueue\u7684\u72b6\u6001\uff0c\u505a\u51fa\u76f8\u5e94\u7684\u51b3\u7b56\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#94-difftest","title":"9.4 Difftest\u652f\u6301","text":"<p>StoreQueue\u652f\u6301Difftest\u529f\u80fd\uff0c\u7528\u4e8e\u4e0e\u53c2\u8003\u6a21\u578b\u6bd4\u8f83\u9a8c\u8bc1\u884c\u4e3a\u7684\u6b63\u786e\u6027\uff1a</p> <pre><code>// Difftest\u5b58\u50a8\u63d0\u4ea4\u4fe1\u606f\u793a\u4f8b\nif (env.EnableDifftest) {\n  for (i &lt;- 0 until EnsbufferWidth) {\n    val ptr = dataBuffer.io.enq(i).bits.sqPtr.value\n    difftestBuffer.get.io.enq(i).valid := dataBuffer.io.enq(i).valid\n    difftestBuffer.get.io.enq(i).bits := uop(ptr)\n  }\n\n  // CMO Inval\u4e8b\u4ef6Difftest\n  val cmoInvalEvent = DifftestModule(new DiffCMOInvalEvent)\n  cmoInvalEvent.coreid := io.hartId\n  cmoInvalEvent.valid  := io.mmioStout.fire &amp;&amp; deqCanDoCbo &amp;&amp; LSUOpType.isCboInval(uop(deqPtr).fuOpType)\n  cmoInvalEvent.addr   := cboMmioAddr\n}\n</code></pre> <p>Difftest\u652f\u6301\u5bf9\u4e8e\u9a8c\u8bc1StoreQueue\u5b9e\u73b0\u7684\u6b63\u786e\u6027\u81f3\u5173\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5728\u590d\u6742\u7684\u4e71\u5e8f\u5904\u7406\u5668\u4e2d\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#95","title":"9.5 \u8c03\u8bd5\u63a5\u53e3\u548c\u65ad\u8a00","text":"<p>StoreQueue\u5305\u542b\u4e30\u5bcc\u7684\u8c03\u8bd5\u4fe1\u606f\u548c\u65ad\u8a00\uff0c\u5e2e\u52a9\u9a8c\u8bc1\u884c\u4e3a\u7684\u6b63\u786e\u6027\uff1a</p> <pre><code>// \u8c03\u8bd5\u6570\u636e\u8ddf\u8e2a\nval debug_paddr = Reg(Vec(StoreQueueSize, UInt((PAddrBits).W)))\nval debug_vaddr = Reg(Vec(StoreQueueSize, UInt((VAddrBits).W)))\nval debug_data = Reg(Vec(StoreQueueSize, UInt((XLEN).W)))\n\n// \u5173\u952e\u65ad\u8a00\nassert(!RegNext(RegNext(io.sbuffer(0).fire) &amp;&amp; (io.mmioStout.fire || io.vecmmioStout.fire)))\nassert(!(PopCount(isCboZeroToSbVec) &gt; 1.U), \n       \"Multiple cbo zero instructions cannot be executed at the same time\")\n(1 until EnsbufferWidth).foreach(i =&gt; when(io.sbuffer(i).fire) { assert(io.sbuffer(i - 1).fire) })\n</code></pre> <p>\u8fd9\u4e9b\u8c03\u8bd5\u673a\u5236\u6709\u52a9\u4e8e\u5728\u5f00\u53d1\u548c\u9a8c\u8bc1\u9636\u6bb5\u53d1\u73b0\u548c\u4fee\u590d\u6f5c\u5728\u7684\u95ee\u9898\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#96","title":"9.6 \u8c03\u8bd5\u65e5\u5fd7","text":"<p>StoreQueue\u4f7f\u7528XSDebug\u548cXSInfo\u51fd\u6570\u8bb0\u5f55\u5173\u952e\u64cd\u4f5c\u7684\u65e5\u5fd7\u4fe1\u606f\uff1a</p> <pre><code>// \u5b58\u50a8\u5730\u5740\u5199\u5165\u65e5\u5fd7\nXSInfo(io.storeAddrIn(i).fire &amp;&amp; !io.storeAddrIn(i).bits.isFrmMisAlignBuf,\n  \"store addr write to sq idx %d pc 0x%x miss:%d vaddr %x paddr %x mmio %x isvec %x\\n\",\n  io.storeAddrIn(i).bits.uop.sqIdx.value,\n  io.storeAddrIn(i).bits.uop.pc,\n  io.storeAddrIn(i).bits.miss,\n  io.storeAddrIn(i).bits.vaddr,\n  io.storeAddrIn(i).bits.paddr,\n  io.storeAddrIn(i).bits.mmio,\n  io.storeAddrIn(i).bits.isvec\n)\n</code></pre> <p>\u8fd9\u4e9b\u65e5\u5fd7\u4fe1\u606f\u5bf9\u4e8e\u7406\u89e3\u7cfb\u7edf\u884c\u4e3a\u548c\u8c03\u8bd5\u95ee\u9898\u975e\u5e38\u6709\u7528\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#97","title":"9.7 \u6027\u80fd\u8c03\u4f18\u63a5\u53e3","text":"<p>StoreQueue\u63d0\u4f9b\u4e86\u6027\u80fd\u8c03\u4f18\u63a5\u53e3\uff0c\u5141\u8bb8\u52a8\u6001\u63a7\u5236\u67d0\u4e9b\u884c\u4e3a\uff1a</p> <pre><code>// \u5f3a\u5236\u5199\u5165\u63a7\u5236\nval ForceWriteUpper = Wire(UInt(log2Up(StoreQueueSize + 1).W))\nForceWriteUpper := Constantin.createRecord(s\"ForceWriteUpper_${p(XSCoreParamsKey).HartId}\", \n                                         initValue = StoreQueueForceWriteSbufferUpper)\nval ForceWriteLower = Wire(UInt(log2Up(StoreQueueSize + 1).W))\nForceWriteLower := Constantin.createRecord(s\"ForceWriteLower_${p(XSCoreParamsKey).HartId}\", \n                                         initValue = StoreQueueForceWriteSbufferLower)\n\nval valid_cnt = PopCount(allocated)\nio.force_write := RegNext(Mux(valid_cnt &gt;= ForceWriteUpper, true.B, \n                            valid_cnt &gt;= ForceWriteLower &amp;&amp; io.force_write), init = false.B)\n</code></pre> <p>\u8fd9\u4e9b\u63a5\u53e3\u4f7fStoreQueue\u80fd\u591f\u6839\u636e\u4e0d\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u7279\u6027\u8fdb\u884c\u52a8\u6001\u8c03\u6574\uff0c\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#10-storequeue","title":"10. StoreQueue\u4e0e\u5176\u4ed6\u6a21\u5757\u7684\u4ea4\u4e92","text":"<p>StoreQueue\u662fXiangShan\u5904\u7406\u5668\u5185\u5b58\u7cfb\u7edf\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u4e0e\u591a\u4e2a\u5176\u4ed6\u6a21\u5757\u7d27\u5bc6\u4ea4\u4e92\uff1a</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#101-loadqueueloadunit","title":"10.1 \u4e0eLoadQueue\u548cLoadUnit\u7684\u4ea4\u4e92","text":"<ol> <li>\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\uff1a<ul> <li>\u63a5\u6536LoadUnit\u7684\u8f6c\u53d1\u67e5\u8be2</li> <li>\u63d0\u4f9b\u6570\u636e\u548c\u4f9d\u8d56\u4fe1\u606f</li> <li>\u786e\u4fdd\u6570\u636e\u4f9d\u8d56\u7684\u6b63\u786e\u6027</li> </ul> </li> </ol> <pre><code>// \u8f6c\u53d1\u63a5\u53e3\nval forward = Vec(LoadPipelineWidth, Flipped(new PipeLoadForwardQueryIO))\n</code></pre> <ol> <li>\u5185\u5b58\u6392\u5e8f\u68c0\u67e5\uff1a<ul> <li>\u534f\u52a9LoadQueue\u8fdb\u884c\u5185\u5b58\u6392\u5e8f\u8fdd\u89c4\u68c0\u67e5</li> <li>\u63d0\u4f9b\u5b58\u50a8\u5730\u5740\u4fe1\u606f\u7528\u4e8e\u6bd4\u8f83</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#102-rob","title":"10.2 \u4e0eROB\u7684\u4ea4\u4e92","text":"<ol> <li>\u63d0\u4ea4\u63a7\u5236\uff1a<ul> <li>\u63a5\u6536ROB\u7684\u63d0\u4ea4\u4fe1\u53f7</li> <li>\u6839\u636eROB\u6307\u793a\u63d0\u4ea4\u5b58\u50a8\u6307\u4ee4</li> <li>\u5904\u7406\u7279\u6b8a\u60c5\u51b5\uff08\u5982MMIO\u5fc5\u987b\u5728ROB\u5934\u90e8\uff09</li> </ul> </li> </ol> <pre><code>// ROB\u63a5\u53e3\u793a\u4f8b\nval rob = Flipped(new RobLsqIO)\n</code></pre> <ol> <li> <p>\u5f02\u5e38\u5904\u7406\uff1a</p> <ul> <li>\u5411ROB\u62a5\u544a\u5b58\u50a8\u5f02\u5e38</li> <li>\u63d0\u4f9b\u7cbe\u786e\u7684\u5f02\u5e38\u5730\u5740\u548c\u7c7b\u578b</li> </ul> </li> <li> <p>\u5b8c\u6210\u901a\u77e5\uff1a</p> <ul> <li>\u901a\u77e5ROB\u5b58\u50a8\u6307\u4ee4\u5b8c\u6210</li> <li>\u5141\u8bb8ROB\u91ca\u653e\u76f8\u5173\u8d44\u6e90</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#103-sbuffer","title":"10.3 \u4e0eSBuffer\u7684\u4ea4\u4e92","text":"<ol> <li>\u6570\u636e\u4f20\u9012\uff1a<ul> <li>\u5c06\u5df2\u63d0\u4ea4\u7684\u5b58\u50a8\u6570\u636e\u53d1\u9001\u5230SBuffer</li> <li>\u8bbe\u7f6e\u76f8\u5e94\u7684\u63a7\u5236\u6807\u5fd7\uff08\u5982\u6574\u884c\u5199\u5165\u3001\u9884\u53d6\u7b49\uff09</li> </ul> </li> </ol> <pre><code>// SBuffer\u63a5\u53e3\nval sbuffer = Vec(EnsbufferWidth, Decoupled(new DCacheWordReqWithVaddrAndPfFlag))\n</code></pre> <ol> <li>\u72b6\u6001\u540c\u6b65\uff1a<ul> <li>\u76d1\u63a7SBuffer\u72b6\u6001</li> <li>\u5904\u7406\u7279\u6b8a\u60c5\u51b5\uff08\u5982CBO.ZERO\u9700\u8981\u7b49\u5f85SBuffer\u5237\u65b0\uff09</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#104-uncache","title":"10.4 \u4e0eUnCache\u6a21\u5757\u7684\u4ea4\u4e92","text":"<ol> <li> <p>MMIO\u8bf7\u6c42\uff1a</p> <ul> <li>\u53d1\u9001MMIO\u5b58\u50a8\u8bf7\u6c42</li> <li>\u63a5\u6536\u54cd\u5e94\u548c\u5904\u7406\u9519\u8bef</li> </ul> </li> <li> <p>\u975e\u7f13\u5b58\u8bf7\u6c42\uff1a</p> <ul> <li>\u53d1\u9001\u975e\u7f13\u5b58\u5b58\u50a8\u8bf7\u6c42</li> <li>\u7ba1\u7406\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f</li> </ul> </li> </ol> <pre><code>// UnCache\u63a5\u53e3\nval uncache = new UncacheWordIO\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#105-storemisalignbuffer","title":"10.5 \u4e0eStoreMisalignBuffer\u7684\u4ea4\u4e92","text":"<ol> <li> <p>\u975e\u5bf9\u9f50\u5b58\u50a8\u5904\u7406\uff1a</p> <ul> <li>\u68c0\u6d4b\u975e\u5bf9\u9f50\u5b58\u50a8</li> <li>\u4e0eStoreMisalignBuffer\u534f\u4f5c\u5b8c\u6210\u975e\u5bf9\u9f50\u8bbf\u95ee</li> </ul> </li> <li> <p>\u8de8\u9875\u5b58\u50a8\u5904\u7406\uff1a</p> <ul> <li>\u8bc6\u522b\u8de8\u9875\u5b58\u50a8</li> <li>\u534f\u8c03\u8de8\u9875\u8bbf\u95ee\u7684\u7279\u6b8a\u5904\u7406</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#106","title":"10.6 \u4e0e\u5206\u652f\u9884\u6d4b\u5355\u5143\u7684\u4ea4\u4e92","text":"<ol> <li>\u91cd\u5b9a\u5411\u5904\u7406\uff1a<ul> <li>\u63a5\u6536\u5206\u652f\u91cd\u5b9a\u5411\u4fe1\u53f7</li> <li>\u53d6\u6d88\u9519\u8bef\u8def\u5f84\u4e0a\u7684\u5b58\u50a8\u6307\u4ee4</li> <li>\u6062\u590d\u961f\u5217\u6307\u9488\u548c\u72b6\u6001</li> </ul> </li> </ol> <pre><code>// \u5206\u652f\u91cd\u5b9a\u5411\u63a5\u53e3\nval brqRedirect = Flipped(ValidIO(new Redirect))\n</code></pre> <p>\u8fd9\u4e9b\u4ea4\u4e92\u673a\u5236\u4f7fStoreQueue\u80fd\u591f\u5728\u590d\u6742\u7684\u4e71\u5e8f\u5904\u7406\u5668\u73af\u5883\u4e2d\u6b63\u786e\u9ad8\u6548\u5730\u8fd0\u884c\uff0c\u540c\u65f6\u4fdd\u8bc1\u5185\u5b58\u8bbf\u95ee\u7684\u4e00\u81f4\u6027\u548c\u6b63\u786e\u6027\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#11_1","title":"11. \u5b9e\u4f8b\u5206\u6790\uff1a\u5b58\u50a8\u6307\u4ee4\u5904\u7406\u6d41\u7a0b","text":"<p>\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3StoreQueue\u7684\u5de5\u4f5c\u673a\u5236\uff0c\u4e0b\u9762\u901a\u8fc7\u4e24\u4e2a\u5177\u4f53\u5b9e\u4f8b\u5206\u6790\u5b58\u50a8\u6307\u4ee4\u7684\u5b8c\u6574\u5904\u7406\u6d41\u7a0b\uff0c\u5305\u62ec\u666e\u901a\u5b58\u50a8\u6307\u4ee4\u548cMMIO\u5b58\u50a8\u6307\u4ee4\u7684\u5904\u7406\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#111","title":"11.1 \u666e\u901a\u5b58\u50a8\u6307\u4ee4\u5904\u7406\u5b9e\u4f8b","text":"<p>\u6211\u4eec\u4ee5\u4e00\u6761\u666e\u901a\u768432\u4f4d\u5b57\u5b58\u50a8\u6307\u4ee4\u4e3a\u4f8b\uff0c\u8ffd\u8e2a\u5176\u5728StoreQueue\u4e2d\u7684\u5b8c\u6574\u751f\u547d\u5468\u671f\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#_1","title":"\u573a\u666f\u8bbe\u7f6e","text":"<p>\u5047\u8bbe\u5904\u7406\u5668\u6b63\u5728\u6267\u884c\u4ee5\u4e0b\u5b58\u50a8\u6307\u4ee4\uff1a<code>sw t0, 0(a0)</code> (\u5c06\u5bc4\u5b58\u5668t0\u7684\u5185\u5bb9\u5b58\u50a8\u5230\u5bc4\u5b58\u5668a0\u6307\u5411\u7684\u5185\u5b58\u5730\u5740)</p> <ul> <li>ROB\u7d22\u5f15: 76</li> <li>\u5b58\u50a8\u6570\u636e: 0x12345678</li> <li>\u76ee\u6807\u5730\u5740: 0x80001000</li> <li>\u521d\u59cb\u961f\u5217\u72b6\u6001: <code>enqPtr = 5</code>, <code>deqPtr = 2</code>, <code>cmtPtr = 3</code></li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#1_1","title":"\u9636\u6bb51: \u6307\u4ee4\u5165\u961f","text":"<p>\u540e\u7aef\u5206\u53d1\u8be5\u5b58\u50a8\u6307\u4ee4\u5230StoreQueue\uff1a</p> <pre><code>io.enq.req(0).valid = true\nio.enq.req(0).bits.robIdx = 76\nio.enq.req(0).bits.sqIdx = 5 (\u7531\u5206\u914d\u5f97\u5230)\n</code></pre> <ol> <li> <p>\u7a7a\u95f4\u68c0\u67e5:</p> <ul> <li><code>validCount = enqPtr - deqPtr = 5 - 2 = 3</code>\uff0c\u5c0f\u4e8e\u961f\u5217\u5927\u5c0f</li> <li>\u5224\u5b9a<code>allowEnqueue = true</code>\uff0c\u53ef\u4ee5\u63a5\u6536\u65b0\u6307\u4ee4</li> </ul> </li> <li> <p>\u5165\u961f\u5904\u7406:</p> <ul> <li>\u6761\u76ee5\u88ab\u5206\u914d\u7ed9\u8be5\u6307\u4ee4</li> <li>\u8bbe\u7f6e\u72b6\u6001\u6807\u5fd7:  <pre><code>allocated(5) = true   // \u6807\u8bb0\u4e3a\u5df2\u5206\u914d\ncompleted(5) = false  // \u5c1a\u672a\u5b8c\u6210\naddrvalid(5) = false  // \u5730\u5740\u5c1a\u672a\u5c31\u7eea\ndatavalid(5) = false  // \u6570\u636e\u5c1a\u672a\u5c31\u7eea\ncommitted(5) = false  // \u5c1a\u672a\u88abROB\u63d0\u4ea4\n</code></pre></li> <li>\u66f4\u65b0\u5fae\u64cd\u4f5c\u4fe1\u606f: <code>uop(5) = \u5305\u542b\u5b58\u50a8\u6307\u4ee4\u5fae\u64cd\u4f5c\u4fe1\u606f</code></li> </ul> </li> <li> <p>\u5165\u961f\u6307\u9488\u66f4\u65b0:</p> <ul> <li><code>enqPtr = 5 + 1 = 6</code> (\u66f4\u65b0\u4e3a\u4e0b\u4e00\u4e2a\u4f4d\u7f6e)</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#2_1","title":"\u9636\u6bb52: \u5730\u5740\u8ba1\u7b97\u548c\u5199\u5165","text":"<p>\u5b58\u50a8\u5730\u5740\u4ece\u5730\u5740\u751f\u6210\u5355\u5143(AGU)\u5199\u5165StoreQueue:</p> <pre><code>io.storeAddrIn(0).valid = true\nio.storeAddrIn(0).bits.uop.sqIdx = 5\nio.storeAddrIn(0).bits.paddr = 0x80001000\nio.storeAddrIn(0).bits.vaddr = 0x80001000  // \u7b80\u5316\u793a\u4f8b\uff0c\u7269\u7406\u5730\u5740\u7b49\u4e8e\u865a\u62df\u5730\u5740\nio.storeAddrIn(0).bits.mask = 0b1111      // 4\u5b57\u8282\u63a9\u7801\n</code></pre> <ol> <li> <p>\u5730\u5740\u5199\u5165\u5904\u7406:</p> <ul> <li>\u5730\u5740\u8ba1\u7b97\u672a\u53d1\u751f\u7f13\u5b58\u7f3a\u5931\uff0c\u56e0\u6b64<code>addrvalid(5) = true</code></li> <li>\u4e0d\u662fMMIO/NC\u8bbf\u95ee: <code>mmio(5) = false</code>, <code>nc(5) = false</code></li> <li>\u4e0d\u662f\u975e\u5bf9\u9f50\u8bbf\u95ee: <code>unaligned(5) = false</code></li> </ul> </li> <li> <p>\u5730\u5740\u6a21\u5757\u66f4\u65b0:</p> <ul> <li>\u7269\u7406\u5730\u5740\u6a21\u5757: <code>paddrModule.wdata(0) = 0x80001000</code></li> <li>\u865a\u62df\u5730\u5740\u6a21\u5757: <code>vaddrModule.wdata(0) = 0x80001000</code></li> <li>\u66f4\u65b0\u8bbf\u95ee\u63a9\u7801: <code>paddrModule.wmask(0) = 0b1111</code></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#3_1","title":"\u9636\u6bb53: \u6570\u636e\u5199\u5165","text":"<p>\u6267\u884c\u5355\u5143\u8ba1\u7b97\u5b8c\u6570\u636e\u540e\u5199\u5165StoreQueue:</p> <pre><code>io.storeDataIn(0).valid = true\nio.storeDataIn(0).bits.uop.sqIdx = 5\nio.storeDataIn(0).bits.data = 0x12345678\n</code></pre> <ol> <li> <p>\u6570\u636e\u5199\u5165\u5904\u7406:</p> <ul> <li>\u66f4\u65b0\u6570\u636e\u6a21\u5757: <code>dataModule.wdata(0) = 0x12345678</code></li> <li>\u8bbe\u7f6e\u6570\u636e\u5c31\u7eea\u6807\u5fd7: <code>datavalid(5) = true</code></li> </ul> </li> <li> <p>\u72b6\u6001\u66f4\u65b0:</p> <ul> <li>\u6b64\u65f6\u6761\u76ee5\u7684\u72b6\u6001\u4e3a:  <pre><code>allocated(5) = true\naddrvalid(5) = true   // \u5730\u5740\u5df2\u5c31\u7eea\ndatavalid(5) = true   // \u6570\u636e\u5df2\u5c31\u7eea\nallvalid(5) = true    // \u5730\u5740\u548c\u6570\u636e\u90fd\u5c31\u7eea\ncommitted(5) = false  // \u5c1a\u672a\u88abROB\u63d0\u4ea4\n</code></pre></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#4-rob","title":"\u9636\u6bb54: ROB\u63d0\u4ea4","text":"<p>\u6307\u4ee4\u5230\u8fbeROB\u5934\u90e8\u5e76\u88ab\u786e\u8ba4\u53ef\u4ee5\u63d0\u4ea4:</p> <pre><code>// ROB\u4fe1\u53f7\nio.rob.scommit(0) = true          // \u63d0\u4ea4\u5b58\u50a8\u6307\u4ee40\nio.rob.scommit(1) = false         // \u65e0\u63d0\u4ea4\u5b58\u50a8\u6307\u4ee41\nio.rob.pendingPtr = 76            // \u5f53\u524dROB\u5934\u90e8\u6307\u4ee4\u7684\u7d22\u5f15\n</code></pre> <ol> <li> <p>\u63d0\u4ea4\u5904\u7406:</p> <ul> <li>\u6761\u4ef6:<ul> <li><code>allocated(5) = true</code></li> <li><code>robIdx(5) = 76</code> \u4e0eROB\u5934\u90e8\u6307\u4ee4\u5339\u914d</li> <li>\u6307\u4ee4\u672a\u88ab\u53d6\u6d88\uff0cS2\u9636\u6bb5\u5df2\u5b8c\u6210</li> </ul> </li> <li>\u8bbe\u7f6e\u63d0\u4ea4\u6807\u5fd7: <code>committed(5) = true</code></li> </ul> </li> <li> <p>\u63d0\u4ea4\u6307\u9488\u66f4\u65b0:</p> <ul> <li><code>cmtPtr = 3 + 1 = 4</code> (\u63d0\u4ea41\u6761\u6307\u4ee4)</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#5-sbuffer","title":"\u9636\u6bb55: \u5199\u5165SBuffer","text":"<p>\u6307\u4ee4\u5b8c\u6210\u6240\u6709\u51c6\u5907\uff0c\u51c6\u5907\u5199\u5165\u5230SBuffer:</p> <ol> <li> <p>\u6570\u636e\u7f13\u51b2\u533a\u51c6\u5907:</p> <ul> <li>\u68c0\u67e5\u6761\u4ef6:  <pre><code>allocated(5) = true\ncommitted(5) = true\nallvalid(5) = true   // \u5730\u5740\u548c\u6570\u636e\u90fd\u5c31\u7eea\n!mmio(5) &amp;&amp; !nc(5)   // \u975eMMIO\u548c\u975e\u7f13\u5b58\u6307\u4ee4\n!unaligned(5)        // \u975e\u975e\u5bf9\u9f50\u8bbf\u95ee\n</code></pre></li> <li>\u51c6\u5907\u6570\u636e\u7f13\u51b2\u533a\u6761\u76ee:  <pre><code>dataBuffer.enq(0).valid = true\ndataBuffer.enq(0).bits.addr = 0x80001000\ndataBuffer.enq(0).bits.data = 0x12345678\ndataBuffer.enq(0).bits.mask = 0b1111\n</code></pre></li> </ul> </li> <li> <p>\u5199\u5165SBuffer:</p> <ul> <li>SBuffer\u63a5\u53d7\u5199\u5165\u8bf7\u6c42:  <pre><code>io.sbuffer(0).valid = true\nio.sbuffer(0).bits.cmd = M_XWR   // \u5199\u64cd\u4f5c\nio.sbuffer(0).bits.addr = 0x80001000\nio.sbuffer(0).bits.data = 0x12345678\nio.sbuffer(0).bits.mask = 0b1111\n</code></pre></li> <li>SBuffer\u63a5\u53d7\u8bf7\u6c42: <code>io.sbuffer(0).ready = true</code></li> <li>\u6807\u8bb0\u6761\u76ee\u5b8c\u6210: <code>completed(5) = true</code></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#6","title":"\u9636\u6bb56: \u6307\u4ee4\u5b8c\u6210\u548c\u51fa\u961f","text":"<p>\u6307\u4ee4\u5b8c\u5168\u6267\u884c\u5b8c\u6bd5\uff0c\u9700\u8981\u4ece\u961f\u5217\u79fb\u9664:</p> <ol> <li> <p>\u5b8c\u6210\u68c0\u67e5:</p> <ul> <li>\u6761\u76ee5\u72b6\u6001:  <pre><code>allocated(5) = true\ncompleted(5) = true  // \u5df2\u5b8c\u6210\u5199\u5165SBuffer\n</code></pre></li> </ul> </li> <li> <p>\u51fa\u961f\u5904\u7406:</p> <ul> <li>\u961f\u5217\u51fa\u961f\u6570\u636e: <code>deqPtr = 2 + 1 = 3</code> (\u5047\u8bbe\u961f\u5217\u4e2d\u53ea\u6709\u4e4b\u524d\u7684\u4e00\u6761\u6307\u4ee4\u88ab\u5904\u7406)</li> </ul> </li> <li> <p>\u6700\u7ec8\u72b6\u6001:</p> <ul> <li>\u6761\u76ee5\u5c06\u5728\u540e\u7eed\u88ab\u65b0\u6307\u4ee4\u8986\u76d6</li> <li>\u961f\u5217\u72b6\u6001:  <pre><code>enqPtr = 6   // \u6307\u5411\u4e0b\u4e00\u4e2a\u8981\u5206\u914d\u7684\u6761\u76ee\ndeqPtr = 3   // \u6307\u5411\u4e0b\u4e00\u4e2a\u8981\u5b8c\u6210\u7684\u6761\u76ee\ncmtPtr = 4   // \u6307\u5411\u4e0b\u4e00\u4e2a\u8981\u63d0\u4ea4\u7684\u6761\u76ee\n</code></pre></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#112-mmio","title":"11.2 MMIO\u5b58\u50a8\u6307\u4ee4\u5904\u7406\u5b9e\u4f8b","text":"<p>MMIO\u5b58\u50a8\u6307\u4ee4\u9700\u8981\u7279\u6b8a\u5904\u7406\uff0c\u901a\u8fc7UnCache\u6e20\u9053\u76f4\u63a5\u8bbf\u95ee\u8bbe\u5907\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#_2","title":"\u573a\u666f\u8bbe\u7f6e","text":"<p>\u5047\u8bbe\u5904\u7406\u5668\u6267\u884c\u4e00\u6761\u8bbf\u95ee\u8bbe\u5907\u5bc4\u5b58\u5668\u7684\u5b58\u50a8\u6307\u4ee4: <code>sw t1, 0(t2)</code> (\u5176\u4e2dt2\u5305\u542b\u7684\u662f\u4e00\u4e2a\u8bbe\u5907\u5730\u5740)</p> <ul> <li>ROB\u7d22\u5f15: 42</li> <li>\u5b58\u50a8\u6570\u636e: 0xABCDEF01</li> <li>\u76ee\u6807\u5730\u5740: 0x10000000 (\u5047\u8bbe\u8fd9\u662f\u4e00\u4e2aMMIO\u5730\u5740)</li> <li>\u521d\u59cb\u961f\u5217\u72b6\u6001: <code>enqPtr = 10</code>, <code>deqPtr = 7</code>, <code>cmtPtr = 8</code></li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#1_2","title":"\u9636\u6bb51: \u6307\u4ee4\u5165\u961f\u548c\u5730\u5740\u5199\u5165","text":"<p>\u5165\u961f\u8fc7\u7a0b\u4e0e\u666e\u901a\u5b58\u50a8\u7c7b\u4f3c\uff0c\u6b64\u5904\u7b80\u5316\u3002\u5173\u952e\u533a\u522b\u5728\u4e8e\u5730\u5740\u5199\u5165\u9636\u6bb5:</p> <pre><code>io.storeAddrIn(0).valid = true\nio.storeAddrIn(0).bits.uop.sqIdx = 10\nio.storeAddrIn(0).bits.paddr = 0x10000000\nio.storeAddrIn(0).bits.vaddr = 0x10000000\nio.storeAddrIn(0).bits.mask = 0b1111\nio.storeAddrIn(0).bits.mmio = true  // \u5173\u952e\u533a\u522b\uff0c\u6807\u8bb0\u4e3aMMIO\n</code></pre> <ol> <li> <p>\u5730\u5740\u5199\u5165\u5904\u7406:</p> <ul> <li>\u8bbe\u7f6eMMIO\u76f8\u5173\u6807\u5fd7:  <pre><code>addrvalid(10) = true\nmmio(10) = true      // \u6807\u8bb0\u4e3aMMIO\u6307\u4ee4\npending(10) = true   // \u8bbe\u7f6e\u4e3a\u6302\u8d77\u72b6\u6001\n</code></pre></li> </ul> </li> <li> <p>\u6570\u636e\u5199\u5165\u5b8c\u6210\u540e:</p> <ul> <li>\u6761\u76ee10\u72b6\u6001:  <pre><code>allocated(10) = true\naddrvalid(10) = true\ndatavalid(10) = true\nmmio(10) = true\ncommitted(10) = false\n</code></pre></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#2-rob","title":"\u9636\u6bb52: \u7b49\u5f85ROB\u5934\u90e8\u4e14\u63d0\u4ea4","text":"<p>MMIO\u5b58\u50a8\u6307\u4ee4\u5fc5\u987b\u7b49\u5230\u5230\u8fbeROB\u5934\u90e8\u5e76\u6210\u4e3a\u6682\u6302\u5b58\u50a8\u6307\u4ee4\u65f6\u624d\u80fd\u6267\u884c:</p> <pre><code>io.rob.pendingst = true      // \u5b58\u5728\u6682\u6302\u5b58\u50a8\u6307\u4ee4\nio.rob.pendingPtr = 42       // \u5f53\u524d\u6682\u6302\u6307\u4ee4\u7684\u7d22\u5f15\n</code></pre> <ol> <li>MMIO\u72b6\u6001\u673a\u6fc0\u6d3b:<ul> <li>\u68c0\u67e5\u6761\u4ef6:  <pre><code>uop(10).robIdx = 42     // \u7b49\u4e8eROB\u5934\u90e8\u6307\u4ee4\npending(10) = true      // \u4e3aMMIO\u6302\u8d77\u72b6\u6001\nallocated(10) = true    // \u5df2\u5206\u914d\ndatavalid(10) = true    // \u6570\u636e\u6709\u6548\naddrvalid(10) = true    // \u5730\u5740\u6709\u6548\n!hasException(10)       // \u65e0\u5f02\u5e38\n</code></pre></li> <li>MMIO\u72b6\u6001\u673a\u8f6c\u79fb: <code>mmioState: s_idle -&gt; s_req</code></li> <li>\u4fdd\u5b58\u5fae\u64cd\u4f5c: <code>uncacheUop = uop(10)</code></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#3-uncache","title":"\u9636\u6bb53: \u53d1\u9001UnCache\u8bf7\u6c42","text":"<p>MMIO\u72b6\u6001\u673a\u5904\u7406UnCache\u8bf7\u6c42:</p> <ol> <li> <p>\u51c6\u5907UnCache\u8bf7\u6c42:    <pre><code>mmioReq.valid = true\nmmioReq.bits.cmd = M_XWR         // \u5199\u64cd\u4f5c\nmmioReq.bits.addr = 0x10000000   // MMIO\u7269\u7406\u5730\u5740\nmmioReq.bits.data = 0xABCDEF01   // \u5199\u5165\u6570\u636e\nmmioReq.bits.mask = 0b1111       // 4\u5b57\u8282\u63a9\u7801\n</code></pre></p> </li> <li> <p>\u53d1\u9001\u8bf7\u6c42\u5230UnCache\u63a5\u53e3:    <pre><code>io.uncache.req.valid = true\nio.uncache.req.bits = mmioReq.bits\n</code></pre></p> </li> <li> <p>UnCache\u786e\u8ba4\u63a5\u6536\u8bf7\u6c42:</p> <ul> <li><code>io.uncache.req.ready = true</code></li> <li>MMIO\u72b6\u6001\u673a\u8f6c\u79fb: <code>mmioState: s_req -&gt; s_resp</code></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#4-uncache","title":"\u9636\u6bb54: \u7b49\u5f85UnCache\u54cd\u5e94","text":"<p>MMIO\u72b6\u6001\u673a\u7b49\u5f85\u8bbe\u5907\u54cd\u5e94:</p> <ol> <li> <p>\u63a5\u6536UnCache\u54cd\u5e94:    <pre><code>io.uncache.resp.valid = true\nio.uncache.resp.bits.nc = false\nio.uncache.resp.bits.nderr = false  // \u65e0\u786c\u4ef6\u9519\u8bef\n</code></pre></p> </li> <li> <p>\u72b6\u6001\u673a\u66f4\u65b0:</p> <ul> <li>MMIO\u72b6\u6001\u673a\u8f6c\u79fb: <code>mmioState: s_resp -&gt; s_wb</code></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#5_1","title":"\u9636\u6bb55: \u5199\u56de\u5904\u7406\u5668","text":"<p>MMIO\u72b6\u6001\u673a\u5c06\u7ed3\u679c\u5199\u56de\u5904\u7406\u5668:</p> <ol> <li> <p>\u51c6\u5907\u5199\u56de\u4fe1\u606f:    <pre><code>io.mmioStout.valid = true\nio.mmioStout.bits.uop = uncacheUop\nio.mmioStout.bits.data = 0xABCDEF01  // \u5199\u5165\u6570\u636e\nio.mmioStout.bits.debug.isMMIO = true\n</code></pre></p> </li> <li> <p>\u5904\u7406\u5668\u786e\u8ba4\u5199\u56de:</p> <ul> <li><code>io.mmioStout.ready = true</code></li> <li>\u6807\u8bb0MMIO\u6307\u4ee4\u5b8c\u6210: <code>completed(10) = true</code></li> <li>MMIO\u72b6\u6001\u673a\u8f6c\u79fb: <code>mmioState: s_wb -&gt; s_wait</code></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#6_1","title":"\u9636\u6bb56: \u7b49\u5f85\u63d0\u4ea4\u786e\u8ba4","text":"<p>MMIO\u72b6\u6001\u673a\u7b49\u5f85\u6700\u7ec8\u63d0\u4ea4\u786e\u8ba4:</p> <ol> <li> <p>ROB\u786e\u8ba4\u63d0\u4ea4:</p> <ul> <li><code>io.rob.scommit &gt; 0</code> (\u63d0\u4ea4\u6570\u91cf\u5927\u4e8e0)</li> <li>MMIO\u72b6\u6001\u673a\u8f6c\u79fb: <code>mmioState: s_wait -&gt; s_idle</code></li> <li>MMIO\u72b6\u6001\u673a\u56de\u5230\u7a7a\u95f2\u72b6\u6001\uff0c\u51c6\u5907\u5904\u7406\u4e0b\u4e00\u4e2aMMIO\u8bf7\u6c42</li> </ul> </li> <li> <p>\u6307\u4ee4\u51fa\u961f\u548c\u5b8c\u6210:</p> <ul> <li>\u961f\u5217\u72b6\u6001\u66f4\u65b0:  <pre><code>deqPtr = 7 + 1 = 8    // \u51fa\u961f\u4e00\u6761\u6307\u4ee4\n</code></pre></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#_3","title":"\u5173\u952e\u5dee\u5f02\u5bf9\u6bd4","text":"\u5904\u7406\u6b65\u9aa4 \u666e\u901a\u5b58\u50a8\u6307\u4ee4 MMIO\u5b58\u50a8\u6307\u4ee4 \u5165\u961f \u6b63\u5e38\u5165\u961f \u6b63\u5e38\u5165\u961f \u5730\u5740\u6807\u8bb0 \u6b63\u5e38\u5730\u5740 \u6807\u8bb0\u4e3aMMIO \u63d0\u4ea4\u6761\u4ef6 ROB\u6b63\u5e38\u63d0\u4ea4 \u5fc5\u987b\u5728ROB\u5934\u90e8 \u6267\u884c\u8def\u5f84 \u901a\u8fc7SBuffer\u5230\u7f13\u5b58 \u901a\u8fc7UnCache\u5230\u8bbe\u5907 \u72b6\u6001\u673a\u63a7\u5236 \u65e0\u4e13\u7528\u72b6\u6001\u673a \u4f7f\u7528MMIO\u72b6\u6001\u673a \u5e76\u884c\u7a0b\u5ea6 \u591a\u6761\u6307\u4ee4\u53ef\u5e76\u884c \u4e25\u683c\u4e32\u884c\u5316\u6267\u884c \u5b8c\u6210\u6761\u4ef6 SBuffer\u5199\u5165\u5b8c\u6210 UnCache\u54cd\u5e94\u5b8c\u6210 \u5f02\u5e38\u5904\u7406 \u6b63\u5e38\u5f02\u5e38\u5904\u7406 \u652f\u6301MMIO\u7279\u6709\u7684\u786c\u4ef6\u9519\u8bef <p>\u901a\u8fc7\u8fd9\u4e24\u4e2a\u5b9e\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230StoreQueue\u5982\u4f55\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u5b58\u50a8\u6307\u4ee4\uff0c\u5982\u4f55\u7ef4\u62a4\u5176\u72b6\u6001\u7684\u8f6c\u6362\uff0c\u4ee5\u53ca\u5982\u4f55\u4e0e\u5904\u7406\u5668\u4e2d\u7684\u5176\u4ed6\u7ec4\u4ef6\uff08\u5982ROB\u3001SBuffer\u548cUnCache\u63a5\u53e3\uff09\u534f\u540c\u5de5\u4f5c\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#12_1","title":"12. \u6027\u80fd\u4f18\u5316\u4e0e\u8bbe\u8ba1\u8003\u91cf","text":"<p>XiangShan\u5904\u7406\u5668\u7684StoreQueue\u5b9e\u73b0\u4e86\u591a\u79cd\u6027\u80fd\u4f18\u5316\u548c\u7279\u6b8a\u8bbe\u8ba1\uff0c\u4ee5\u63d0\u9ad8\u5904\u7406\u5668\u7684\u6574\u4f53\u6027\u80fd\u5e76\u9002\u5e94\u4e0d\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff1a</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#121","title":"12.1 \u7ed3\u6784\u4f18\u5316","text":"<ol> <li>\u6a21\u5757\u5316\u8bbe\u8ba1\uff1a<ul> <li>\u4f7f\u7528\u4e13\u7528\u6a21\u5757\u7ba1\u7406\u6570\u636e\u3001\u5730\u5740\u548c\u5f02\u5e38</li> <li>\u63d0\u9ad8\u8bbe\u8ba1\u6e05\u6670\u5ea6\u548c\u53ef\u7ef4\u62a4\u6027</li> </ul> </li> </ol> <pre><code>// \u6a21\u5757\u5316\u8bbe\u8ba1\u793a\u4f8b\nval dataModule = Module(new SQDataModule(...))\nval paddrModule = Module(new SQAddrModule(...))\nval vaddrModule = Module(new SQAddrModule(...))\nval dataBuffer = Module(new DatamoduleResultBuffer(...))\nval exceptionBuffer = Module(new StoreExceptionBuffer)\n</code></pre> <ol> <li> <p>\u73af\u5f62\u961f\u5217\u67b6\u6784\uff1a</p> <ul> <li>\u9ad8\u6548\u7684\u8d44\u6e90\u5229\u7528</li> <li>\u7b80\u5316\u56de\u6536\u548c\u5206\u914d\u903b\u8f91</li> </ul> </li> <li> <p>\u5206\u79bb\u7684\u5730\u5740\u548c\u6570\u636e\u8def\u5f84\uff1a</p> <ul> <li>\u5141\u8bb8\u5730\u5740\u548c\u6570\u636e\u5728\u4e0d\u540c\u65f6\u95f4\u5230\u8fbe</li> <li>\u51cf\u5c11\u7ed3\u6784\u4f9d\u8d56</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#122","title":"12.2 \u6027\u80fd\u4f18\u5316","text":"<ol> <li> <p>\u5e76\u884c\u67e5\u8be2\u548c\u5339\u914d\uff1a</p> <ul> <li>\u5e76\u884cCAM\u64cd\u4f5c\u52a0\u901f\u5730\u5740\u5339\u914d</li> <li>\u4f18\u5316\u7684\u4f18\u5148\u7ea7\u7f16\u7801\u5668\u5feb\u901f\u9009\u62e9\u7ed3\u679c</li> </ul> </li> <li> <p>\u63d0\u524d\u5c31\u7eea\u68c0\u6d4b\uff1a</p> <ul> <li>\u8ddf\u8e2a\u5730\u5740\u548c\u6570\u636e\u5c31\u7eea\u72b6\u6001</li> <li>\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u4f9d\u8d56\u7b49\u5f85</li> </ul> </li> <li> <p>\u5e76\u884c\u63d0\u4ea4\u548c\u5199\u56de\uff1a</p> <ul> <li>\u6bcf\u5468\u671f\u652f\u6301\u591a\u6761\u6307\u4ee4\u63d0\u4ea4</li> <li>\u591a\u7aef\u53e3SBuffer\u63a5\u53e3\u63d0\u9ad8\u5e26\u5bbd</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#123","title":"12.3 \u7279\u6b8a\u60c5\u51b5\u5904\u7406","text":"<ol> <li> <p>\u975e\u5bf9\u9f50\u548c\u8de8\u9875\u5b58\u50a8\uff1a</p> <ul> <li>\u4e0eStoreMisalignBuffer\u534f\u4f5c\u5904\u7406\u590d\u6742\u60c5\u51b5</li> <li>\u4fdd\u6301\u9ad8\u6027\u80fd\u540c\u65f6\u786e\u4fdd\u6b63\u786e\u6027</li> </ul> </li> <li> <p>\u5411\u91cf\u5b58\u50a8\u4f18\u5316\uff1a</p> <ul> <li>\u7279\u6b8a\u6d41\u5904\u7406\u673a\u5236</li> <li>\u4f18\u5316\u7684\u5411\u91cf\u5143\u7d20\u5904\u7406</li> </ul> </li> <li> <p>MMIO\u548c\u975e\u7f13\u5b58\u8bbf\u95ee\u4e13\u7528\u8def\u5f84\uff1a</p> <ul> <li>\u72ec\u7acb\u72b6\u6001\u673a\u51cf\u5c11\u4e3b\u8def\u5f84\u590d\u6742\u5ea6</li> <li>\u786e\u4fdd\u7279\u6b8a\u8bbf\u95ee\u7684\u6b63\u786e\u987a\u5e8f</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#124","title":"12.4 \u5173\u952e\u5ef6\u8fdf\u4f18\u5316","text":"<ol> <li>\u4e24\u7ea7\u8f6c\u53d1\u54cd\u5e94\uff1a<ul> <li>\u5feb\u901f\u54cd\u5e94\u6ee1\u8db3\u5e38\u89c1\u60c5\u51b5</li> <li>\u5b8c\u6574\u54cd\u5e94\u5904\u7406\u590d\u6742\u60c5\u51b5</li> </ul> </li> </ol> <pre><code>// \u5feb\u901f\u8f6c\u53d1\u548c\u5b8c\u6574\u8f6c\u53d1\u7684\u533a\u5206\nio.forwardValidFast(i) := parallelFwdResult.validFast  // \u5feb\u901f\u54cd\u5e94\nio.forwardValid(i) := parallelFwdResult.valid          // \u5b8c\u6574\u54cd\u5e94\n</code></pre> <ol> <li> <p>\u63d0\u524d\u6570\u636e\u51c6\u5907\uff1a</p> <ul> <li>\u5728\u8bf7\u6c42\u5468\u671f\u9884\u5148\u51c6\u5907\u53ef\u80fd\u7684\u8f6c\u53d1\u6570\u636e</li> <li>\u51cf\u5c11\u5173\u952e\u8def\u5f84\u5ef6\u8fdf</li> </ul> </li> <li> <p>\u6d41\u6c34\u7ebf\u4f18\u5316\uff1a</p> <ul> <li>\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6d41\u6c34\u7ebf\u9636\u6bb5\u5e73\u8861</li> <li>\u5173\u952e\u8def\u5f84\u5ef6\u8fdf\u4f18\u5316</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue/#125","title":"12.5 \u53ef\u6269\u5c55\u6027\u8003\u91cf","text":"<ol> <li> <p>\u53c2\u6570\u5316\u8bbe\u8ba1\uff1a</p> <ul> <li>\u961f\u5217\u5927\u5c0f\u548c\u7aef\u53e3\u6570\u91cf\u53ef\u914d\u7f6e</li> <li>\u9002\u5e94\u4e0d\u540c\u5904\u7406\u5668\u914d\u7f6e</li> </ul> </li> <li> <p>\u53ef\u8c03\u4f18\u63a5\u53e3\uff1a</p> <ul> <li>\u8fd0\u884c\u65f6\u53ef\u8c03\u6574\u7684\u9608\u503c\u548c\u7b56\u7565</li> <li>\u9002\u5e94\u4e0d\u540c\u5de5\u4f5c\u8d1f\u8f7d\u7279\u6027</li> </ul> </li> <li> <p>\u6a21\u5757\u5316\u529f\u80fd\u6269\u5c55\uff1a</p> <ul> <li>\u652f\u6301\u6dfb\u52a0\u65b0\u7684\u5b58\u50a8\u7c7b\u578b</li> <li>\u6269\u5c55\u4e3a\u672a\u6765\u7279\u6027\u9884\u7559\u63a5\u53e3</li> </ul> </li> <li> <p>\u5f3a\u5236\u5237\u65b0SBuffer\u673a\u5236\uff1a</p> <ul> <li>\u91c7\u7528\u53cc\u9608\u503c\u63a7\u5236\u7b56\u7565</li> <li>\u5f53StoreQueue\u7684\u6709\u6548\u9879\u6570\u8d85\u8fc7\u4e0a\u9608\u503c\u65f6\uff0c\u5f3a\u5236\u5237\u65b0SBuffer</li> <li>\u5f53\u6709\u6548\u9879\u6570\u4f4e\u4e8e\u4e0b\u9608\u503c\u65f6\uff0c\u505c\u6b62\u5f3a\u5236\u5237\u65b0</li> </ul> </li> </ol> <p>\u8fd9\u4e9b\u4f18\u5316\u548c\u8bbe\u8ba1\u8003\u91cf\u4f7fXiangShan\u7684StoreQueue\u80fd\u591f\u5728\u4fdd\u8bc1\u529f\u80fd\u6b63\u786e\u6027\u7684\u540c\u65f6\uff0c\u63d0\u4f9b\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/","title":"StoreQueueData","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#1","title":"1. \u6a21\u5757\u6982\u8ff0","text":"<p><code>StoreQueueData.scala</code> \u5b9e\u73b0\u4e86XiangShan\u5904\u7406\u5668\u5b58\u50a8\u961f\u5217\u7684\u6570\u636e\u5b58\u50a8\u548c\u68c0\u7d22\u529f\u80fd\uff0c\u662f\u5185\u5b58\u5b50\u7cfb\u7edf\u7684\u5173\u952e\u7ec4\u4ef6\u3002\u8be5\u6a21\u5757\u4f5c\u4e3aStoreQueue\u7684\u6838\u5fc3\u6570\u636e\u5b58\u50a8\u7ed3\u6784\uff0c\u8d1f\u8d23\u7ba1\u7406\u5b58\u50a8\u6307\u4ee4\u7684\u5730\u5740\u3001\u6570\u636e\u548c\u63a9\u7801\uff0c\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u6570\u636e\u8f6c\u53d1\u673a\u5236\uff0c\u652f\u6301\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u529f\u80fd\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#11","title":"1.1 \u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u7ba1\u7406\u5b58\u50a8\u6307\u4ee4\u7684\u5730\u5740\u3001\u6570\u636e\u548c\u63a9\u7801\u4fe1\u606f</li> <li>\u5b9e\u73b0\u9ad8\u6548\u7684\u5185\u5bb9\u5bfb\u5740\u5339\u914d(CAM)\u673a\u5236\u7528\u4e8e\u5730\u5740\u6bd4\u8f83</li> <li>\u652f\u6301\u5b57\u8282\u7c92\u5ea6\u7684\u6570\u636e\u8f6c\u53d1</li> <li>\u63d0\u4f9b\u5e76\u884c\u5316\u7684\u6570\u636e\u8bfb\u5199\u548c\u6bd4\u8f83\u903b\u8f91</li> <li>\u652f\u6301\u7f13\u5b58\u884c\u7ea7\u522b\u7684\u64cd\u4f5c\u6807\u8bb0</li> <li>\u4e3aLoadQueue\u63d0\u4f9b\u9ad8\u6548\u7684\u5b58\u50a8-\u52a0\u8f7d\u6570\u636e\u8f6c\u53d1\u673a\u5236</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#12","title":"1.2 \u4e3b\u8981\u5b50\u6a21\u5757","text":"<p>StoreQueueData\u5305\u542b\u4e09\u4e2a\u4e3b\u8981\u7684\u5b50\u6a21\u5757\uff1a</p> <ol> <li>SQAddrModule\uff1a\u7ba1\u7406\u5b58\u50a8\u6307\u4ee4\u7684\u5730\u5740\u4fe1\u606f\uff0c\u5e76\u63d0\u4f9bCAM\u529f\u80fd</li> <li>SQData8Module\uff1a\u5904\u74068\u4f4d(1\u5b57\u8282)\u7c92\u5ea6\u7684\u6570\u636e\u5b58\u50a8\u548c\u8f6c\u53d1</li> <li>SQDataModule\uff1a\u4f5c\u4e3aSQData8Module\u7684\u5305\u88c5\u5668\uff0c\u7ba1\u7406\u5b8c\u6574\u7684\u6570\u636e\u6761\u76ee</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#13-storequeueloadqueue","title":"1.3 \u4e0eStoreQueue\u548cLoadQueue\u7684\u5173\u7cfb","text":"<p>StoreQueueData\u5728XiangShan\u7684LSQ (Load-Store Queue) \u7cfb\u7edf\u4e2d\u626e\u6f14\u7740\u5173\u952e\u89d2\u8272\uff1a</p> <ol> <li> <p>\u4e0eStoreQueue\u7684\u5173\u7cfb\uff1a</p> <ul> <li>\u4f5c\u4e3aStoreQueue\u7684\u6838\u5fc3\u6570\u636e\u5b58\u50a8\u7ec4\u4ef6</li> <li>\u7531StoreQueue\u5b9e\u4f8b\u5316\u548c\u7ba1\u7406</li> <li>\u63a5\u6536\u6765\u81eaStoreQueue\u7684\u5199\u5165\u548c\u8f6c\u53d1\u63a7\u5236\u4fe1\u53f7</li> <li>\u63d0\u4f9b\u6570\u636e\u7ed9StoreQueue\u7528\u4e8e\u5199\u56deSBuffer\u548c\u5904\u7406MMIO\u64cd\u4f5c</li> </ul> </li> <li> <p>\u4e0eLoadQueue\u7684\u5173\u7cfb\uff1a</p> <ul> <li>\u901a\u8fc7StoreQueue\u63d0\u4f9b\u52a0\u8f7d-\u5b58\u50a8\u8f6c\u53d1\u529f\u80fd</li> <li>\u54cd\u5e94LoadQueue\u53d1\u8d77\u7684\u5730\u5740\u5339\u914d\u67e5\u8be2</li> <li>\u4e3aLoadQueue\u63d0\u4f9b\u6f5c\u5728\u7684\u8f6c\u53d1\u6570\u636e</li> <li>\u534f\u52a9LoadQueue\u89e3\u51b3\u5185\u5b58\u4f9d\u8d56\u95ee\u9898</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#2-sqaddrmodule","title":"2. SQAddrModule\uff1a\u5730\u5740\u5904\u7406\u6a21\u5757","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#21","title":"2.1 \u6a21\u5757\u5b9a\u4e49","text":"<pre><code>class SQAddrModule(\n  dataWidth: Int,            // \u5730\u5740\u5bbd\u5ea6(\u901a\u5e38\u4e3aPAddrBits)\n  numEntries: Int,           // \u6761\u76ee\u6570\u91cf(StoreQueueSize)\n  numRead: Int,              // \u8bfb\u7aef\u53e3\u6570\u91cf \n  numWrite: Int,             // \u5199\u7aef\u53e3\u6570\u91cf\n  numForward: Int            // \u8f6c\u53d1\u7aef\u53e3\u6570\u91cf\n)(implicit p: Parameters) extends XSModule with HasDCacheParameters\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#22","title":"2.2 \u4e3b\u8981\u63a5\u53e3","text":"<pre><code>val io = IO(new Bundle {\n  // \u540c\u6b65\u8bfb\u53d6\u7aef\u53e3\n  val raddr = Input(Vec(numRead, UInt(log2Up(numEntries).W)))\n  val rdata = Output(Vec(numRead, UInt(dataWidth.W)))\n  val rlineflag = Output(Vec(numRead, Bool()))\n\n  // \u5199\u5165\u7aef\u53e3\n  val wen   = Input(Vec(numWrite, Bool()))\n  val waddr = Input(Vec(numWrite, UInt(log2Up(numEntries).W)))\n  val wdata = Input(Vec(numWrite, UInt(dataWidth.W)))\n  val wmask = Input(Vec(numWrite, UInt((VLEN/8).W)))\n  val wlineflag = Input(Vec(numWrite, Bool()))\n\n  // \u5730\u5740CAM\u529f\u80fd\u7aef\u53e3\n  val forwardMdata = Input(Vec(numForward, UInt(dataWidth.W)))\n  val forwardDataMask = Input(Vec(numForward, UInt((VLEN/8).W)))\n  val forwardMmask = Output(Vec(numForward, Vec(numEntries, Bool())))\n\n  // \u8c03\u8bd5\u7aef\u53e3\n  val debug_data = Output(Vec(numEntries, UInt(dataWidth.W)))\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#23","title":"2.3 \u5185\u90e8\u6570\u636e\u7ed3\u6784","text":"<pre><code>// \u5b58\u50a8\u6bcf\u4e2a\u6761\u76ee\u7684\u7269\u7406\u5730\u5740\nval data = Reg(Vec(numEntries, UInt(dataWidth.W)))\n\n// \u5b58\u50a8\u6bcf\u4e2a\u6761\u76ee\u7684\u8bbf\u95ee\u63a9\u7801\nval mask = Reg(Vec(numEntries, UInt((VLEN/8).W)))\n\n// \u7f13\u5b58\u884c\u5339\u914d\u6807\u5fd7\uff0c\u7528\u4e8e\u6574\u884c\u64cd\u4f5c\nval lineflag = Reg(Vec(numEntries, Bool()))\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#24","title":"2.4 \u5730\u5740\u5339\u914d\u903b\u8f91","text":"<p>SQAddrModule\u5b9e\u73b0\u4e86\u5173\u952e\u7684\u5730\u5740\u5339\u914d\u903b\u8f91\uff0c\u7528\u4e8e\u786e\u5b9a\u54ea\u4e9b\u5b58\u50a8\u6307\u4ee4\u7684\u5730\u5740\u4e0e\u52a0\u8f7d\u6307\u4ee4\u5339\u914d\uff1a</p> <pre><code>// \u5185\u5bb9\u5bfb\u5740\u5339\u914d(CAM)\u903b\u8f91\nfor (i &lt;- 0 until numForward) {\n  for (j &lt;- 0 until numEntries) {\n    // \u7f13\u5b58\u884c\u547d\u4e2d\u5224\u65ad\n    val linehit = io.forwardMdata(i)(dataWidth-1, DCacheLineOffset) === \n                 data(j)(dataWidth-1, DCacheLineOffset)\n\n    // 128\u4f4d(16\u5b57\u8282)\u533a\u57df\u547d\u4e2d\u5224\u65ad\n    val hit128bit = (io.forwardMdata(i)(DCacheLineOffset-1, DCacheVWordOffset) === \n                   data(j)(DCacheLineOffset-1, DCacheVWordOffset)) &amp;&amp;\n                  (!StoreQueueForwardWithMask.B || (mask(j) &amp; io.forwardDataMask(i)).orR)\n\n    // \u6700\u7ec8\u5339\u914d\u7ed3\u679c\n    io.forwardMmask(i)(j) := linehit &amp;&amp; (hit128bit || lineflag(j))\n  }\n}\n</code></pre> <p>\u8fd9\u4e2a\u5339\u914d\u903b\u8f91\u8003\u8651\u4e86\u4e24\u79cd\u60c5\u51b5\uff1a 1. \u666e\u901a\u547d\u4e2d\uff1a\u8981\u6c42\u7f13\u5b58\u884c\u5730\u5740\u5339\u914d\u4e1416\u5b57\u8282\u533a\u57df\u5339\u914d 2. \u6574\u884c\u64cd\u4f5c\u547d\u4e2d\uff1a\u7f13\u5b58\u884c\u5730\u5740\u5339\u914d\u4e14\u5b58\u50a8\u6307\u4ee4\u6807\u8bb0\u4e3a\u6574\u884c\u64cd\u4f5c</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#25-loadqueue","title":"2.5 \u4e0eLoadQueue\u7684\u4ea4\u4e92","text":"<p>\u5f53LoadQueue\u9700\u8981\u68c0\u67e5\u6f5c\u5728\u7684\u5185\u5b58\u4f9d\u8d56\u65f6\uff0c\u5b83\u4f1a\u901a\u8fc7StoreQueue\u5411SQAddrModule\u53d1\u9001\u5730\u5740\u67e5\u8be2\u8bf7\u6c42\uff1a</p> <ol> <li>LoadQueue\u5411StoreQueue\u53d1\u9001\u52a0\u8f7d\u5730\u5740\u548c\u63a9\u7801</li> <li>StoreQueue\u5c06\u8fd9\u4e9b\u4fe1\u606f\u8f6c\u53d1\u7ed9SQAddrModule\u7684<code>forwardMdata</code>\u548c<code>forwardDataMask</code>\u7aef\u53e3</li> <li>SQAddrModule\u6267\u884c\u5e76\u884cCAM\u64cd\u4f5c\uff0c\u751f\u6210\u5339\u914d\u63a9\u7801</li> <li>\u5339\u914d\u7ed3\u679c\u901a\u8fc7<code>forwardMmask</code>\u8fd4\u56de\u7ed9StoreQueue</li> <li>StoreQueue\u7ed3\u5408\u5e74\u9f84\u4fe1\u606f\u5904\u7406\u8fd9\u4e9b\u5339\u914d\u7ed3\u679c\uff0c\u5e76\u63a7\u5236\u6570\u636e\u8f6c\u53d1</li> </ol> <p>\u8fd9\u4e2a\u4ea4\u4e92\u6d41\u7a0b\u662f\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u673a\u5236\u7684\u7b2c\u4e00\u9636\u6bb5\uff0c\u786e\u5b9a\u4e86\u54ea\u4e9b\u5b58\u50a8\u6307\u4ee4\u53ef\u80fd\u9700\u8981\u5411\u52a0\u8f7d\u6307\u4ee4\u63d0\u4f9b\u6570\u636e\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#3-sqdata8module","title":"3. SQData8Module\uff1a\u5b57\u8282\u7c92\u5ea6\u6570\u636e\u5904\u7406","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#31","title":"3.1 \u6a21\u5757\u5b9a\u4e49","text":"<pre><code>class SQData8Module(\n  numEntries: Int,          // \u6761\u76ee\u6570\u91cf(StoreQueueSize)\n  numRead: Int,             // \u8bfb\u7aef\u53e3\u6570\u91cf\n  numWrite: Int,            // \u5199\u7aef\u53e3\u6570\u91cf\n  numForward: Int           // \u8f6c\u53d1\u7aef\u53e3\u6570\u91cf\n)(implicit p: Parameters) extends XSModule with HasDCacheParameters with HasCircularQueuePtrHelper\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#32","title":"3.2 \u6570\u636e\u7c7b\u578b","text":"<pre><code>// \u5355\u5b57\u8282\u6570\u636e\u6761\u76ee\nclass SQData8Entry(implicit p: Parameters) extends XSBundle {\n  val valid = Bool()              // \u6b64\u5b57\u8282\u6709\u6548\u6807\u5fd7\n  val data = UInt((XLEN/8).W)     // \u5b57\u8282\u6570\u636e\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#33","title":"3.3 \u63a5\u53e3\u5b9a\u4e49","text":"<pre><code>val io = IO(new Bundle() {\n  // \u540c\u6b65\u8bfb\u53d6\u7aef\u53e3\n  val raddr = Vec(numRead, Input(UInt(log2Up(numEntries).W)))\n  val rdata = Vec(numRead, Output(new SQData8Entry))\n\n  // \u6570\u636e\u5199\u5165\u7aef\u53e3\n  val data = new Bundle() {\n    val wen   = Vec(numWrite, Input(Bool()))\n    val waddr = Vec(numWrite, Input(UInt(log2Up(numEntries).W)))\n    val wdata = Vec(numWrite, Input(UInt((XLEN/8).W)))\n  }\n\n  // \u63a9\u7801(\u6570\u636e\u6709\u6548\u4f4d)\u5199\u5165\u7aef\u53e3\n  val mask = new Bundle() {\n    val wen   = Vec(numWrite, Input(Bool()))\n    val waddr = Vec(numWrite, Input(UInt(log2Up(numEntries).W)))\n    val wdata = Vec(numWrite, Input(Bool()))\n  }\n\n  // \u8f6c\u53d1\u63a7\u5236\u548c\u7ed3\u679c\u7aef\u53e3\n  val needForward = Input(Vec(numForward, Vec(2, UInt(numEntries.W))))\n  val forwardValidFast = Vec(numForward, Output(Bool()))\n  val forwardValid = Vec(numForward, Output(Bool()))\n  val forwardData = Vec(numForward, Output(UInt(8.W)))\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#34-bank","title":"3.4 \u591aBank\u5199\u5165\u8bbe\u8ba1","text":"<p>SQData8Module\u91c7\u7528\u4e86\u591aBank\u8bbe\u8ba1\uff0c\u63d0\u9ad8\u5199\u5165\u5e26\u5bbd\u548c\u5e76\u884c\u6027\uff1a</p> <pre><code>// \u8981\u6c42\u5199\u5165Bank\u6570\u4e3a2\u7684\u5e42\u6b21\u65b9\u4e14\u5927\u4e8e1\nrequire(isPow2(StoreQueueNWriteBanks))\nrequire(StoreQueueNWriteBanks &gt; 1)\n\n// \u63d0\u53d6Bank\u7d22\u5f15\u548c\u5b9e\u9645\u7d22\u5f15\ndef get_bank(in: UInt): UInt = in(log2Up(StoreQueueNWriteBanks) -1, 0)\ndef get_bank_index(in: UInt): UInt = in &gt;&gt; log2Up(StoreQueueNWriteBanks)\ndef get_vec_index(index: Int, bank: Int): Int = {\n  (index &lt;&lt; log2Up(StoreQueueNWriteBanks)) + bank\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#35","title":"3.5 \u6570\u636e\u8f6c\u53d1\u903b\u8f91","text":"<p>SQData8Module\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684\u6570\u636e\u8f6c\u53d1\u903b\u8f91\uff0c\u7528\u4e8e\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\uff1a</p> <pre><code>// \u5b9a\u4e49\u8f6c\u53d1\u7ed3\u679c\u5c01\u88c5\ndef parallelFwd(xs: Seq[Data]): Data = {\n  ParallelOperation(xs, (a: Data, b: Data) =&gt; {\n    val l = a.asTypeOf(new FwdEntry)\n    val r = b.asTypeOf(new FwdEntry)\n    val res = Wire(new FwdEntry)\n    res.validFast := l.validFast || r.validFast\n    res.valid := l.valid || r.valid\n    res.data := Mux(r.valid, r.data, l.data)\n    res\n  })\n}\n\n// \u6bcf\u4e2a\u8f6c\u53d1\u901a\u9053\u5904\u7406\nfor (j &lt;- 0 until numEntries) {\n  val needCheck0 = io.needForward(i)(0)(j)\n  val needCheck1 = io.needForward(i)(1)(j)\n  val needCheck0Reg = RegNext(needCheck0)\n  val needCheck1Reg = RegNext(needCheck1)\n\n  // \u5feb\u901f\u8def\u5f84(\u5f53\u524d\u5468\u671f)\u548c\u6807\u51c6\u8def\u5f84(\u4e0b\u4e00\u5468\u671f)\n  matchResultVec(j).validFast := needCheck0 &amp;&amp; data(j).valid\n  matchResultVec(j).valid := needCheck0Reg &amp;&amp; data(j).valid\n  matchResultVec(j).data := data(j).data\n\n  matchResultVec(numEntries + j).validFast := needCheck1 &amp;&amp; data(j).valid\n  matchResultVec(numEntries + j).valid := needCheck1Reg &amp;&amp; data(j).valid\n  matchResultVec(numEntries + j).data := data(j).data\n}\n\n// \u5e76\u884c\u7ed3\u679c\u5408\u5e76\nval parallelFwdResult = parallelFwd(matchResultVec).asTypeOf(new FwdEntry)\n\n// \u8f93\u51fa\u7ed3\u679c\nio.forwardValidFast(i) := parallelFwdResult.validFast  // \u5f53\u524d\u5468\u671f\u751f\u6210\nio.forwardValid(i) := parallelFwdResult.valid         // \u4e0b\u4e00\u5468\u671f\u751f\u6210\nio.forwardData(i) := parallelFwdResult.data           // \u4e0b\u4e00\u5468\u671f\u751f\u6210\n</code></pre> <p>\u8fd9\u4e2a\u8f6c\u53d1\u903b\u8f91\u5b9e\u73b0\u4e86\u4e24\u79cd\u65f6\u5e8f\u7684\u8f6c\u53d1\u5904\u7406\uff1a 1. \u5feb\u901f\u8def\u5f84 (<code>forwardValidFast</code>)\uff1a\u5728\u67e5\u8be2\u7684\u540c\u4e00\u5468\u671f\u751f\u6210\uff0c\u7528\u4e8e\u5feb\u901f\u68c0\u67e5 2. \u6807\u51c6\u8def\u5f84 (<code>forwardValid</code> \u548c <code>forwardData</code>)\uff1a\u5728\u67e5\u8be2\u7684\u4e0b\u4e00\u5468\u671f\u751f\u6210\uff0c\u5305\u542b\u5b8c\u6574\u6570\u636e</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#4-sqdatamodule","title":"4. SQDataModule\uff1a\u6570\u636e\u6a21\u5757\u5305\u88c5\u5668","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#41","title":"4.1 \u6a21\u5757\u5b9a\u4e49","text":"<pre><code>class SQDataModule(\n  numEntries: Int,          // \u6761\u76ee\u6570\u91cf(StoreQueueSize)\n  numRead: Int,             // \u8bfb\u7aef\u53e3\u6570\u91cf\n  numWrite: Int,            // \u5199\u7aef\u53e3\u6570\u91cf\n  numForward: Int           // \u8f6c\u53d1\u7aef\u53e3\u6570\u91cf\n)(implicit p: Parameters) extends XSModule with HasDCacheParameters with HasCircularQueuePtrHelper\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#42","title":"4.2 \u6570\u636e\u7c7b\u578b","text":"<pre><code>// \u5b8c\u6574\u7684\u5b58\u50a8\u6570\u636e\u6761\u76ee\nclass SQDataEntry(implicit p: Parameters) extends XSBundle {\n  val mask = UInt((VLEN/8).W)   // \u5b57\u8282\u6709\u6548\u63a9\u7801\n  val data = UInt(VLEN.W)       // \u5b8c\u6574\u6570\u636e\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#43","title":"4.3 \u63a5\u53e3\u5b9a\u4e49","text":"<pre><code>val io = IO(new Bundle() {\n  // \u540c\u6b65\u8bfb\u53d6\u7aef\u53e3\n  val raddr = Vec(numRead, Input(UInt(log2Up(numEntries).W)))\n  val rdata = Vec(numRead, Output(new SQDataEntry))\n\n  // \u6570\u636e\u5199\u5165\u7aef\u53e3\n  val data = new Bundle() {\n    val wen   = Vec(numWrite, Input(Bool()))\n    val waddr = Vec(numWrite, Input(UInt(log2Up(numEntries).W)))\n    val wdata = Vec(numWrite, Input(UInt(VLEN.W)))\n  }\n\n  // \u63a9\u7801\u5199\u5165\u7aef\u53e3\n  val mask = new Bundle() {\n    val wen   = Vec(numWrite, Input(Bool()))\n    val waddr = Vec(numWrite, Input(UInt(log2Up(numEntries).W)))\n    val wdata = Vec(numWrite, Input(UInt((VLEN/8).W)))\n  }\n\n  // \u8f6c\u53d1\u63a7\u5236\u548c\u7ed3\u679c\u7aef\u53e3\n  val needForward = Input(Vec(numForward, Vec(2, UInt(numEntries.W))))\n  val forwardMaskFast = Vec(numForward, Output(Vec((VLEN/8), Bool())))\n  val forwardMask = Vec(numForward, Output(Vec((VLEN/8), Bool())))\n  val forwardData = Vec(numForward, Output(Vec((VLEN/8), UInt(8.W))))\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#44","title":"4.4 \u5185\u90e8\u7ed3\u6784\u548c\u6570\u636e\u6d41","text":"<p>SQDataModule\u662fSQData8Module\u7684\u5305\u88c5\u5668\uff0c\u4f7f\u752816\u4e2aSQData8Module\u5b9e\u4f8b\u6765\u5904\u7406\u5b8c\u6574\u7684128\u4f4d(16\u5b57\u8282)VLEN\u6570\u636e\uff1a</p> <pre><code>// \u521b\u5efa16\u4e2a\u5b57\u8282\u5904\u7406\u6a21\u5757\nval data16 = Seq.fill(16)(Module(new SQData8Module(numEntries, numRead, numWrite, numForward)))\n\n// \u8fde\u63a5\u5199\u5165\u7aef\u53e3\nfor (i &lt;- 0 until numWrite) {\n  for (j &lt;- 0 until 16) {\n    // \u63a9\u7801\u5199\u5165\n    data16(j).io.mask.waddr(i) := io.mask.waddr(i)\n    data16(j).io.mask.wdata(i) := io.mask.wdata(i)(j)\n    data16(j).io.mask.wen(i)   := io.mask.wen(i)\n\n    // \u6570\u636e\u5199\u5165\n    data16(j).io.data.waddr(i) := io.data.waddr(i)\n    data16(j).io.data.wdata(i) := io.data.wdata(i)(8*(j+1)-1, 8*j)\n    data16(j).io.data.wen(i)   := io.data.wen(i)\n  }\n}\n\n// \u8fde\u63a5\u8bfb\u53d6\u7aef\u53e3\nfor (i &lt;- 0 until numRead) {\n  // \u5411\u6240\u6709\u5b57\u8282\u6a21\u5757\u53d1\u9001\u8bfb\u5730\u5740\n  for (j &lt;- 0 until 16) {\n    data16(j).io.raddr(i) := io.raddr(i)\n  }\n\n  // \u7ec4\u5408\u8bfb\u53d6\u7ed3\u679c\n  io.rdata(i).mask := VecInit((0 until 16).map(j =&gt; data16(j).io.rdata(i).valid)).asUInt\n  io.rdata(i).data := VecInit((0 until 16).map(j =&gt; data16(j).io.rdata(i).data)).asUInt\n}\n\n// \u8fde\u63a5\u8f6c\u53d1\u7aef\u53e3\nfor (i &lt;- 0 until numForward) {\n  for (j &lt;- 0 until 16) {\n    // \u8f6c\u53d1\u63a7\u5236\u4fe1\u53f7\n    data16(j).io.needForward(i) &lt;&gt; io.needForward(i)\n\n    // \u8f6c\u53d1\u7ed3\u679c\u6536\u96c6\n    io.forwardMaskFast(i) := VecInit((0 until 16).map(j =&gt; data16(j).io.forwardValidFast(i)))\n    io.forwardMask(i) := VecInit((0 until 16).map(j =&gt; data16(j).io.forwardValid(i)))\n    io.forwardData(i) := VecInit((0 until 16).map(j =&gt; data16(j).io.forwardData(i)))\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#5-lsq","title":"5. LSQ\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u6d41\u5206\u6790","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#51-storequeuedatalsq","title":"5.1 StoreQueueData\u5728LSQ\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u6d41","text":"<p>\u4ee5\u4e0b\u662fStoreQueueData\u5728\u6574\u4e2aLSQ\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u6d41\u6982\u8ff0\uff1a</p> <ol> <li> <p>\u5b58\u50a8\u6307\u4ee4\u5165\u961f\u9636\u6bb5:</p> <ul> <li>StoreQueue\u4ece\u540e\u7aef\u63a5\u6536\u5b58\u50a8\u6307\u4ee4</li> <li>\u4e3a\u6307\u4ee4\u5206\u914d\u961f\u5217\u6761\u76ee</li> <li>\u521d\u59cb\u5316\u76f8\u5173\u72b6\u6001\u6807\u5fd7</li> </ul> </li> <li> <p>\u5730\u5740\u548c\u6570\u636e\u5199\u5165\u9636\u6bb5:</p> <ul> <li>StoreQueue\u4ece\u6267\u884c\u5355\u5143\u63a5\u6536\u8ba1\u7b97\u597d\u7684\u5b58\u50a8\u5730\u5740\uff0c\u5199\u5165SQAddrModule</li> <li>StoreQueue\u4ece\u6267\u884c\u5355\u5143\u63a5\u6536\u5b58\u50a8\u6570\u636e\uff0c\u5199\u5165SQDataModule</li> <li>\u8bbe\u7f6e\u9002\u5f53\u7684\u72b6\u6001\u6807\u5fd7\u6307\u793a\u5730\u5740\u548c\u6570\u636e\u5c31\u7eea</li> </ul> </li> <li> <p>\u8f6c\u53d1\u68c0\u67e5\u9636\u6bb5:</p> <ul> <li>LoadQueue\u901a\u8fc7StoreQueue\u5411SQAddrModule\u53d1\u9001\u5730\u5740\u67e5\u8be2\u8bf7\u6c42</li> <li>SQAddrModule\u6267\u884cCAM\u64cd\u4f5c\uff0c\u751f\u6210\u5730\u5740\u5339\u914d\u63a9\u7801</li> <li>StoreQueue\u57fa\u4e8e\u5730\u5740\u5339\u914d\u548c\u6307\u4ee4\u5e74\u9f84\u4fe1\u606f\uff0c\u8ba1\u7b97\u6700\u7ec8\u7684\u8f6c\u53d1\u9700\u6c42</li> <li>\u8f6c\u53d1\u9700\u6c42\u901a\u8fc7<code>needForward</code>\u4fe1\u53f7\u53d1\u9001\u7ed9SQDataModule</li> <li>SQDataModule\u4ea7\u751f\u8f6c\u53d1\u7ed3\u679c\uff0c\u8fd4\u56de\u7ed9StoreQueue</li> <li>StoreQueue\u5c06\u8f6c\u53d1\u6570\u636e\u63d0\u4f9b\u7ed9LoadQueue</li> </ul> </li> <li> <p>\u5b58\u50a8\u63d0\u4ea4\u9636\u6bb5:</p> <ul> <li>ROB\u901a\u77e5StoreQueue\u67d0\u5b58\u50a8\u6307\u4ee4\u53ef\u4ee5\u63d0\u4ea4</li> <li>StoreQueue\u4eceSQDataModule\u8bfb\u53d6\u5b8c\u6574\u7684\u5b58\u50a8\u6570\u636e</li> <li>\u6839\u636e\u5b58\u50a8\u7c7b\u578b(\u666e\u901a\u5b58\u50a8\u3001MMIO\u7b49)\u5904\u7406\u6570\u636e\u5199\u56de</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#52-","title":"5.2 \u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u5b8c\u6574\u6d41\u7a0b","text":"<p>\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u662fStoreQueueData\u6700\u5173\u952e\u7684\u529f\u80fd\u4e4b\u4e00\uff0c\u4e0b\u9762\u8be6\u7ec6\u8bf4\u660e\u5b8c\u6574\u7684\u8f6c\u53d1\u6d41\u7a0b\uff1a</p> <ol> <li> <p>\u52a0\u8f7d\u5730\u5740\u751f\u6210:</p> <ul> <li>LoadUnit\u8ba1\u7b97\u52a0\u8f7d\u6307\u4ee4\u7684\u5730\u5740</li> </ul> </li> <li> <p>\u8f6c\u53d1\u67e5\u8be2\u521d\u59cb\u5316:</p> <ul> <li>LoadQueue\u6784\u9020\u8f6c\u53d1\u67e5\u8be2\uff0c\u5305\u62ec\u5730\u5740\u3001\u63a9\u7801\u548c\u961f\u5217\u7d22\u5f15\u4fe1\u606f</li> <li>\u67e5\u8be2\u901a\u8fc7LoadQueue\u7684<code>forward</code>\u63a5\u53e3\u53d1\u9001\u5230StoreQueue</li> </ul> </li> <li> <p>StoreQueue\u8f6c\u53d1\u5904\u7406:</p> <ul> <li>StoreQueue\u63a5\u6536\u67e5\u8be2\u8bf7\u6c42</li> <li>\u5411SQAddrModule\u53d1\u9001\u5730\u5740\u5339\u914d\u67e5\u8be2</li> <li>\u63a5\u6536\u5730\u5740\u5339\u914d\u7ed3\u679c(<code>forwardMmask</code>)</li> <li>\u5e94\u7528\u5e74\u9f84\u8fc7\u6ee4\u548c\u6307\u9488\u6bd4\u8f83\uff0c\u751f\u6210\u6700\u7ec8\u9700\u8981\u68c0\u67e5\u7684\u6761\u76ee\u63a9\u7801</li> <li>\u5c06\u9700\u8981\u68c0\u67e5\u7684\u6761\u76ee\u63a9\u7801\u901a\u8fc7<code>needForward</code>\u4fe1\u53f7\u53d1\u9001\u7ed9SQDataModule</li> </ul> </li> <li> <p>SQDataModule\u6570\u636e\u8f6c\u53d1:</p> <ul> <li>\u9488\u5bf9\u6bcf\u4e2a\u5b57\u8282\uff0c\u68c0\u67e5\u6307\u5b9a\u6761\u76ee\u662f\u5426\u6709\u6548\u4e14\u9700\u8981\u8f6c\u53d1</li> <li>\u4f7f\u7528\u4f18\u5148\u7ea7\u903b\u8f91\u9009\u62e9\u6700\u65b0\u7684\u5339\u914d\u6570\u636e</li> <li>\u751f\u6210\u8f6c\u53d1\u7ed3\u679c:<ul> <li><code>forwardValidFast</code>: \u5feb\u901f\u8def\u5f84\uff0c\u5f53\u524d\u5468\u671f\u6709\u6548</li> <li><code>forwardValid</code>\u548c<code>forwardData</code>: \u5b8c\u6574\u8def\u5f84\uff0c\u4e0b\u4e00\u5468\u671f\u6709\u6548</li> </ul> </li> </ul> </li> <li> <p>\u8f6c\u53d1\u7ed3\u679c\u8fd4\u56de:</p> <ul> <li>StoreQueue\u63a5\u6536SQDataModule\u7684\u8f6c\u53d1\u7ed3\u679c</li> <li>\u5c06\u7ed3\u679c\u901a\u8fc7<code>forward</code>\u63a5\u53e3\u8fd4\u56de\u7ed9LoadQueue</li> </ul> </li> <li> <p>LoadQueue\u5904\u7406\u8f6c\u53d1\u7ed3\u679c:</p> <ul> <li>\u63a5\u6536\u8f6c\u53d1\u7ed3\u679c(\u662f\u5426\u6709\u5339\u914d\u3001\u8f6c\u53d1\u6570\u636e)</li> <li>\u6839\u636e\u7ed3\u679c\u51b3\u5b9a\u662f\u5426:<ul> <li>\u4f7f\u7528\u8f6c\u53d1\u7684\u6570\u636e</li> <li>\u7b49\u5f85\u5b58\u50a8\u6307\u4ee4\u5b8c\u6210</li> <li>\u7ee7\u7eed\u6b63\u5e38\u7684\u52a0\u8f7d\u64cd\u4f5c</li> </ul> </li> </ul> </li> </ol> <p>\u8fd9\u4e2a\u5b8c\u6574\u6d41\u7a0b\u786e\u4fdd\u4e86\u52a0\u8f7d\u6307\u4ee4\u80fd\u591f\u6b63\u786e\u5730\u4ece\u5c1a\u672a\u63d0\u4ea4\u5230\u7f13\u5b58\u7684\u5b58\u50a8\u6307\u4ee4\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u662f\u4e71\u5e8f\u5904\u7406\u5668\u4e2d\u4fdd\u8bc1\u6570\u636e\u4f9d\u8d56\u6b63\u786e\u6027\u7684\u5173\u952e\u673a\u5236\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#6","title":"6. \u4f18\u5316\u8bbe\u8ba1\u5206\u6790","text":"<p>StoreQueueData\u6a21\u5757\u5305\u542b\u591a\u9879\u4f18\u5316\u8bbe\u8ba1\uff0c\u63d0\u9ad8\u6027\u80fd\u548c\u6548\u7387\uff1a</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#61-bank","title":"6.1 \u591aBank\u8bbe\u8ba1","text":"<pre><code>require(isPow2(StoreQueueNWriteBanks))\nrequire(StoreQueueNWriteBanks &gt; 1)\n</code></pre> <ul> <li>\u5c06\u5b58\u50a8\u961f\u5217\u6761\u76ee\u5206\u5e03\u5728\u591a\u4e2aBank\u4e2d</li> <li>\u51cf\u5c11\u5199\u7aef\u53e3\u51b2\u7a81\uff0c\u63d0\u9ad8\u5e76\u884c\u5ea6</li> <li>\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570(get_bank)\u5e73\u8861Bank\u95f4\u8d1f\u8f7d</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#62-cam","title":"6.2 \u5e76\u884cCAM\u64cd\u4f5c","text":"<pre><code>for (i &lt;- 0 until numForward) {\n  for (j &lt;- 0 until numEntries) {\n    // \u5e76\u884c\u6bd4\u8f83\u6240\u6709\u6761\u76ee\n    io.forwardMmask(i)(j) := linehit &amp;&amp; (hit128bit || lineflag(j))\n  }\n}\n</code></pre> <ul> <li>\u540c\u65f6\u6bd4\u8f83\u6240\u6709\u5b58\u50a8\u961f\u5217\u6761\u76ee</li> <li>\u652f\u6301\u591a\u4e2a\u5e76\u53d1\u8f6c\u53d1\u8bf7\u6c42</li> <li>\u4f7f\u7528\u4f18\u5316\u7684\u63a9\u7801\u6bd4\u8f83\u63d0\u9ad8\u6027\u80fd</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#63","title":"6.3 \u5b57\u8282\u7c92\u5ea6\u5904\u7406","text":"<pre><code>val data16 = Seq.fill(16)(Module(new SQData8Module(...)))\n</code></pre> <ul> <li>\u6bcf\u4e2a\u5b57\u8282\u7531\u4e13\u7528\u6a21\u5757\u5904\u7406</li> <li>\u652f\u6301\u7ec6\u7c92\u5ea6\u7684\u90e8\u5206\u8f6c\u53d1</li> <li>\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u79fb\u52a8</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#64","title":"6.4 \u4e24\u7ea7\u65f6\u5e8f\u8bbe\u8ba1","text":"<pre><code>// \u5feb\u901f\u8def\u5f84(\u5f53\u524d\u5468\u671f)\nmatchResultVec(j).validFast := needCheck0 &amp;&amp; data(j).valid\n\n// \u6807\u51c6\u8def\u5f84(\u4e0b\u4e00\u5468\u671f)\nmatchResultVec(j).valid := needCheck0Reg &amp;&amp; data(j).valid\n</code></pre> <ul> <li>\u63d0\u4f9b\u5feb\u901f\u68c0\u67e5\u8def\u5f84(validFast)\u548c\u5b8c\u6574\u6570\u636e\u8def\u5f84(valid+data)</li> <li>\u5141\u8bb8\u66f4\u7075\u6d3b\u7684\u65f6\u5e8f\u4f18\u5316</li> <li>\u5e73\u8861\u6027\u80fd\u548c\u5b9e\u73b0\u590d\u6742\u5ea6</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#7-storequeuedatalsq","title":"7. StoreQueueData\u5728LSQ\u7cfb\u7edf\u67b6\u6784\u4e2d\u7684\u4f4d\u7f6e","text":"<pre><code>+-------------------------+\n|      \u5904\u7406\u5668\u540e\u7aef         |\n+------------+------------+\n             |\n             v\n+------------+------------+\n|         ROB            |\n+------------+------------+\n             |                     \n             v                     \n+------------+------------+        +-----------------+\n|      StoreQueue         | &lt;----&gt; |    LoadQueue    |\n+------------+------------+        +-----------------+\n       |          ^                        ^\n       |          |                        |\n       v          |                        |\n+------------+----+-------+        +-------+----------+\n| StoreQueueData          | &lt;----&gt; |    LoadUnit      |\n+-------------------------+        +------------------+\n       |                                    |\n       v                                    v\n+-------------------------+        +-----------------+\n|    SBuffer/MMIO         | &lt;----&gt; |    \u7f13\u5b58/\u5185\u5b58     |\n+-------------------------+        +-----------------+\n</code></pre> <p>StoreQueueData\u662f\u6574\u4e2aLSQ\u7cfb\u7edf\u7684\u6838\u5fc3\u6570\u636e\u5b58\u50a8\u7ec4\u4ef6\uff0c\u5177\u6709\u4ee5\u4e0b\u5173\u952e\u7279\u6027\uff1a</p> <ol> <li> <p>\u5bf9StoreQueue\u63d0\u4f9b\u670d\u52a1\uff1a</p> <ul> <li>\u5b58\u50a8\u6240\u6709\u5b58\u50a8\u6307\u4ee4\u7684\u5730\u5740\u3001\u6570\u636e\u548c\u63a9\u7801</li> <li>\u652f\u6301StoreQueue\u5bf9\u63d0\u4ea4\u6307\u4ee4\u7684\u6570\u636e\u8bfb\u53d6</li> <li>\u8f85\u52a9StoreQueue\u5b8c\u6210\u5b58\u50a8\u6307\u4ee4\u7684\u5b8c\u6574\u5904\u7406</li> </ul> </li> <li> <p>\u4e0eLoadQueue\u534f\u540c\u5de5\u4f5c\uff1a</p> <ul> <li>\u901a\u8fc7StoreQueue\u5411LoadQueue\u63d0\u4f9b\u8f6c\u53d1\u670d\u52a1</li> <li>\u5feb\u901f\u54cd\u5e94LoadQueue\u7684\u5730\u5740\u5339\u914d\u67e5\u8be2</li> <li>\u4e3aLoadQueue\u63d0\u4f9b\u7cbe\u786e\u7684\u5b57\u8282\u7ea7\u8f6c\u53d1\u6570\u636e</li> </ul> </li> <li> <p>\u4fc3\u8fdb\u5185\u5b58\u4e00\u81f4\u6027\u7ef4\u62a4\uff1a</p> <ul> <li>\u652f\u6301\u4e71\u5e8f\u6267\u884c\u4e2d\u7684\u6570\u636e\u4f9d\u8d56\u6b63\u786e\u6027</li> <li>\u51cf\u5c11\u56e0\u5b58\u50a8-\u52a0\u8f7d\u4f9d\u8d56\u5bfc\u81f4\u7684\u6d41\u6c34\u7ebf\u505c\u987f</li> <li>\u63d0\u9ad8\u6307\u4ee4\u7ea7\u5e76\u884c\u6027</li> </ul> </li> </ol> <p>\u8fd9\u79cd\u8bbe\u8ba1\u4f7fStoreQueueData\u6210\u4e3a\u8fde\u63a5StoreQueue\u548cLoadQueue\u7684\u6865\u6881\uff0c\u5bf9\u4e8e\u5b9e\u73b0\u9ad8\u6548\u7684\u4e71\u5e8f\u6267\u884c\u81f3\u5173\u91cd\u8981\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/store_queue_data/#8","title":"8. \u603b\u7ed3","text":"<p>StoreQueueData\u5b9e\u73b0\u4e86XiangShan\u5904\u7406\u5668\u4e2d\u5b58\u50a8\u961f\u5217\u7684\u6570\u636e\u5b58\u50a8\u548c\u8f6c\u53d1\u673a\u5236\uff0c\u91c7\u7528\u6a21\u5757\u5316\u8bbe\u8ba1\u548c\u591a\u9879\u4f18\u5316\u6280\u672f\uff1a</p> <ol> <li>\u5c42\u6b21\u5316\u8bbe\u8ba1\uff1a\u4f7f\u7528SQAddrModule\u3001SQData8Module\u548cSQDataModule\u5206\u5c42\u7ba1\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e</li> <li>\u9ad8\u6548\u5730\u5740\u5339\u914d\uff1a\u5b9e\u73b0\u5e76\u884cCAM\u64cd\u4f5c\uff0c\u5feb\u901f\u8bc6\u522b\u5339\u914d\u7684\u5b58\u50a8\u6307\u4ee4</li> <li>\u7cbe\u7ec6\u6570\u636e\u8f6c\u53d1\uff1a\u652f\u6301\u5b57\u8282\u7c92\u5ea6\u7684\u6570\u636e\u8f6c\u53d1\uff0c\u4f18\u5316\u5185\u5b58\u4f9d\u8d56\u5904\u7406</li> <li>\u591a\u7ea7\u8f6c\u53d1\u65f6\u5e8f\uff1a\u540c\u65f6\u63d0\u4f9b\u5feb\u901f\u68c0\u67e5\u548c\u5b8c\u6574\u6570\u636e\u8def\u5f84\uff0c\u5e73\u8861\u6027\u80fd\u548c\u5b9e\u73b0\u590d\u6742\u5ea6</li> <li>\u591aBank\u5b58\u50a8\u8bbe\u8ba1\uff1a\u901a\u8fc7\u591aBank\u7ed3\u6784\u63d0\u9ad8\u8bbf\u95ee\u5e76\u884c\u5ea6\uff0c\u51cf\u5c11\u7ed3\u6784\u51b2\u7a81</li> </ol> <p>\u5728LSQ\u7cfb\u7edf\u4e2d\uff0cStoreQueueData\u901a\u8fc7\u4e0eStoreQueue\u548cLoadQueue\u7684\u7d27\u5bc6\u534f\u4f5c\uff0c\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u6838\u5fc3\u529f\u80fd\uff1a</p> <ol> <li>\u5b58\u50a8\u6307\u4ee4\u6570\u636e\u7ba1\u7406\uff1a\u4e3aStoreQueue\u63d0\u4f9b\u9ad8\u6548\u7684\u6570\u636e\u5b58\u50a8\u673a\u5236</li> <li>\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\uff1a\u652f\u6301\u5173\u952e\u7684\u6570\u636e\u4f9d\u8d56\u5904\u7406\uff0c\u7ef4\u62a4\u7a0b\u5e8f\u8bed\u4e49</li> <li>\u5185\u5b58\u4e00\u81f4\u6027\u652f\u6301\uff1a\u534f\u52a9\u7ef4\u62a4\u5728\u4e71\u5e8f\u6267\u884c\u4e2d\u5185\u5b58\u8bbf\u95ee\u7684\u4e00\u81f4\u6027\u548c\u6b63\u786e\u6027</li> </ol> <p>\u8fd9\u4e9b\u8bbe\u8ba1\u4f7fStoreQueueData\u80fd\u591f\u9ad8\u6548\u5904\u7406\u5b58\u50a8\u6570\u636e\u5e76\u652f\u6301\u5173\u952e\u7684\u5b58\u50a8-\u52a0\u8f7d\u8f6c\u53d1\u529f\u80fd\uff0c\u662f\u5b9e\u73b0\u9ad8\u6027\u80fd\u4e71\u5e8f\u5904\u7406\u5668\u7684\u91cd\u8981\u7ec4\u4ef6\u3002 </p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/","title":"VirtualLoadQueue","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#1","title":"1. \u6a21\u5757\u6982\u8ff0","text":"<p><code>VirtualLoadQueue.scala</code> \u5b9e\u73b0\u4e86\u4e00\u4e2a\u9ad8\u6548\u7684\u903b\u8f91\u52a0\u8f7d\u961f\u5217\uff0c\u7528\u4e8e\u8ddf\u8e2a\u3001\u7ba1\u7406\u548c\u76d1\u63a7\u5904\u7406\u5668\u4e2d\u6807\u91cf\u52a0\u8f7d\u6307\u4ee4\u7684\u72b6\u6001\u3002\u8be5\u6a21\u5757\u662f XiangShan \u5904\u7406\u5668 LSQ \u7cfb\u7edf\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u4f5c\u4e3a\u6240\u6709 load \u6307\u4ee4\u7684\"\u63a7\u5236\u5e73\u9762\"\uff0c\u8d1f\u8d23\u7ef4\u62a4\u6307\u4ee4\u987a\u5e8f\u548c\u72b6\u6001\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#11","title":"1.1 \u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u8ffd\u8e2a\u6240\u6709\u6807\u91cf load \u6307\u4ee4\u7684\u5fae\u64cd\u4f5c\u548c\u6267\u884c\u72b6\u6001</li> <li>\u7ef4\u62a4 load \u6307\u4ee4\u7684\u5206\u914d\u3001\u6267\u884c\u548c\u63d0\u4ea4\u72b6\u6001</li> <li>\u5904\u7406\u91cd\u5b9a\u5411\u548c\u5f02\u5e38\u6062\u590d\u673a\u5236</li> <li>\u7ba1\u7406\u6307\u4ee4\u961f\u5217\u7684\u5165\u961f\u548c\u51fa\u961f\u64cd\u4f5c</li> <li>\u786e\u4fdd\u5185\u5b58\u8bbf\u95ee\u7684\u6b63\u786e\u987a\u5e8f</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#12","title":"1.2 \u6a21\u5757\u5b9a\u4e49","text":"<pre><code>class VirtualLoadQueue(implicit p: Parameters) extends XSModule\n  with HasDCacheParameters\n  with HasCircularQueuePtrHelper\n  with HasLoadHelper\n  with HasPerfEvents {\n  // \u6a21\u5757\u5b9e\u73b0\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#2","title":"2. \u6570\u636e\u7ed3\u6784\u4e0e\u63a5\u53e3","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#21-io","title":"2.1 IO \u63a5\u53e3","text":"<pre><code>val io = IO(new Bundle() {\n  // \u63a7\u5236\u63a5\u53e3\n  val redirect    = Flipped(Valid(new Redirect))          // \u91cd\u5b9a\u5411/\u6062\u590d\u4fe1\u53f7\n\n  // \u5206\u53d1\u9636\u6bb5\u63a5\u53e3\n  val enq         = new LqEnqIO                           // \u5165\u961f\u8bf7\u6c42\u548c\u54cd\u5e94\n\n  // \u52a0\u8f7d\u5355\u5143\u63a5\u53e3\n  val ldin        = Vec(LoadPipelineWidth, Flipped(DecoupledIO(new LqWriteBundle))) // \u4ece\u52a0\u8f7d\u5355\u5143S3\u9636\u6bb5\u63a5\u6536\n\n  // \u6307\u9488\u63a5\u53e3\n  val ldWbPtr     = Output(new LqPtr)                     // \u63d0\u4f9b\u7ed9\u5176\u4ed6\u6a21\u5757\u7684\u5199\u56de\u6307\u9488\n\n  // \u72b6\u6001\u8f93\u51fa\n  val lqFull      = Output(Bool())                        // \u961f\u5217\u5df2\u6ee1\u6307\u793a\n  val lqEmpty     = Output(Bool())                        // \u961f\u5217\u4e3a\u7a7a\u6307\u793a\n\n  // \u5206\u53d1\u63a7\u5236\n  val lqDeq       = Output(UInt(log2Up(CommitWidth + 1).W)) // \u6bcf\u5468\u671f\u51fa\u961f\u6570\u91cf\n  val lqCancelCnt = Output(UInt(log2Up(VirtualLoadQueueSize+1).W)) // \u53d6\u6d88\u6307\u4ee4\u6570\u91cf\n})\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#22","title":"2.2 \u5185\u90e8\u6570\u636e\u7ed3\u6784","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#221","title":"2.2.1 \u961f\u5217\u72b6\u6001\u8ddf\u8e2a","text":"<pre><code>// \u6bcf\u4e2a\u961f\u5217\u6761\u76ee\u7684\u72b6\u6001\u6807\u5fd7\nval allocated = RegInit(VecInit(List.fill(VirtualLoadQueueSize)(false.B))) // \u6761\u76ee\u5df2\u5206\u914d\u6807\u5fd7\nval robIdx = Reg(Vec(VirtualLoadQueueSize, new RobPtr))                    // ROB\u7d22\u5f15\nval uopIdx = Reg(Vec(VirtualLoadQueueSize, UopIdx()))                      // \u5fae\u64cd\u4f5c\u7d22\u5f15\nval committed = Reg(Vec(VirtualLoadQueueSize, Bool()))                     // \u6307\u4ee4\u5df2\u63d0\u4ea4\u6807\u5fd7\n\n// \u8c03\u8bd5\u4fe1\u606f\nval debug_mmio = Reg(Vec(VirtualLoadQueueSize, Bool()))                    // MMIO\u6307\u4ee4\u6807\u5fd7\nval debug_paddr = Reg(Vec(VirtualLoadQueueSize, UInt(PAddrBits.W)))        // \u7269\u7406\u5730\u5740\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#222","title":"2.2.2 \u961f\u5217\u6307\u9488\u7ba1\u7406","text":"<pre><code>// \u961f\u5217\u6307\u9488\nval enqPtrExt = RegInit(VecInit((0 until io.enq.req.length).map(_.U.asTypeOf(new LqPtr))))\nval enqPtr = enqPtrExt(0).value                          // \u5165\u961f\u6307\u9488\nval deqPtr = Wire(new LqPtr)                             // \u51fa\u961f\u6307\u9488\nval deqPtrNext = Wire(new LqPtr)                         // \u4e0b\u4e00\u4e2a\u51fa\u961f\u6307\u9488\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#3","title":"3. \u5165\u961f\u7b97\u6cd5","text":"<p>VirtualLoadQueue \u5904\u7406\u6765\u81ea\u5206\u53d1\u9636\u6bb5\u7684\u6807\u91cf\u52a0\u8f7d\u6307\u4ee4\u8bf7\u6c42\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#31","title":"3.1 \u53ef\u7528\u7a7a\u95f4\u68c0\u67e5","text":"<pre><code>// \u8ba1\u7b97\u6709\u6548\u6761\u76ee\u6570\u548c\u5224\u65ad\u662f\u5426\u53ef\u63a5\u53d7\u65b0\u8bf7\u6c42\nval validCount = distanceBetween(enqPtrExt(0), deqPtr)\nval allowEnqueue = validCount &lt;= (VirtualLoadQueueSize - LSQLdEnqWidth).U\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#32","title":"3.2 \u5165\u961f\u8fc7\u7a0b","text":"<pre><code>// \u5bf9\u4e8e\u6bcf\u4e2a\u961f\u5217\u6761\u76ee\nfor(i &lt;- 0 until VirtualLoadQueueSize) {\n  val entryCanEnqSeq = (0 until io.enq.req.length).map { j =&gt;\n    val entryHitBound = enqLowBound(j).value &lt;= i.U &amp;&amp; i.U &lt; enqUpBound(j).value\n    canEnqueue(j) &amp;&amp; !enqCancel(j) &amp;&amp; entryHitBound\n  }\n  val entryCanEnq = entryCanEnqSeq.reduce(_ || _)\n  val selectBits = ParallelPriorityMux(entryCanEnqSeq, io.enq.req.map(_.bits))\n\n  when (entryCanEnq) {\n    allocated(i) := true.B\n    robIdx(i) := selectBits.robIdx\n    uopIdx(i) := selectBits.uopIdx\n    committed(i) := false.B\n\n    debug_mmio(i) := false.B\n    debug_paddr(i) := 0.U\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#33","title":"3.3 \u5165\u961f\u56de\u5e94","text":"<pre><code>// \u5411\u5206\u53d1\u9636\u6bb5\u63d0\u4f9b\u5206\u914d\u7ed3\u679c\nfor (i &lt;- 0 until io.enq.req.length) {\n  val lqIdx = enqPtrExt(0) + i.U\n  val index = io.enq.req(i).bits.lqIdx\n  XSError(canEnqueue(i) &amp;&amp; !enqCancel(i) &amp;&amp; index.value =/= lqIdx.value,\n          s\"must be the same entry $i\\n\")\n  io.enq.resp(i) := lqIdx\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#4","title":"4. \u961f\u5217\u7ba1\u7406\u7b97\u6cd5","text":""},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#41","title":"4.1 \u6307\u9488\u66f4\u65b0","text":"<pre><code>// \u66f4\u65b0\u5165\u961f\u6307\u9488\nwhen (lastLastCycleRedirect.valid) {\n  // \u91cd\u5b9a\u5411\u540e\u6062\u590d\u6307\u9488\n  enqPtrExt := VecInit(enqPtrExt.map(_ - redirectCancelCount))\n} .otherwise {\n  // \u6b63\u5e38\u66f4\u65b0\u6307\u9488\n  enqPtrExt := VecInit(enqPtrExt.map(_ + enqNumber))\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#42","title":"4.2 \u51fa\u961f\u903b\u8f91","text":"<pre><code>// \u67e5\u627e\u53ef\u4ee5\u51fa\u961f\u7684\u6761\u76ee\nval DeqPtrMoveStride = CommitWidth\nval deqLookupVec = VecInit((0 until DeqPtrMoveStride).map(deqPtr + _.U))\nval deqLookup = VecInit(deqLookupVec.map(ptr =&gt;\n  allocated(ptr.value) &amp;&amp; committed(ptr.value) &amp;&amp; ptr =/= enqPtrExt(0)))\nval deqInSameRedirectCycle = VecInit(deqLookupVec.map(ptr =&gt; needCancel(ptr.value)))\n\n// \u8ba1\u7b97\u51fa\u961f\u6570\u91cf\nval deqCountMask = Wire(UInt(DeqPtrMoveStride.W))\ndeqCountMask := deqLookup.asUInt &amp; (~deqInSameRedirectCycle.asUInt).asUInt\nval commitCount = PopCount(PriorityEncoderOH(~deqCountMask) - 1.U)\nval lastCommitCount = GatedRegNext(commitCount)\n\n// \u66f4\u65b0\u51fa\u961f\u6307\u9488\nval deqPtrUpdateEna = lastCommitCount =/= 0.U\ndeqPtrNext := deqPtr + lastCommitCount\ndeqPtr := RegEnable(deqPtrNext, 0.U.asTypeOf(new LqPtr), deqPtrUpdateEna)\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#5","title":"5. \u52a0\u8f7d\u5199\u56de\u5904\u7406","text":"<p>VirtualLoadQueue \u63a5\u6536\u6765\u81ea\u52a0\u8f7d\u5355\u5143\u7684\u6267\u884c\u7ed3\u679c\uff0c\u5e76\u66f4\u65b0\u76f8\u5e94\u6761\u76ee\u7684\u72b6\u6001\u3002</p> <pre><code>for(i &lt;- 0 until LoadPipelineWidth) {\n  io.ldin(i).ready := true.B\n  val loadWbIndex = io.ldin(i).bits.uop.lqIdx.value\n\n  val need_rep = io.ldin(i).bits.rep_info.need_rep\n  val need_valid = io.ldin(i).bits.updateAddrValid\n\n  when (io.ldin(i).valid) {\n    val hasExceptions = ExceptionNO.selectByFu(io.ldin(i).bits.uop.exceptionVec, LduCfg).asUInt.orR\n    when (!need_rep &amp;&amp; need_valid) {\n      committed(loadWbIndex) := true.B\n      debug_mmio(loadWbIndex) := io.ldin(i).bits.mmio\n      debug_paddr(loadWbIndex) := io.ldin(i).bits.paddr\n    }\n  }\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#6","title":"6. \u6062\u590d\u673a\u5236","text":"<p>\u5f53\u53d1\u751f\u5206\u652f\u9884\u6d4b\u9519\u8bef\u6216\u5f02\u5e38\u65f6\uff0cVirtualLoadQueue \u9700\u8981\u6062\u590d\u5230\u6b63\u786e\u72b6\u6001\u3002</p> <pre><code>// \u8ba1\u7b97\u9700\u8981\u53d6\u6d88\u7684\u6761\u76ee\nval needCancel = WireInit(VecInit((0 until VirtualLoadQueueSize).map(i =&gt; {\n  robIdx(i).needFlush(io.redirect) &amp;&amp; allocated(i)\n})))\n\n// \u53d6\u6d88\u76f8\u5173\u6761\u76ee\u7684\u5206\u914d\nfor (i &lt;- 0 until VirtualLoadQueueSize) {\n  when (needCancel(i)) {\n    allocated(i) := false.B\n  }\n}\n\n// \u8ba1\u7b97\u53d6\u6d88\u6570\u91cf\u7528\u4e8e\u6062\u590d\u6307\u9488\nval lastCycleCancelCount = PopCount(lastNeedCancel)\nval redirectCancelCount = RegEnable(lastCycleCancelCount + lastEnqCancel, 0.U, lastCycleRedirect.valid)\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#7","title":"7. \u72b6\u6001\u7ba1\u7406\u4e0e\u6027\u80fd\u76d1\u63a7","text":"<pre><code>// \u8f93\u51fa\u961f\u5217\u72b6\u6001\nio.lqEmpty := RegNext(validCount === 0.U)\nio.lqFull := !allowEnqueue\nio.lqDeq := GatedRegNext(lastCommitCount)\nio.lqCancelCnt := redirectCancelCount\nio.ldWbPtr := deqPtr\n\n// \u6027\u80fd\u8ba1\u6570\nQueuePerf(VirtualLoadQueueSize, validCount, !allowEnqueue)\nXSPerfAccumulate(\"mem_stall_anyload\", memStallAnyLoad)\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#8","title":"8. \u6807\u91cf\u52a0\u8f7d\u6307\u4ee4\u5904\u7406\u6d41\u7a0b\u793a\u4f8b","text":"<p>\u4e0b\u9762\u901a\u8fc7\u4e00\u4e2a\u6807\u91cf\u52a0\u8f7d\u6307\u4ee4\u7684\u5904\u7406\u6d41\u7a0b\u6765\u8bf4\u660e VirtualLoadQueue \u7684\u5de5\u4f5c\u673a\u5236\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#_1","title":"\u521d\u59cb\u72b6\u6001","text":"<p>\u5047\u8bbe\u7cfb\u7edf\u7684\u521d\u59cb\u72b6\u6001\u4e3a\uff1a</p> <ul> <li>\u961f\u5217\u5bb9\u91cf\uff1a<code>VirtualLoadQueueSize = 32</code></li> <li>\u5f53\u524d\u961f\u5217\u72b6\u6001\uff1a<code>enqPtr = {value=10, flag=0}</code>\uff0c<code>deqPtr = {value=8, flag=0}</code></li> <li>\u5927\u90e8\u5206\u6761\u76ee\u672a\u5206\u914d</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#1_1","title":"\u7b2c 1 \u6b65\uff1a\u6307\u4ee4\u5206\u53d1\u9636\u6bb5","text":"<p>\u5f53\u5904\u7406\u5668\u5206\u53d1\u4e00\u6761\u6807\u91cf\u52a0\u8f7d\u6307\u4ee4\uff08\u5982 LD x5, 0(x6)\uff09\u65f6\uff1a</p> <pre><code>io.enq.req(0).valid = true\nio.enq.req(0).bits.robIdx = 42  // \u5728ROB\u4e2d\u7684\u7d22\u5f15\nio.enq.req(0).bits.uopIdx = 3   // \u5fae\u64cd\u4f5c\u7d22\u5f15\n</code></pre> <ol> <li> <p>\u961f\u5217\u72b6\u6001\u68c0\u67e5\uff1a</p> <ul> <li><code>validCount = 10 - 8 = 2</code>\uff08\u5f53\u524d\u6709 2 \u4e2a\u6709\u6548\u6761\u76ee\uff09</li> <li><code>allowEnqueue = true</code>\uff08\u961f\u5217\u672a\u6ee1\uff0c\u53ef\u4ee5\u63a5\u53d7\u65b0\u8bf7\u6c42\uff09</li> </ul> </li> <li> <p>\u6761\u76ee\u5206\u914d\uff1a</p> <ul> <li>\u6761\u76ee 10 \u88ab\u5206\u914d\u7ed9\u8be5\u6307\u4ee4\uff1a</li> </ul> <pre><code>allocated(10) = true\nrobIdx(10) = 42\nuopIdx(10) = 3\ncommitted(10) = false\n</code></pre> </li> <li> <p>\u6307\u9488\u66f4\u65b0\uff1a</p> <ul> <li><code>enqPtrExt</code> \u66f4\u65b0\u4e3a 11\uff08\u589e\u52a0\u4e00\u4e2a\u6761\u76ee\uff09</li> </ul> </li> <li> <p>\u8fd4\u56de\u5206\u914d\u7ed3\u679c\uff1a</p> <ul> <li><code>io.enq.resp(0) = {value=10, flag=0}</code></li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#2_1","title":"\u7b2c 2 \u6b65\uff1a\u6267\u884c\u9636\u6bb5","text":"<p>\u52a0\u8f7d\u6307\u4ee4\u8fdb\u5165\u6267\u884c\u9636\u6bb5\uff0c\u6d41\u7ecf\u52a0\u8f7d\u5355\u5143\u7684\u6d41\u6c34\u7ebf\uff1a</p> <ol> <li>\u52a0\u8f7d\u53d1\u5c04\uff1a\u6307\u4ee4\u4ece\u4fdd\u7559\u7ad9\u53d1\u5c04\u5230\u52a0\u8f7d\u5355\u5143</li> <li>\u5730\u5740\u8ba1\u7b97\uff1a\u5728 S1 \u9636\u6bb5\u8ba1\u7b97\u6709\u6548\u5730\u5740</li> <li>\u7f13\u5b58\u8bbf\u95ee\uff1a\u5728 S2 \u9636\u6bb5\u8bbf\u95ee\u6570\u636e\u7f13\u5b58</li> <li>\u6570\u636e\u8fd4\u56de\uff1a\u5728 S3 \u9636\u6bb5\u83b7\u53d6\u6570\u636e\u5e76\u5199\u56de</li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#3-virtualloadqueue","title":"\u7b2c 3 \u6b65\uff1a\u5199\u56de VirtualLoadQueue","text":"<p>\u5f53\u52a0\u8f7d\u6307\u4ee4\u5728 S3 \u9636\u6bb5\u5b8c\u6210\u540e\uff0c\u7ed3\u679c\u901a\u8fc7 <code>ldin</code> \u63a5\u53e3\u5199\u56de VirtualLoadQueue\uff1a</p> <pre><code>io.ldin(0).valid = true\nio.ldin(0).bits.uop.lqIdx.value = 10\nio.ldin(0).bits.rep_info.need_rep = false  // \u4e0d\u9700\u8981\u91cd\u64ad\nio.ldin(0).bits.updateAddrValid = true     // \u5730\u5740\u6709\u6548\nio.ldin(0).bits.paddr = 0x80001000         // \u8bbf\u95ee\u7684\u7269\u7406\u5730\u5740\nio.ldin(0).bits.mmio = false               // \u4e0d\u662fMMIO\u8bbf\u95ee\n</code></pre> <p>VirtualLoadQueue \u5904\u7406\u8be5\u5199\u56de\uff1a</p> <pre><code>when (!need_rep &amp;&amp; need_valid) {\n  committed(10) := true.B          // \u6807\u8bb0\u4e3a\u5df2\u63d0\u4ea4\n  debug_mmio(10) := false          // \u8bb0\u5f55MMIO\u72b6\u6001\n  debug_paddr(10) := 0x80001000    // \u8bb0\u5f55\u7269\u7406\u5730\u5740\n}\n</code></pre>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#4_1","title":"\u7b2c 4 \u6b65\uff1a\u51fa\u961f\u5904\u7406","text":"<p>\u5728\u63a5\u4e0b\u6765\u7684\u5468\u671f\u4e2d\uff0cVirtualLoadQueue \u4f1a\u68c0\u67e5\u54ea\u4e9b\u6761\u76ee\u53ef\u4ee5\u51fa\u961f\uff1a</p> <ol> <li> <p>\u51fa\u961f\u68c0\u67e5\uff1a</p> <ul> <li>\u5bf9\u4e8e\u6761\u76ee 8 \u548c 9\uff08\u5047\u8bbe\u5df2\u63d0\u4ea4\uff09</li> <li>\u5bf9\u4e8e\u6761\u76ee 10\uff08\u6211\u4eec\u7684\u52a0\u8f7d\u6307\u4ee4\uff09<ul> <li><code>allocated(10) = true</code></li> <li><code>committed(10) = true</code></li> <li>\u53ef\u4ee5\u51fa\u961f</li> </ul> </li> </ul> </li> <li> <p>\u8ba1\u7b97\u51fa\u961f\u6570\u91cf\uff1a</p> <ul> <li><code>deqCountMask = 0b111</code>\uff08\u6761\u76ee 8-10 \u90fd\u53ef\u4ee5\u51fa\u961f\uff09</li> <li><code>commitCount = 3</code>\uff08\u53ef\u4ee5\u51fa\u961f 3 \u4e2a\u6761\u76ee\uff09</li> </ul> </li> <li> <p>\u66f4\u65b0\u51fa\u961f\u6307\u9488\uff1a</p> <ul> <li><code>deqPtrNext = 8 + 3 = 11</code></li> <li>\u4e0b\u4e00\u4e2a\u5468\u671f <code>deqPtr</code> \u66f4\u65b0\u4e3a 11</li> </ul> </li> <li> <p>\u91ca\u653e\u6761\u76ee\uff1a</p> <ul> <li>\u6761\u76ee 8-10 \u7684 <code>allocated</code> \u6807\u5fd7\u8bbe\u7f6e\u4e3a <code>false</code></li> <li>\u8fd9\u4e9b\u6761\u76ee\u73b0\u5728\u53ef\u4ee5\u88ab\u91cd\u65b0\u5206\u914d</li> </ul> </li> </ol>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#5_1","title":"\u7b2c 5 \u6b65\uff1a\u72b6\u6001\u66f4\u65b0","text":"<p>\u6700\u7ec8\u961f\u5217\u72b6\u6001\uff1a</p> <ul> <li><code>enqPtr = {value=11, flag=0}</code></li> <li><code>deqPtr = {value=11, flag=0}</code></li> <li>\u6761\u76ee 8-10 \u88ab\u91ca\u653e</li> <li><code>validCount = 0</code>\uff0c\u961f\u5217\u4e3a\u7a7a</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#9","title":"9. \u91cd\u5b9a\u5411\u5904\u7406\u793a\u4f8b","text":"<p>\u5f53\u53d1\u751f\u5206\u652f\u9884\u6d4b\u9519\u8bef\u65f6\uff0cVirtualLoadQueue \u9700\u8981\u53d6\u6d88\u9519\u8bef\u8def\u5f84\u4e0a\u7684\u6307\u4ee4\u3002</p>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#_2","title":"\u521d\u59cb\u72b6\u6001","text":"<p>\u5047\u8bbe\u961f\u5217\u4e2d\u6709\u591a\u4e2a\u6761\u76ee\uff0c\u5176\u4e2d\u4e00\u4e9b\u6765\u81ea\u9519\u8bef\u9884\u6d4b\u7684\u8def\u5f84\uff1a</p> <ul> <li>\u6761\u76ee 12-15\uff1a\u6765\u81ea\u6b63\u786e\u8def\u5f84\u7684\u6307\u4ee4\uff08<code>robIdx = 40-43</code>\uff09</li> <li>\u6761\u76ee 16-18\uff1a\u6765\u81ea\u9519\u8bef\u8def\u5f84\u7684\u6307\u4ee4\uff08<code>robIdx = 44-46</code>\uff09</li> <li><code>enqPtr = {value=19, flag=0}</code></li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#_3","title":"\u91cd\u5b9a\u5411\u5904\u7406","text":"<ol> <li>\u63a5\u6536\u91cd\u5b9a\u5411\u4fe1\u53f7\uff1a</li> </ol> <pre><code>io.redirect.valid = true\nio.redirect.bits.robIdx = 44  // \u4ecerobIdx=44\u5f00\u59cb\u7684\u6307\u4ee4\u90fd\u9700\u8981\u53d6\u6d88\n</code></pre> <ol> <li>\u8bc6\u522b\u9700\u8981\u53d6\u6d88\u7684\u6761\u76ee\uff1a</li> </ol> <pre><code>needCancel = [false, false, false, ..., false, true, true, true, false, ...]\n              \u6761\u76ee0   \u6761\u76ee1   \u6761\u76ee2      \u6761\u76ee11  \u6761\u76ee16 \u6761\u76ee17 \u6761\u76ee18 \u6761\u76ee19\n</code></pre> <ol> <li>\u53d6\u6d88\u5206\u914d\uff1a</li> </ol> <pre><code>for (i &lt;- 0 until VirtualLoadQueueSize) {\n  when (needCancel(i)) {\n    allocated(i) := false.B\n  }\n}\n</code></pre> <p>\u6761\u76ee 16-18 \u88ab\u6807\u8bb0\u4e3a\u672a\u5206\u914d</p> <ol> <li>\u8ba1\u7b97\u53d6\u6d88\u6570\u91cf\uff1a</li> </ol> <pre><code>   lastCycleCancelCount = 3  // \u53d6\u6d88\u4e863\u4e2a\u6761\u76ee\n</code></pre> <ol> <li>\u6062\u590d\u5165\u961f\u6307\u9488\uff1a    <pre><code>enqPtrExt := VecInit(enqPtrExt.map(_ - redirectCancelCount))\n// \u4ece19\u51cf\u81f316\n</code></pre></li> </ol> <p>\u6700\u7ec8\u72b6\u6001\uff1a</p> <ul> <li><code>enqPtr = {value=16, flag=0}</code></li> <li>\u6761\u76ee 16-18 \u88ab\u6807\u8bb0\u4e3a\u672a\u5206\u914d</li> <li>\u7cfb\u7edf\u53ef\u4ee5\u4ece\u6b63\u786e\u8def\u5f84\u7ee7\u7eed\u6267\u884c</li> </ul>"},{"location":"CPU/Backend/LSU/xiangshan/lsq/virtual_load_queue/#10","title":"10. \u603b\u7ed3\u4e0e\u5e94\u7528","text":"<p>VirtualLoadQueue \u6a21\u5757\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9ad8\u6548\u7684\u6807\u91cf\u52a0\u8f7d\u6307\u4ee4\u8ddf\u8e2a\u961f\u5217\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a</p> <ol> <li>\u9ad8\u6548\u5206\u914d\uff1aO(1)\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8d44\u6e90\u5206\u914d</li> <li>\u72b6\u6001\u8ddf\u8e2a\uff1a\u7cbe\u786e\u8ddf\u8e2a\u6bcf\u6761\u52a0\u8f7d\u6307\u4ee4\u7684\u6267\u884c\u72b6\u6001</li> <li>\u5feb\u901f\u6062\u590d\uff1a\u63d0\u4f9b\u9ad8\u6548\u7684\u91cd\u5b9a\u5411\u6062\u590d\u673a\u5236</li> <li>\u5faa\u73af\u590d\u7528\uff1a\u4f7f\u7528\u5faa\u73af\u961f\u5217\u673a\u5236\u9ad8\u6548\u5229\u7528\u6709\u9650\u8d44\u6e90</li> <li>\u534f\u540c\u5de5\u4f5c\uff1a\u4e0e\u5176\u4ed6 LSQ \u6a21\u5757\u534f\u4f5c\uff0c\u7ef4\u62a4\u5185\u5b58\u8bbf\u95ee\u987a\u5e8f</li> </ol> <p>\u5728 XiangShan \u5904\u7406\u5668\u4e2d\uff0cVirtualLoadQueue \u4f5c\u4e3a LSQ \u7cfb\u7edf\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u7ef4\u62a4\u52a0\u8f7d\u6307\u4ee4\u7684\u72b6\u6001\u548c\u987a\u5e8f\uff0c\u4e3a\u6b63\u786e\u7684\u4e71\u5e8f\u6267\u884c\u63d0\u4f9b\u57fa\u7840\u4fdd\u969c\u3002\u901a\u8fc7\u4e0e LoadQueueRAW\u3001LoadQueueRAR \u7b49\u6a21\u5757\u7684\u534f\u540c\u5de5\u4f5c\uff0c\u786e\u4fdd\u5185\u5b58\u8bbf\u95ee\u7684\u4e00\u81f4\u6027\u548c\u6b63\u786e\u6027\uff0c\u662f\u5b9e\u73b0\u9ad8\u6027\u80fd\u5185\u5b58\u7cfb\u7edf\u7684\u5173\u952e\u90e8\u5206\u3002</p>"},{"location":"CPU/fontend/decoder/ht_write_decoder/","title":"How to write efficient decoder","text":""},{"location":"GPU/","title":"Index","text":"<ul> <li>zartbot: https://mp.weixin.qq.com/s/rxwjGLXUQK-SCAYVcuBemw</li> <li>Analyzing Modern NVIDIA GPU cores:\u00a0https://arxiv.org/pdf/2503.20481v1</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/","title":"RISC-V\u6d6e\u70b9\u6269\u5c55(Zfh/Zfhmin/Zfbfmin/Zvfbfmin/Zvfbfwma)\u7814\u7a76\u62a5\u544a","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#_1","title":"\u4e00\u3001\u6269\u5c55\u6982\u8ff0","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#11","title":"1.1 \u6d6e\u70b9\u6269\u5c55\u7b80\u4ecb","text":"<p>RISC-V\u67b6\u6784\u63d0\u4f9b\u4e86\u591a\u79cd\u6d6e\u70b9\u6269\u5c55\uff0c\u4ee5\u6ee1\u8db3\u4e0d\u540c\u5e94\u7528\u573a\u666f\u7684\u9700\u6c42\uff1a</p> <ul> <li>Zfh\u6269\u5c55\uff1a\u63d0\u4f9bIEEE 754-2008\u6807\u51c6\u768416\u4f4d\u534a\u7cbe\u5ea6\u6d6e\u70b9\u6570\u6307\u4ee4\u652f\u6301\uff0c\u5b8c\u6574\u5b9e\u73b0\u5305\u62ec\u8ba1\u7b97\u548c\u8f6c\u6362\u6307\u4ee4</li> <li>Zfhmin\u6269\u5c55\uff1aZfh\u7684\u5b50\u96c6\uff0c\u4ec5\u5305\u542b\u534a\u7cbe\u5ea6\u6d6e\u70b9\u6570\u636e\u4f20\u8f93\u548c\u8f6c\u6362\u6307\u4ee4\uff0c\u4e0d\u5305\u542b\u8ba1\u7b97\u6307\u4ee4</li> <li>Zfbfmin\u6269\u5c55\uff1a\u63d0\u4f9bBF16(Brain Floating-point)\u683c\u5f0f\u7684\u6700\u5c0f\u652f\u6301\uff0c\u4e3b\u8981\u5305\u542b\u8f6c\u6362\u6307\u4ee4</li> <li>Zvfbfmin\u6269\u5c55\uff1a\u63d0\u4f9b\u5411\u91cfBF16\u8f6c\u6362\u6307\u4ee4\uff0c\u4e0eRISC-V\u5411\u91cf\u6269\u5c55(V)\u914d\u5408\u4f7f\u7528</li> <li>Zvfbfwma\u6269\u5c55\uff1a\u63d0\u4f9b\u5411\u91cfBF16\u6269\u5c55\u4e58\u52a0\u6307\u4ee4\uff0c\u4e3a\u673a\u5668\u5b66\u4e60\u63d0\u4f9b\u9ad8\u6027\u80fd\u77e9\u9635\u64cd\u4f5c</li> </ul> <p>\u8fd9\u4e9b\u6269\u5c55\u90fd\u4f9d\u8d56\u4e8e\u57fa\u672c\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6269\u5c55(F)\uff0c\u5e76\u6269\u5c55\u4e86NaN-boxing\u65b9\u6848\uff0c\u5141\u8bb8\u4f4e\u7cbe\u5ea6\u503c\u88ab\u5d4c\u5165\u5728\u66f4\u9ad8\u7cbe\u5ea6\u683c\u5f0f\u5185\u90e8\u3002</p>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#12","title":"1.2 \u5404\u6269\u5c55\u7684\u4f7f\u7528\u573a\u666f","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#121-zfhzfhmin","title":"1.2.1 Zfh/Zfhmin\u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u673a\u5668\u5b66\u4e60\u548c\u4eba\u5de5\u667a\u80fd\u5e94\u7528\uff0c\u63d0\u4f9b\u66f4\u9ad8\u7684\u5185\u5b58\u6548\u7387</li> <li>\u56fe\u5f62\u5904\u7406\uff0c\u7279\u522b\u662f\u5bf9\u7cbe\u5ea6\u8981\u6c42\u4e0d\u9ad8\u7684\u573a\u5408</li> <li>\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u9700\u8981\u8282\u7701\u5185\u5b58\u7a7a\u95f4\u7684\u573a\u666f</li> <li>\u79fb\u52a8\u8bbe\u5907\u7b49\u5bf9\u529f\u8017\u654f\u611f\u7684\u5e94\u7528</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#122-bf16","title":"1.2.2 BF16\u76f8\u5173\u6269\u5c55\u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u548c\u63a8\u7406</li> <li>\u795e\u7ecf\u7f51\u7edc\u52a0\u901f</li> <li>\u9ad8\u6027\u80fd\u8ba1\u7b97(HPC)\u5e94\u7528</li> <li>\u4fe1\u53f7\u5904\u7406</li> <li>\u9700\u8981FP16\u7684\u52a8\u6001\u8303\u56f4\u4f46\u5bf9\u7cbe\u5ea6\u8981\u6c42\u8f83\u4f4e\u7684\u5e94\u7528</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#13","title":"1.3 \u6269\u5c55\u95f4\u7684\u533a\u522b\u4e0e\u5173\u7cfb","text":"<ul> <li> <p>Zfhmin\u4e0eZfh\u7684\u533a\u522b\uff1aZfhmin\u662fZfh\u7684\u5b50\u96c6\uff0c\u4ec5\u5305\u542b\u6570\u636e\u4f20\u8f93\u548c\u8f6c\u6362\u6307\u4ee4\uff0c\u8bbe\u8ba1\u7406\u5ff5\u662f\u5c06\u534a\u7cbe\u5ea6\u683c\u5f0f\u4e3b\u8981\u7528\u4e8e\u5b58\u50a8\uff0c\u800c\u5728\u66f4\u9ad8\u7cbe\u5ea6\u4e0b\u6267\u884c\u8ba1\u7b97\u3002</p> </li> <li> <p>FP16(Zfh)\u4e0eBF16(Zfbfmin)\u7684\u533a\u522b\uff1a\u867d\u7136\u90fd\u662f16\u4f4d\u6d6e\u70b9\u683c\u5f0f\uff0c\u4f46\u670d\u52a1\u4e8e\u4e0d\u540c\u76ee\u7684\uff1a</p> </li> <li>FP16\uff1a\u7cbe\u5ea6\u548c\u8303\u56f4\u7684\u5e73\u8861\uff0c\u9002\u5408\u56fe\u5f62\u5904\u7406\u548c\u901a\u7528\u8ba1\u7b97</li> <li>BF16\uff1a\u4fdd\u7559FP32\u7684\u52a8\u6001\u8303\u56f4\u4f46\u7cbe\u5ea6\u964d\u4f4e\uff0c\u4e13\u4e3a\u673a\u5668\u5b66\u4e60\u4f18\u5316</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#_2","title":"\u4e8c\u3001\u6d6e\u70b9\u683c\u5f0f\u8be6\u89e3","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#21","title":"2.1 \u6d6e\u70b9\u6570\u8868\u793a\u57fa\u7840","text":"<p>IEEE 754\u6807\u51c6\u5b9a\u4e49\u4e86\u591a\u79cd\u7cbe\u5ea6\u7684\u6d6e\u70b9\u6570\u683c\u5f0f\uff0c\u6bcf\u79cd\u683c\u5f0f\u5747\u7531\u4ee5\u4e0b\u4e09\u90e8\u5206\u7ec4\u6210\uff1a - \u7b26\u53f7\u4f4d(Sign bit)\uff1a\u8868\u793a\u6570\u503c\u7684\u6b63\u8d1f - \u6307\u6570\u4f4d(Exponent)\uff1a\u8868\u793a\u6570\u503c\u7684\u5927\u5c0f\u8303\u56f4 - \u6709\u6548\u6570\u4f4d(Significand/Mantissa)\uff1a\u8868\u793a\u6570\u503c\u7684\u7cbe\u786e\u5ea6</p> <p>\u6d6e\u70b9\u6570\u7684\u57fa\u672c\u8868\u793a\u516c\u5f0f\u4e3a\uff1a \\(\\(Value = (-1)^{sign} \\times 2^{exponent} \\times 1.significand\\)\\)</p>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#22-fp16","title":"2.2 FP16(\u534a\u7cbe\u5ea6)\u683c\u5f0f","text":"<p>\u534a\u7cbe\u5ea6\u6d6e\u70b9\u6570\u4f7f\u752816\u4f4d\u5b58\u50a8\u7a7a\u95f4\uff0c\u5176\u4f4d\u5e03\u5c40\u5982\u4e0b\uff1a</p> <pre><code> 15 14           10 9                  0\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 S \u2502  Exponent   \u2502     Fraction     \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1 \u2502     5       \u2502        10        \u2502\n\u2502bit\u2502    bits     \u2502       bits       \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#221","title":"2.2.1 \u5b57\u6bb5\u89e3\u6790","text":"<ul> <li>\u7b26\u53f7\u4f4d(S, bit 15)\uff1a0\u8868\u793a\u6b63\u6570\uff0c1\u8868\u793a\u8d1f\u6570</li> <li>\u6307\u6570\u4f4d(Exponent, bits 14-10)\uff1a\u4f7f\u7528\u504f\u7f6e\u8868\u793a\u6cd5\uff0c\u504f\u7f6e\u503c\u4e3a15</li> <li>\u5b9e\u9645\u6307\u6570 = \u5b58\u50a8\u503c - 15</li> <li>\u8303\u56f4\uff1a[-15, 16]</li> <li>\u7279\u6b8a\u503c\uff1a<ul> <li>0\uff1a\u8868\u793a\u975e\u89c4\u683c\u5316\u6570\u6216\u96f6</li> <li>31(\u51681)\uff1a\u8868\u793a\u65e0\u7a77\u5927\u6216NaN</li> </ul> </li> <li>\u5c0f\u6570\u90e8\u5206(Fraction, bits 9-0)\uff1a\u8868\u793a\u5c3e\u6570\u7684\u5c0f\u6570\u90e8\u5206</li> <li>\u5bf9\u4e8e\u89c4\u683c\u5316\u6570\uff0c\u5b9e\u9645\u5c3e\u6570\u4e3a\u9690\u542b\u7684\u524d\u5bfc\"1\"\u52a0\u4e0a\u5c0f\u6570\u90e8\u5206(1.fraction)</li> <li>\u5bf9\u4e8e\u975e\u89c4\u683c\u5316\u6570\uff0c\u9690\u542b\u524d\u5bfc\u4e3a\"0\"(0.fraction)</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#222","title":"2.2.2 \u6570\u503c\u8303\u56f4","text":"<ul> <li>\u6700\u5c0f\u975e\u89c4\u683c\u5316\u6b63\u6570\uff1a2^(-24) \u2248 5.96 \u00d7 10^(-8)</li> <li>\u6700\u5c0f\u89c4\u683c\u5316\u6b63\u6570\uff1a2^(-14) \u2248 6.10 \u00d7 10^(-5)</li> <li>\u6700\u5927\u6709\u9650\u6570\uff1a65504(\u7ea62^15)</li> <li>\u7cbe\u5ea6\uff1a\u7ea6\u4e3a3-4\u4f4d\u5341\u8fdb\u5236\u6709\u6548\u6570\u5b57</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#23-bf16","title":"2.3 BF16(\u8111\u6d6e\u70b9)\u683c\u5f0f","text":"<p>BF16\u4f7f\u752816\u4f4d\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f46\u4e0eFP16\u4e0d\u540c\uff0c\u5b83\u4fdd\u7559\u4e86\u4e0eFP32\u76f8\u540c\u7684\u6307\u6570\u4f4d\u5bbd\u5ea6\uff0c\u4f46\u622a\u65ad\u4e86\u5c3e\u6570\uff1a</p> <pre><code> 15 14                7 6                 0\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 S \u2502     Exponent    \u2502     Fraction      \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1 \u2502        8        \u2502         7         \u2502\n\u2502bit\u2502      bits       \u2502       bits        \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#231","title":"2.3.1 \u5b57\u6bb5\u89e3\u6790","text":"<ul> <li>\u7b26\u53f7\u4f4d(S, bit 15)\uff1a0\u8868\u793a\u6b63\u6570\uff0c1\u8868\u793a\u8d1f\u6570</li> <li>\u6307\u6570\u4f4d(Exponent, bits 14-7)\uff1a\u4f7f\u7528\u504f\u7f6e\u8868\u793a\u6cd5\uff0c\u504f\u7f6e\u503c\u4e3a127</li> <li>\u5b9e\u9645\u6307\u6570 = \u5b58\u50a8\u503c - 127</li> <li>\u8303\u56f4\uff1a[-126, 127]</li> <li>\u7279\u6b8a\u503c\uff1a<ul> <li>0\uff1a\u8868\u793a\u975e\u89c4\u683c\u5316\u6570\u6216\u96f6</li> <li>255(\u51681)\uff1a\u8868\u793a\u65e0\u7a77\u5927\u6216NaN</li> </ul> </li> <li>\u5c0f\u6570\u90e8\u5206(Fraction, bits 6-0)\uff1a\u8868\u793a\u5c3e\u6570\u7684\u5c0f\u6570\u90e8\u5206</li> <li>\u5bf9\u4e8e\u89c4\u683c\u5316\u6570\uff0c\u5b9e\u9645\u5c3e\u6570\u4e3a\u9690\u542b\u7684\u524d\u5bfc\"1\"\u52a0\u4e0a\u5c0f\u6570\u90e8\u5206(1.fraction)</li> <li>\u5bf9\u4e8e\u975e\u89c4\u683c\u5316\u6570\uff0c\u9690\u542b\u524d\u5bfc\u4e3a\"0\"(0.fraction)</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#232","title":"2.3.2 \u6570\u503c\u8303\u56f4","text":"<ul> <li>\u6700\u5c0f\u89c4\u683c\u5316\u6b63\u6570\uff1a2^(-126) \u2248 1.18 \u00d7 10^(-38)\uff08\u4e0eFP32\u76f8\u540c\uff09</li> <li>\u6700\u5927\u6709\u9650\u6570\uff1a\u7ea63.4 \u00d7 10^38\uff08\u4e0eFP32\u76f8\u540c\uff09</li> <li>\u7cbe\u5ea6\uff1a\u7ea6\u4e3a2-3\u4f4d\u5341\u8fdb\u5236\u6709\u6548\u6570\u5b57</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#233-fp32bf16","title":"2.3.3 FP32\u5230BF16\u7684\u8f6c\u6362","text":"<p>FP32\u5230BF16\u7684\u8f6c\u6362\u6bd4FP32\u5230FP16\u7684\u8f6c\u6362\u66f4\u7b80\u5355\uff0c\u53ea\u9700\u622a\u65ad\u4f4e16\u4f4d\u5c3e\u6570\uff1a</p> <pre><code>FP32 to BF16 conversion:\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  S  \u2502  Exponent   \u2502           Fraction            \u2502\n\u2502(1b) \u2502   (8 bits)  \u2502           (23 bits)           \u2502\n\u2514\u2500\u2500\u252c\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   \u2502         \u2502                      \u2502\n   \u2502         \u2502                      \u2502 (truncate lower 16 bits)\n   \u25bc         \u25bc                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  S  \u2502  Exponent   \u2502   Fraction    \u2502\n\u2502(1b) \u2502   (8 bits)  \u2502   (7 bits)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            BF16\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#24-fp32","title":"2.4 FP32(\u5355\u7cbe\u5ea6)\u683c\u5f0f","text":"<p>\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u4f7f\u752832\u4f4d\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f4d\u5e03\u5c40\u5982\u4e0b\uff1a</p> <pre><code> 31 30                23 22                                     0\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 S \u2502     Exponent    \u2502                Fraction               \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1 \u2502        8        \u2502                  23                   \u2502\n\u2502bit\u2502      bits       \u2502                 bits                  \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#241","title":"2.4.1 \u5b57\u6bb5\u89e3\u6790","text":"<ul> <li>\u7b26\u53f7\u4f4d(S, bit 31)\uff1a0\u8868\u793a\u6b63\u6570\uff0c1\u8868\u793a\u8d1f\u6570</li> <li>\u6307\u6570\u4f4d(Exponent, bits 30-23)\uff1a\u4f7f\u7528\u504f\u7f6e\u8868\u793a\u6cd5\uff0c\u504f\u7f6e\u503c\u4e3a127</li> <li>\u5b9e\u9645\u6307\u6570 = \u5b58\u50a8\u503c - 127</li> <li>\u8303\u56f4\uff1a[-126, 127]</li> <li>\u7279\u6b8a\u503c\uff1a<ul> <li>0\uff1a\u8868\u793a\u975e\u89c4\u683c\u5316\u6570\u6216\u96f6</li> <li>255(\u51681)\uff1a\u8868\u793a\u65e0\u7a77\u5927\u6216NaN</li> </ul> </li> <li>\u5c0f\u6570\u90e8\u5206(Fraction, bits 22-0)\uff1a\u8868\u793a\u5c3e\u6570\u7684\u5c0f\u6570\u90e8\u5206</li> <li>\u5bf9\u4e8e\u89c4\u683c\u5316\u6570\uff0c\u5b9e\u9645\u5c3e\u6570\u4e3a\u9690\u542b\u7684\u524d\u5bfc\"1\"\u52a0\u4e0a\u5c0f\u6570\u90e8\u5206(1.fraction)</li> <li>\u5bf9\u4e8e\u975e\u89c4\u683c\u5316\u6570\uff0c\u9690\u542b\u524d\u5bfc\u4e3a\"0\"(0.fraction)</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#242","title":"2.4.2 \u6570\u503c\u8303\u56f4","text":"<ul> <li>\u6700\u5c0f\u975e\u89c4\u683c\u5316\u6b63\u6570\uff1a2^(-149) \u2248 1.4 \u00d7 10^(-45)</li> <li>\u6700\u5c0f\u89c4\u683c\u5316\u6b63\u6570\uff1a2^(-126) \u2248 1.18 \u00d7 10^(-38)</li> <li>\u6700\u5927\u6709\u9650\u6570\uff1a\u7ea63.4 \u00d7 10^(38)</li> <li>\u7cbe\u5ea6\uff1a\u7ea6\u4e3a7-8\u4f4d\u5341\u8fdb\u5236\u6709\u6548\u6570\u5b57</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#25-fp64","title":"2.5 FP64(\u53cc\u7cbe\u5ea6)\u683c\u5f0f\u7b80\u8ff0","text":"<p>\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u4f7f\u752864\u4f4d\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f4d\u5e03\u5c40\u5982\u4e0b\uff1a</p> <pre><code> 63 62                52 51                                     0\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 S \u2502     Exponent    \u2502                Fraction               \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1 \u2502       11        \u2502                  52                   \u2502\n\u2502bit\u2502      bits       \u2502                 bits                  \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#251","title":"2.5.1 \u5b57\u6bb5\u89e3\u6790","text":"<ul> <li>\u7b26\u53f7\u4f4d(S, bit 63)\uff1a0\u8868\u793a\u6b63\u6570\uff0c1\u8868\u793a\u8d1f\u6570</li> <li>\u6307\u6570\u4f4d(Exponent, bits 62-52)\uff1a\u4f7f\u7528\u504f\u7f6e\u8868\u793a\u6cd5\uff0c\u504f\u7f6e\u503c\u4e3a1023</li> <li>\u5b9e\u9645\u6307\u6570 = \u5b58\u50a8\u503c - 1023</li> <li>\u8303\u56f4\uff1a[-1022, 1023]</li> <li>\u5c0f\u6570\u90e8\u5206(Fraction, bits 51-0)\uff1a\u8868\u793a\u5c3e\u6570\u7684\u5c0f\u6570\u90e8\u5206</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#252","title":"2.5.2 \u6570\u503c\u8303\u56f4","text":"<ul> <li>\u6700\u5c0f\u89c4\u683c\u5316\u6b63\u6570\uff1a\u7ea62.2 \u00d7 10^(-308)</li> <li>\u6700\u5927\u6709\u9650\u6570\uff1a\u7ea61.8 \u00d7 10^(308)</li> <li>\u7cbe\u5ea6\uff1a\u7ea6\u4e3a15-17\u4f4d\u5341\u8fdb\u5236\u6709\u6548\u6570\u5b57</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#26","title":"2.6 \u7279\u6b8a\u503c\u8868\u793a","text":"<p>IEEE 754\u6807\u51c6\u5b9a\u4e49\u4e86\u51e0\u7c7b\u7279\u6b8a\u503c\uff1a</p>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#261","title":"2.6.1 \u96f6\u503c\u8868\u793a","text":"<ul> <li>\u6b63\u96f6\uff1a\u7b26\u53f7\u4f4d=0\uff0c\u6307\u6570\u4f4d=0\uff0c\u5c0f\u6570\u90e8\u5206=0</li> <li>\u8d1f\u96f6\uff1a\u7b26\u53f7\u4f4d=1\uff0c\u6307\u6570\u4f4d=0\uff0c\u5c0f\u6570\u90e8\u5206=0</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#262","title":"2.6.2 \u65e0\u7a77\u5927\u8868\u793a","text":"<ul> <li>\u6b63\u65e0\u7a77\uff1a\u7b26\u53f7\u4f4d=0\uff0c\u6307\u6570\u4f4d\u51681\uff0c\u5c0f\u6570\u90e8\u5206=0</li> <li>\u8d1f\u65e0\u7a77\uff1a\u7b26\u53f7\u4f4d=1\uff0c\u6307\u6570\u4f4d\u51681, \u5c0f\u6570\u90e8\u5206=0</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#263-nan","title":"2.6.3 NaN(\u975e\u6570)\u8868\u793a","text":"<ul> <li>\u4fe1\u53f7NaN(sNaN)\uff1a\u6307\u6570\u4f4d\u51681\uff0c\u5c0f\u6570\u90e8\u5206\u22600\uff0c\u6700\u9ad8\u4f4d\u5c0f\u6570\u4f4d=0</li> <li>\u5b89\u9759NaN(qNaN)\uff1a\u6307\u6570\u4f4d\u51681\uff0c\u5c0f\u6570\u90e8\u5206\u22600\uff0c\u6700\u9ad8\u4f4d\u5c0f\u6570\u4f4d=1</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#27","title":"2.7 \u6d6e\u70b9\u683c\u5f0f\u6bd4\u8f83","text":"\u7279\u6027 BF16 FP16(\u534a\u7cbe\u5ea6) FP32(\u5355\u7cbe\u5ea6) FP64(\u53cc\u7cbe\u5ea6) \u603b\u4f4d\u6570 16\u4f4d 16\u4f4d 32\u4f4d 64\u4f4d \u7b26\u53f7\u4f4d 1\u4f4d 1\u4f4d 1\u4f4d 1\u4f4d \u6307\u6570\u4f4d 8\u4f4d 5\u4f4d 8\u4f4d 11\u4f4d \u5c0f\u6570\u4f4d 7\u4f4d 10\u4f4d 23\u4f4d 52\u4f4d \u6307\u6570\u504f\u7f6e 127 15 127 1023 \u6709\u6548\u6570\u5b57(\u5341\u8fdb\u5236) \u7ea62-3\u4f4d \u7ea63-4\u4f4d \u7ea67-8\u4f4d \u7ea615-17\u4f4d \u6700\u5927\u503c \u7ea63.4\u00d710^38 \u7ea665504 \u7ea63.4\u00d710^38 \u7ea61.8\u00d710^308 \u6700\u5c0f\u89c4\u683c\u5316\u6b63\u6570 \u7ea61.18\u00d710^(-38) \u7ea66.10\u00d710^(-5) \u7ea61.18\u00d710^(-38) \u7ea62.2\u00d710^(-308) \u52a8\u6001\u8303\u56f4 \u5e7f \u7a84 \u5e7f \u6700\u5e7f \u5b58\u50a8\u6548\u7387 \u9ad8 \u9ad8 \u4e2d \u4f4e \u8ba1\u7b97\u7cbe\u5ea6 \u4f4e \u4f4e-\u4e2d \u4e2d \u9ad8"},{"location":"RISCV/ISA/Zfh_Zfhmin/#28-bf16","title":"2.8 BF16\u7684\u673a\u5668\u5b66\u4e60\u4f18\u52bf","text":"<p>BF16\u4e3a\u673a\u5668\u5b66\u4e60\u5e94\u7528\u63d0\u4f9b\u51e0\u4e2a\u5173\u952e\u4f18\u52bf\uff1a</p> <ol> <li>\u4e0eFP32\u76f8\u540c\u7684\u6307\u6570\u8303\u56f4\uff1a\u4fdd\u7559\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u6240\u9700\u7684\u52a8\u6001\u8303\u56f4</li> <li>\u76f8\u6bd4FP32\u964d\u4f4e\u7684\u7cbe\u5ea6\uff1a7\u4f4d\u5c3e\u6570\u5bf9\u8bb8\u591aML\u7b97\u6cd5\u63d0\u4f9b\u8db3\u591f\u7684\u7cbe\u5ea6</li> <li>\u5185\u5b58\u6548\u7387\uff1a\u6bd4FP32\u51cf\u534a\u7684\u5b58\u50a8\u9700\u6c42</li> <li>\u8ba1\u7b97\u6548\u7387\uff1a\u6bd4FP32\u64cd\u4f5c\u66f4\u9ad8\u7684\u541e\u5410\u91cf</li> <li>\u7b80\u5316\u7684\u8f6c\u6362\uff1a\u901a\u8fc7\u622a\u65ad\u76f4\u63a5\u4eceFP32\u8f6c\u6362(\u76f8\u6bd4FP16\u9700\u8981\u8c03\u6574\u6307\u6570)</li> </ol>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#_3","title":"\u4e09\u3001\u6307\u4ee4\u96c6\u5206\u6790","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#31-zfh","title":"3.1 Zfh\u6307\u4ee4\u96c6","text":"<p>\u6839\u636eSpike\u6a21\u62df\u5668\u4e2d<code>riscv.mk</code>\u6587\u4ef6\u4e0eRISC-V\u89c4\u8303\uff0c\u53ef\u5c06Zfh\u6307\u4ee4\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a</p>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#311","title":"3.1.1 \u6309\u529f\u80fd\u5206\u7c7b","text":"<ol> <li>\u52a0\u8f7d/\u5b58\u50a8\u6307\u4ee4</li> <li>FLH: \u534a\u7cbe\u5ea6\u6d6e\u70b9\u52a0\u8f7d\u6307\u4ee4</li> <li> <p>FSH: \u534a\u7cbe\u5ea6\u6d6e\u70b9\u5b58\u50a8\u6307\u4ee4</p> </li> <li> <p>\u8ba1\u7b97\u6307\u4ee4</p> </li> <li>\u7b97\u672f\u8fd0\u7b97: FADD_H, FSUB_H, FMUL_H, FDIV_H, FSQRT_H</li> <li>\u878d\u5408\u4e58\u52a0: FMADD_H, FMSUB_H, FNMADD_H, FNMSUB_H</li> <li> <p>\u6700\u5927/\u6700\u5c0f\u503c: FMAX_H, FMIN_H</p> </li> <li> <p>\u8f6c\u6362\u6307\u4ee4</p> </li> <li>\u6d6e\u70b9\u4e0e\u6574\u6570\u8f6c\u6362: FCVT_W_H, FCVT_WU_H, FCVT_L_H, FCVT_LU_H, FCVT_H_W, FCVT_H_WU, FCVT_H_L, FCVT_H_LU</li> <li> <p>\u6d6e\u70b9\u4e4b\u95f4\u8f6c\u6362: FCVT_S_H, FCVT_H_S, FCVT_D_H, FCVT_H_D, FCVT_Q_H, FCVT_H_Q</p> </li> <li> <p>\u7b26\u53f7\u64cd\u4f5c\u6307\u4ee4</p> </li> <li> <p>FSGNJ_H, FSGNJN_H, FSGNJX_H</p> </li> <li> <p>\u6bd4\u8f83\u6307\u4ee4</p> </li> <li> <p>FEQ_H, FLT_H, FLE_H</p> </li> <li> <p>\u5206\u7c7b\u6307\u4ee4</p> </li> <li> <p>FCLASS_H</p> </li> <li> <p>\u4f4d\u6a21\u5f0f\u79fb\u52a8\u6307\u4ee4</p> </li> <li> <p>FMV_X_H, FMV_H_X</p> </li> <li> <p>Zfh+Zfa \u6269\u5c55\u6307\u4ee4</p> </li> <li>FLI_H, FMAXM_H, FMINM_H, FROUND_H, FROUNDNX_H, FLEQ_H, FLTQ_H</li> </ol>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#312-zfh","title":"3.1.2 Zfh\u6307\u4ee4\u7f16\u7801\u8868","text":"<p>\u6839\u636e<code>encoding.h</code>\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u6211\u6574\u7406\u4e86\u4ee5\u4e0bZfh\u6307\u4ee4\u7684\u7f16\u7801\u8868\uff1a</p> \u6307\u4ee4\u540d\u79f0 \u64cd\u4f5c\u7801(MATCH) \u63a9\u7801(MASK) \u683c\u5f0f \u64cd\u4f5c \u529f\u80fd\u63cf\u8ff0 FADD_H 0x4000053 0xfe00007f R FD = FS1 + FS2 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u52a0\u6cd5 FSUB_H 0xc000053 0xfe00007f R FD = FS1 - FS2 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u51cf\u6cd5 FMUL_H 0x14000053 0xfe00007f R FD = FS1 \u00d7 FS2 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u4e58\u6cd5 FDIV_H 0x1c000053 0xfe00007f R FD = FS1 \u00f7 FS2 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u9664\u6cd5 FSQRT_H 0x5c000053 0xfff0007f R FD = \u221aFS1 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u5e73\u65b9\u6839 FMADD_H 0x4000043 0x600007f R4 FD = (FS1 \u00d7 FS2) + FS3 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u878d\u5408\u4e58\u52a0 FMSUB_H 0x4000047 0x600007f R4 FD = (FS1 \u00d7 FS2) - FS3 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u878d\u5408\u4e58\u51cf FNMADD_H 0x400004f 0x600007f R4 FD = -((FS1 \u00d7 FS2) + FS3) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u8d1f\u878d\u5408\u4e58\u52a0 FNMSUB_H 0x400004b 0x600007f R4 FD = -((FS1 \u00d7 FS2) - FS3) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u8d1f\u878d\u5408\u4e58\u51cf FLH 0x1007 0x707f I FD = MEM[RS1+imm] \u534a\u7cbe\u5ea6\u6d6e\u70b9\u52a0\u8f7d FSH 0x1027 0x707f S MEM[RS1+imm] = FS2 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u5b58\u50a8 FMAX_H 0x2c001053 0xfe00707f R FD = max(FS1, FS2) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6700\u5927\u503c FMIN_H 0x2c000053 0xfe00707f R FD = min(FS1, FS2) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6700\u5c0f\u503c FCLASS_H 0xe4001053 0xfff0707f R RD = classify(FS1) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u5206\u7c7b FCVT_W_H 0xc4000053 0xfff0007f R RD = int32(FS1) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u8f6c32\u4f4d\u6709\u7b26\u53f7\u6574\u6570 FCVT_WU_H 0xc4100053 0xfff0007f R RD = uint32(FS1) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u8f6c32\u4f4d\u65e0\u7b26\u53f7\u6574\u6570 FCVT_L_H 0xc4200053 0xfff0007f R RD = int64(FS1) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u8f6c64\u4f4d\u6709\u7b26\u53f7\u6574\u6570 FCVT_LU_H 0xc4300053 0xfff0007f R RD = uint64(FS1) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u8f6c64\u4f4d\u65e0\u7b26\u53f7\u6574\u6570 FCVT_H_W 0xd4000053 0xfff0007f R FD = float16(RS1) 32\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8f6c\u534a\u7cbe\u5ea6\u6d6e\u70b9 FCVT_H_WU 0xd4100053 0xfff0007f R FD = float16(RS1) 32\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u8f6c\u534a\u7cbe\u5ea6\u6d6e\u70b9 FCVT_H_L 0xd4200053 0xfff0007f R FD = float16(RS1) 64\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8f6c\u534a\u7cbe\u5ea6\u6d6e\u70b9 FCVT_H_LU 0xd4300053 0xfff0007f R FD = float16(RS1) 64\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u8f6c\u534a\u7cbe\u5ea6\u6d6e\u70b9 FCVT_S_H 0x40200053 0xfff0007f R FD = float32(FS1) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u8f6c\u5355\u7cbe\u5ea6\u6d6e\u70b9 FCVT_H_S 0x44000053 0xfff0007f R FD = float16(FS1) \u5355\u7cbe\u5ea6\u6d6e\u70b9\u8f6c\u534a\u7cbe\u5ea6\u6d6e\u70b9 FCVT_D_H 0x42200053 0xfff0007f R FD = float64(FS1) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u8f6c\u53cc\u7cbe\u5ea6\u6d6e\u70b9 FCVT_H_D 0x44100053 0xfff0007f R FD = float16(FS1) \u53cc\u7cbe\u5ea6\u6d6e\u70b9\u8f6c\u534a\u7cbe\u5ea6\u6d6e\u70b9 FCVT_Q_H 0x46200053 0xfff0007f R FD = float128(FS1) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u8f6c\u56db\u7cbe\u5ea6\u6d6e\u70b9 FCVT_H_Q 0x44300053 0xfff0007f R FD = float16(FS1) \u56db\u7cbe\u5ea6\u6d6e\u70b9\u8f6c\u534a\u7cbe\u5ea6\u6d6e\u70b9 FEQ_H 0xa4002053 0xfe00707f R RD = (FS1 == FS2) ? 1 : 0 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6bd4\u8f83\u76f8\u7b49 FLT_H 0xa4001053 0xfe00707f R RD = (FS1 &lt; FS2) ? 1 : 0 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6bd4\u8f83\u5c0f\u4e8e FLE_H 0xa4000053 0xfe00707f R RD = (FS1 &lt;= FS2) ? 1 : 0 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6bd4\u8f83\u5c0f\u4e8e\u7b49\u4e8e FSGNJ_H 0x24000053 0xfe00707f R FD = \u534a\u7cbe\u5ea6\u6d6e\u70b9\u7b26\u53f7\u6ce8\u5165 FSGNJN_H 0x24001053 0xfe00707f R FD = \u534a\u7cbe\u5ea6\u6d6e\u70b9\u7b26\u53f7\u6ce8\u5165(\u8d1f) FSGNJX_H 0x24002053 0xfe00707f R FD = \u534a\u7cbe\u5ea6\u6d6e\u70b9\u7b26\u53f7\u6ce8\u5165(\u5f02\u6216) FMV_X_H 0xe4000053 0xfff0707f R RD = bits(FS1) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u4f4d\u6a21\u5f0f\u79fb\u81f3\u6574\u6570\u5bc4\u5b58\u5668 FMV_H_X 0xf4000053 0xfff0707f R FD = bits(RS1) \u6574\u6570\u5bc4\u5b58\u5668\u4f4d\u6a21\u5f0f\u79fb\u81f3\u534a\u7cbe\u5ea6\u6d6e\u70b9"},{"location":"RISCV/ISA/Zfh_Zfhmin/#313-zfhzfa","title":"3.1.3 Zfh+Zfa\u6269\u5c55\u6307\u4ee4\u7f16\u7801\u8868","text":"\u6307\u4ee4\u540d\u79f0 \u64cd\u4f5c\u7801(MATCH) \u63a9\u7801(MASK) \u683c\u5f0f \u64cd\u4f5c \u529f\u80fd\u63cf\u8ff0 FLI_H 0xf4100053 0xfff0707f R FD = immediate \u534a\u7cbe\u5ea6\u6d6e\u70b9\u52a0\u8f7d\u7acb\u5373\u6570 FMAXM_H 0x2c003053 0xfe00707f R FD = maxMagnitude(FS1, FS2) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6700\u5927\u503c(\u9009\u53d6\u7edd\u5bf9\u503c\u8f83\u5927\u8005) FMINM_H 0x2c002053 0xfe00707f R FD = minMagnitude(FS1, FS2) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6700\u5c0f\u503c(\u9009\u53d6\u7edd\u5bf9\u503c\u8f83\u5c0f\u8005) FROUND_H 0x44400053 0xfff0007f R FD = round(FS1) \u534a\u7cbe\u5ea6\u6d6e\u70b9\u820d\u5165\u5230\u6574\u6570 FROUNDNX_H 0x44500053 0xfff0007f R FD = roundExact(FS1) \u5e26\u7cbe\u786e\u5f02\u5e38\u6807\u5fd7\u7684\u534a\u7cbe\u5ea6\u6d6e\u70b9\u820d\u5165 FLEQ_H 0xa4004053 0xfe00707f R RD = (FS1 &lt;= FS2) ? 1 : 0 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6bd4\u8f83\u5c0f\u4e8e\u7b49\u4e8e(\u987a\u5e8f\u6bd4\u8f83) FLTQ_H 0xa4005053 0xfe00707f R RD = (FS1 &lt; FS2) ? 1 : 0 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6bd4\u8f83\u5c0f\u4e8e(\u987a\u5e8f\u6bd4\u8f83)"},{"location":"RISCV/ISA/Zfh_Zfhmin/#32-zfhmin","title":"3.2 Zfhmin\u6307\u4ee4\u96c6","text":"<p>Zfhmin\u662fZfh\u7684\u5b50\u96c6\uff0c\u4ec5\u5305\u542b\u4ee5\u4e0b\u6307\u4ee4\uff1a - FLH, FSH\uff1a\u534a\u7cbe\u5ea6\u6d6e\u70b9\u52a0\u8f7d/\u5b58\u50a8\u6307\u4ee4 - FMV.X.H, FMV.H.X\uff1a\u534a\u7cbe\u5ea6\u6d6e\u70b9\u4e0e\u6574\u6570\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u4f4d\u6a21\u5f0f\u79fb\u52a8 - FCVT.S.H, FCVT.H.S\uff1a\u534a\u7cbe\u5ea6\u6d6e\u70b9\u4e0e\u5355\u7cbe\u5ea6\u6d6e\u70b9\u4e4b\u95f4\u7684\u8f6c\u6362 - \u5982\u679c\u5b58\u5728D\u6269\u5c55\uff0c\u8fd8\u5305\u62ec\uff1aFCVT.D.H, FCVT.H.D - \u5982\u679c\u5b58\u5728Q\u6269\u5c55\uff0c\u8fd8\u5305\u62ec\uff1aFCVT.Q.H, FCVT.H.Q</p>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#33-bf16","title":"3.3 BF16\u76f8\u5173\u6269\u5c55\u6307\u4ee4\u96c6","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#331-zfbfmin","title":"3.3.1 Zfbfmin\u6269\u5c55","text":"<p>Zfbfmin\u6269\u5c55\u63d0\u4f9b\u6700\u5c0f\u7684\u6807\u91cfBF16\u652f\u6301\uff0c\u4e3b\u8981\u5305\u542b\u8f6c\u6362\u6307\u4ee4\uff1a</p> \u6307\u4ee4 \u63cf\u8ff0 \u64cd\u4f5c FCVT.BF16.S \u5c06FP32\u8f6c\u6362\u4e3aBF16 FD = bf16(FS1) FCVT.S.BF16 \u5c06BF16\u8f6c\u6362\u4e3aFP32 FD = f32(FS1) <p>\u8fd9\u4e9b\u6307\u4ee4\u4f7f\u8f6f\u4ef6\u80fd\u591f\u5728BF16\u548cFP32\u683c\u5f0f\u4e4b\u95f4\u6267\u884c\u8f6c\u6362\u3002\u4eceFP32\u5230BF16\u7684\u8f6c\u6362\u901a\u5e38\u6d89\u53ca\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u53ef\u8868\u793aBF16\u503c\u3002</p> \u6307\u4ee4 \u64cd\u4f5c\u7801(MATCH) \u63a9\u7801(MASK) \u683c\u5f0f \u64cd\u4f5c FCVT.BF16.S 0x44200053 0xfff0007f R FD = bf16(FS1) FCVT.S.BF16 0x40600053 0xfff0007f R FD = f32(FS1)"},{"location":"RISCV/ISA/Zfh_Zfhmin/#332-zvfbfmin","title":"3.3.2 Zvfbfmin\u6269\u5c55","text":"<p>Zvfbfmin\u6269\u5c55\u6dfb\u52a0\u4e86\u5411\u91cfBF16\u8f6c\u6362\u6307\u4ee4\uff1a</p> \u6307\u4ee4 \u63cf\u8ff0 \u64cd\u4f5c VFNCVTBF16.F.F.W \u5411\u91cfFP32\u8f6cBF16 vd[i] = bf16(vs2[i]) VFWCVTF.F.F.V \u5411\u91cfBF16\u8f6cFP32 vd[i] = f32(vs2[i]) <p>\u8fd9\u4e9b\u6307\u4ee4\u53ef\u4ee5\u5e76\u884c\u8f6c\u6362\u591a\u4e2a\u5143\u7d20\uff0c\u663e\u8457\u52a0\u901f\u5411\u91cf\u64cd\u4f5c\u7684\u683c\u5f0f\u8f6c\u6362\u3002</p>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#333-zvfbfwma","title":"3.3.3 Zvfbfwma\u6269\u5c55","text":"<p>Zvfbfwma\u6269\u5c55\u63d0\u4f9b\u5bf9\u77e9\u9635\u64cd\u4f5c\u81f3\u5173\u91cd\u8981\u7684\u5411\u91cfBF16\u6269\u5c55\u4e58\u52a0\u6307\u4ee4\uff1a</p> \u6307\u4ee4 \u63cf\u8ff0 \u64cd\u4f5c VFWMACCBF16 \u5411\u91cf\u6269\u5c55\u4e58\u7d2f\u52a0 vd[i] = (vs1[i] \u00d7 vs2[i]) + vd[i] (BF16\u2192FP32) VFWMACCTF16 \u5411\u91cf\u6269\u5c55\u4e58\u7d2f\u52a0(TF16) vd[i] = (vs1[i] \u00d7 vs2[i]) + vd[i] (TF16\u2192FP32) <p>\u8fd9\u4e9b\u6307\u4ee4\u5bf9\u77e9\u9635\u4e58\u6cd5\u64cd\u4f5c\u8fdb\u884c\u4e86\u7279\u522b\u4f18\u5316\uff0c\u5176\u4e2d\uff1a - BF16\u8f93\u5165\u76f8\u4e58 - \u4e58\u79ef\u4ee5FP32\u683c\u5f0f\u7d2f\u52a0 - \u5728\u7d2f\u52a0\u9636\u6bb5\u4fdd\u6301\u66f4\u9ad8\u7cbe\u5ea6</p>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#spike","title":"\u56db\u3001Spike\u4e2d\u7684\u5b9e\u73b0\u5206\u6790","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#41","title":"4.1 \u5b8f\u7684\u529f\u80fd\u8bf4\u660e","text":"<p>\u5728\u6df1\u5165\u6307\u4ee4\u5b9e\u73b0\u524d\uff0c\u5148\u4e86\u89e3Spike\u4e2d\u5e38\u7528\u5b8f\u7684\u529f\u80fd\uff1a</p> <ul> <li><code>require_extension(ext)</code>: \u68c0\u67e5\u7279\u5b9a\u6269\u5c55\u662f\u5426\u542f\u7528\uff0c\u5426\u5219\u89e6\u53d1\u975e\u6cd5\u6307\u4ee4\u5f02\u5e38</li> <li><code>require_either_extension(ext1, ext2)</code>: \u68c0\u67e5\u81f3\u5c11\u4e00\u4e2a\u6269\u5c55\u542f\u7528\uff0c\u5426\u5219\u89e6\u53d1\u5f02\u5e38</li> <li><code>require_fp</code>: \u68c0\u67e5\u6d6e\u70b9\u5355\u5143\u662f\u5426\u542f\u7528\uff0c\u5426\u5219\u89e6\u53d1\u975e\u6cd5\u6307\u4ee4\u5f02\u5e38</li> <li><code>FRS1_H</code>/<code>FRS2_H</code>: \u4ece\u6d6e\u70b9\u5bc4\u5b58\u5668\u8bfb\u53d6\u534a\u7cbe\u5ea6\u64cd\u4f5c\u6570\u7684\u5b8f</li> <li><code>WRITE_FRD_H(value)</code>: \u5c06\u534a\u7cbe\u5ea6\u7ed3\u679c\u5199\u5165\u76ee\u6807\u6d6e\u70b9\u5bc4\u5b58\u5668</li> <li><code>WRITE_RD(value)</code>: \u5c06\u6574\u578b\u7ed3\u679c\u5199\u5165\u6574\u6570\u5bc4\u5b58\u5668</li> <li><code>RM</code>: \u83b7\u53d6\u6307\u4ee4\u4e2d\u7684\u820d\u5165\u6a21\u5f0f</li> <li><code>set_fp_exceptions</code>: \u6839\u636esoftfloat\u5e93\u8bbe\u7f6e\u6d6e\u70b9\u5f02\u5e38\u6807\u5fd7</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#42-fp16","title":"4.2 FP16\u6307\u4ee4\u7684\u8be6\u7ec6\u5b9e\u73b0","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#421","title":"4.2.1 \u8ba1\u7b97\u6307\u4ee4","text":"<p>FADD_H \u6307\u4ee4\u5b9e\u73b0\uff1a (FD = FS1 + FS2)</p> <pre><code>// \u68c0\u67e5\u662f\u5426\u652f\u6301ZFH\u6216ZHINX\u6269\u5c55\uff0c\u5426\u5219\u89e6\u53d1\u975e\u6cd5\u6307\u4ee4\u5f02\u5e38\nif (!(STATE.extension_enabled(EXT_ZFH) || STATE.extension_enabled(EXT_ZHINX)))\n  throw trap_illegal_instruction(insn.bits());\n\n// \u68c0\u67e5\u6d6e\u70b9\u5355\u5143\u662f\u5426\u542f\u7528\nif (!STATE.frm_valid())\n  throw trap_illegal_instruction(insn.bits());\n\n// \u8bbe\u7f6esoftfloat\u7684\u820d\u5165\u6a21\u5f0f\uff0c\u4ece\u6307\u4ee4\u7684rm\u5b57\u6bb5\u83b7\u53d6\nsoftfloat_roundingMode = get_rm(insn);\n\n// \u4ece\u5bc4\u5b58\u5668\u8bfb\u53d6\u534a\u7cbe\u5ea6\u64cd\u4f5c\u6570\nuint16_t rs1 = FP_REGISTER.read_h(insn.rs1());  // FS1\nuint16_t rs2 = FP_REGISTER.read_h(insn.rs2());  // FS2\n\n// \u8c03\u7528softfloat\u5e93\u8ba1\u7b97\u534a\u7cbe\u5ea6\u52a0\u6cd5: FD = FS1 + FS2\nuint16_t result = f16_add(rs1, rs2);\n\n// \u5199\u5165\u7ed3\u679c\u5230\u76ee\u6807\u6d6e\u70b9\u5bc4\u5b58\u5668\uff0c\u5904\u7406NaN boxing\nFP_REGISTER.write_h(insn.rd(), result);  // FD\n\n// \u8bbe\u7f6e\u6d6e\u70b9\u5f02\u5e38\u6807\u5fd7\nSTATE.update_fcsr_flags();\n</code></pre> <p>FSUB_H \u6307\u4ee4\u5b9e\u73b0\uff1a (FD = FS1 - FS2)</p> <pre><code>// \u68c0\u67e5\u6269\u5c55\u652f\u6301\nif (!(STATE.extension_enabled(EXT_ZFH) || STATE.extension_enabled(EXT_ZHINX)))\n  throw trap_illegal_instruction(insn.bits());\n\n// \u68c0\u67e5\u6d6e\u70b9\u5355\u5143\nif (!STATE.frm_valid())\n  throw trap_illegal_instruction(insn.bits());\n\n// \u8bbe\u7f6e\u820d\u5165\u6a21\u5f0f\nsoftfloat_roundingMode = get_rm(insn);\n\n// \u8bfb\u53d6\u64cd\u4f5c\u6570\nuint16_t rs1 = FP_REGISTER.read_h(insn.rs1());  // FS1\nuint16_t rs2 = FP_REGISTER.read_h(insn.rs2());  // FS2\n\n// \u8c03\u7528\u51cf\u6cd5\u51fd\u6570: FD = FS1 - FS2\nuint16_t result = f16_sub(rs1, rs2);\n\n// \u5199\u5165\u7ed3\u679c\nFP_REGISTER.write_h(insn.rd(), result);  // FD\n\n// \u8bbe\u7f6e\u5f02\u5e38\u6807\u5fd7\nSTATE.update_fcsr_flags();\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#422","title":"4.2.2 \u8f6c\u6362\u6307\u4ee4","text":"<p>FCVT_S_H \u6307\u4ee4\u5b9e\u73b0\uff1a (FD = float32(FS1))</p> <pre><code>// \u68c0\u67e5F\u6269\u5c55(\u5355\u7cbe\u5ea6)\u548cZFH/ZHINX\u6269\u5c55(\u534a\u7cbe\u5ea6)\u652f\u6301\nif (!(STATE.extension_enabled('F') || STATE.extension_enabled(EXT_ZFINX)))\n  throw trap_illegal_instruction(insn.bits());\nif (!(STATE.extension_enabled(EXT_ZFH) || STATE.extension_enabled(EXT_ZHINX) || \n      STATE.extension_enabled(EXT_ZFHMIN) || STATE.extension_enabled(EXT_ZHINXMIN)))\n  throw trap_illegal_instruction(insn.bits());\n\n// \u68c0\u67e5\u6d6e\u70b9\u5355\u5143\nif (!STATE.frm_valid())\n  throw trap_illegal_instruction(insn.bits());\n\n// \u8bbe\u7f6e\u820d\u5165\u6a21\u5f0f\nsoftfloat_roundingMode = get_rm(insn);\n\n// \u8bfb\u53d6\u534a\u7cbe\u5ea6\u64cd\u4f5c\u6570\nuint16_t rs1 = FP_REGISTER.read_h(insn.rs1());  // FS1\n\n// \u8f6c\u6362\u4e3a\u5355\u7cbe\u5ea6: FD = float32(FS1)\nuint32_t result = f32_f16(rs1);  // \u534a\u7cbe\u5ea6\u8f6c\u5355\u7cbe\u5ea6\n\n// \u5199\u5165\u5355\u7cbe\u5ea6\u7ed3\u679c\nFP_REGISTER.write_f(insn.rd(), result);  // FD\n\n// \u8bbe\u7f6e\u5f02\u5e38\u6807\u5fd7\nSTATE.update_fcsr_flags();\n</code></pre> <p>FCVT_H_S \u6307\u4ee4\u5b9e\u73b0\uff1a (FD = float16(FS1))</p> <pre><code>// \u68c0\u67e5F\u6269\u5c55\u548cZFH/ZHINX\u6269\u5c55\u652f\u6301\nif (!(STATE.extension_enabled('F') || STATE.extension_enabled(EXT_ZFINX)))\n  throw trap_illegal_instruction(insn.bits());\nif (!(STATE.extension_enabled(EXT_ZFH) || STATE.extension_enabled(EXT_ZHINX) || \n      STATE.extension_enabled(EXT_ZFHMIN) || STATE.extension_enabled(EXT_ZHINXMIN)))\n  throw trap_illegal_instruction(insn.bits());\n\n// \u68c0\u67e5\u6d6e\u70b9\u5355\u5143\nif (!STATE.frm_valid())\n  throw trap_illegal_instruction(insn.bits());\n\n// \u8bbe\u7f6e\u820d\u5165\u6a21\u5f0f\nsoftfloat_roundingMode = get_rm(insn);\n\n// \u8bfb\u53d6\u5355\u7cbe\u5ea6\u64cd\u4f5c\u6570\nuint32_t rs1 = FP_REGISTER.read_f(insn.rs1());  // FS1\n\n// \u8f6c\u6362\u4e3a\u534a\u7cbe\u5ea6: FD = float16(FS1)\nuint16_t result = f16_f32(rs1);  // \u5355\u7cbe\u5ea6\u8f6c\u534a\u7cbe\u5ea6\n\n// \u5199\u5165\u534a\u7cbe\u5ea6\u7ed3\u679c\nFP_REGISTER.write_h(insn.rd(), result);  // FD\n\n// \u8bbe\u7f6e\u5f02\u5e38\u6807\u5fd7\nSTATE.update_fcsr_flags();\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#43-bf16","title":"4.3 BF16\u6307\u4ee4\u7684\u5b9e\u73b0","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#431-fcvtbf16s","title":"4.3.1 FCVT.BF16.S \u6307\u4ee4\u5b9e\u73b0","text":"<pre><code>// \u68c0\u67e5F\u6269\u5c55\u548cZfbfmin\u6269\u5c55\u652f\u6301\nrequire_extension('F');\nrequire_extension(EXT_ZFBFMIN);\n\nif (!STATE.frm_valid())\n  throw trap_illegal_instruction(insn.bits());\n\nsoftfloat_roundingMode = get_rm(insn);\n\n// \u8bfb\u53d6FP32\u503c\nuint32_t rs1 = FP_REGISTER.read_f(insn.rs1());  \n// \u8f6c\u6362\u4e3aBF16\nuint16_t result = f32_to_bf16(rs1);             \n\n// \u4f7f\u7528NaN-boxing\u5b58\u50a8\u7ed3\u679c\nuint32_t boxed = 0xFFFF0000 | result;\nFP_REGISTER.write_f(insn.rd(), boxed);          \n\n// \u66f4\u65b0\u6d6e\u70b9\u72b6\u6001\u5bc4\u5b58\u5668\u6807\u5fd7\nSTATE.update_fcsr_flags();\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#432-fcvtsbf16","title":"4.3.2 FCVT.S.BF16 \u6307\u4ee4\u5b9e\u73b0","text":"<pre><code>require_extension('F');\nrequire_extension(EXT_ZFBFMIN);\n\nif (!STATE.frm_valid())\n  throw trap_illegal_instruction(insn.bits());\n\nsoftfloat_roundingMode = get_rm(insn);\n\n// \u8bfb\u53d6BF16\u503c(\u4eceNaN-boxed\u5bc4\u5b58\u5668\u503c)\nuint32_t boxed_rs1 = FP_REGISTER.read_f(insn.rs1());\nuint16_t rs1 = boxed_rs1 &amp; 0xFFFF;\n\n// \u8f6c\u6362\u4e3aFP32\nuint32_t result = bf16_to_f32(rs1);\n\n// \u5199\u5165FP32\u7ed3\u679c\nFP_REGISTER.write_f(insn.rd(), result);\n\nSTATE.update_fcsr_flags();\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#44","title":"4.4 \u7279\u6b8a\u5904\u7406","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#441-nan-boxing","title":"4.4.1 NaN-boxing\u5904\u7406","text":"<p>\u6d6e\u70b9\u503c\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\u5b58\u50a8\u91c7\u7528NaN-boxing\u6280\u672f\uff0c\u9002\u7528\u4e8eFP16\u548cBF16\uff1a</p> <pre><code>// NaN-boxing\u5b9e\u73b0\u793a\u4f8b\nvoid write_h(uint16_t value) {\n  // \u5bf9\u4e8e32\u4f4d\u6d6e\u70b9\u5bc4\u5b58\u5668\uff0c\u5c06\u534a\u7cbe\u5ea6\u503c\u8fdb\u884cNaN-boxing\n  if (mxlen &gt; 16) {\n    // \u8bbe\u7f6e\u9ad8\u4f4d\u5168\u4e3a1\uff0c\u8868\u793aNaN-boxing\n    uint32_t boxed = 0xFFFF0000 | value;\n    float_register = boxed;\n  } else {\n    float_register = value;\n  }\n}\n\n// \u4eceNaN-boxed\u503c\u8bfb\u53d6\u534a\u7cbe\u5ea6\u503c\nuint16_t read_h() {\n  // \u5bf9\u4e8e\u4ece\u9ad8\u7cbe\u5ea6\u5bc4\u5b58\u5668\u8bfb\u53d6\uff0c\u68c0\u67e5NaN-boxing\n  if (mxlen &gt; 16) {\n    uint32_t boxed = float_register;\n    if ((boxed &amp; 0xFFFF0000) != 0xFFFF0000)\n      // \u975e\u6cd5\u7684NaN-boxing\u4f1a\u4ea7\u751f\u9ed8\u8ba4\u7684\u5b89\u9759NaN\n      return defaultNaNH;\n    return boxed &amp; 0xFFFF;\n  } else {\n    return float_register;\n  }\n}\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#4411-nan-boxing","title":"4.4.1.1 NaN-boxing\u56fe\u89e3\u8bf4\u660e","text":"<p>NaN-boxing\u662fRISC-V\u4e2d\u5b9e\u73b0\u4e0d\u540c\u7cbe\u5ea6\u6d6e\u70b9\u6570\u636e\u4e92\u64cd\u4f5c\u6027\u7684\u5173\u952e\u673a\u5236\u3002\u5b83\u5229\u7528IEEE 754\u6807\u51c6\u4e2dNaN\u503c\u7684\u7075\u6d3b\u8868\u793a\u7279\u6027\uff0c\u5c06\u4f4e\u7cbe\u5ea6\u6d6e\u70b9\u503c\u5d4c\u5165\u9ad8\u7cbe\u5ea6\u6d6e\u70b9\u683c\u5f0f\u4e2d\u3002</p> <p>Figure 1: FP16/BF16 embedded in FP32 register</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  High 16 bits (0xFFFF)\u2502  16-bit FP16/BF16     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                32-bit register                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Figure 2: Recursive NaN-boxing across multiple precisions</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  High 32 bits all 1 \u2502      Low 32 bits (NaN-boxed FP32)       \u2502\n\u2502    (0xFFFFFFFF)     \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502                     \u2502  \u2502 High 16 bits=1  \u2502 16-bit FP16/BF16\u2502  \u2502\n\u2502                     \u2502  \u2502    (0xFFFF)     \u2502                 \u2502  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n                          64-bit register content\n</code></pre> <p>Figure 3: NaN-boxing verification process</p> <pre><code>               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502            32-bit register            \u2502\n               \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n               \u2502 \u2502   High 16 bits  \u2502   Low 16 bits   \u2502 \u2502\n               \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                       \u2502\n                                       \u25bc\n                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                         \u2502 Check: High 16 bits   \u2502\n                         \u2502     == 0xFFFF?        \u2502\u2500\u2500\u2500\u2510\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 No (Invalid NaN-boxing)\n                                         \u2502           \u2502\n                                         \u2502 Yes       \u2502\n                                         \u25bc           \u25bc\n                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                         \u2502 Return low 16 bits    \u2502 \u2502 Return default NaN  \u2502\n                         \u2502 as valid FP16/BF16    \u2502 \u2502                     \u2502\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>NaN-boxing\u4f18\u70b9: 1. \u7c7b\u578b\u5b89\u5168\uff1a\u6bcf\u6b21\u8bfb\u53d6\u65f6\u90fd\u4f1a\u9a8c\u8bc1\u9ad8\u4f4d\u6a21\u5f0f 2. \u5b58\u50a8\u6548\u7387\uff1a\u4e0d\u540c\u7cbe\u5ea6\u503c\u53ef\u4ee5\u5b58\u50a8\u5728\u540c\u4e00\u5bc4\u5b58\u5668\u6587\u4ef6\u4e2d 3. \u517c\u5bb9\u6027\uff1a\u5141\u8bb8\u6dfb\u52a0\u65b0\u7684\u6d6e\u70b9\u683c\u5f0f\u800c\u4e0d\u6539\u53d8\u5bc4\u5b58\u5668\u6587\u4ef6</p>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#442","title":"4.4.2 \u820d\u5165\u6a21\u5f0f\u5904\u7406","text":"<pre><code>// \u4ece\u6307\u4ee4\u83b7\u53d6\u820d\u5165\u6a21\u5f0f\nint get_rm(instruction_t insn) {\n  int rm = insn.rm();\n  if (rm == 7) rm = STATE.frm; // \u4f7f\u7528FCSR\u4e2d\u7684\u9ed8\u8ba4\u820d\u5165\u6a21\u5f0f\n  if (rm &gt; 4) throw trap_illegal_instruction(insn.bits());\n  return rm;\n}\n\n// \u820d\u5165\u6a21\u5f0f\u5e38\u91cf\n// 0: RNE (\u820d\u5165\u5230\u6700\u8fd1\u5076\u6570)\n// 1: RTZ (\u820d\u5165\u5230\u96f6)\n// 2: RDN (\u5411\u4e0b\u820d\u5165 - \u671d\u8d1f\u65e0\u7a77\u5927)\n// 3: RUP (\u5411\u4e0a\u820d\u5165 - \u671d\u6b63\u65e0\u7a77\u5927)\n// 4: RMM (\u820d\u5165\u5230\u6700\u8fd1\uff0c\u5e73\u5c40\u820d\u5165\u5230\u6700\u5927\u503c)\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#45","title":"4.5 \u6269\u5c55\u5b9e\u73b0\u7684\u7279\u6b8a\u8003\u8651","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#451-zfhminzfh","title":"4.5.1 Zfhmin\u4e0eZfh\u7684\u5b9e\u73b0\u533a\u522b","text":"<p>Zfhmin\u53ea\u5305\u542b\u52a0\u8f7d/\u5b58\u50a8\u548c\u8f6c\u6362\u6307\u4ee4\uff0c\u5728Spike\u5b9e\u73b0\u4e2d\u901a\u8fc7\u6269\u5c55\u68c0\u67e5\u533a\u5206\uff1a</p> <pre><code>// Zfhmin\u6307\u4ee4\u5b9e\u73b0\u793a\u4f8b (FCVT_S_H)\n// \u65e2\u53ef\u5728\u5b8c\u6574Zfh\u4e2d\u4f7f\u7528\uff0c\u4e5f\u53ef\u5728Zfhmin\u5b50\u96c6\u4e2d\u4f7f\u7528\nif (!(STATE.extension_enabled('F') || STATE.extension_enabled(EXT_ZFINX)))\n  throw trap_illegal_instruction(insn.bits());\nif (!(STATE.extension_enabled(EXT_ZFH) || STATE.extension_enabled(EXT_ZHINX) || \n      STATE.extension_enabled(EXT_ZFHMIN) || STATE.extension_enabled(EXT_ZHINXMIN)))\n  throw trap_illegal_instruction(insn.bits());\n\n// Zfh\u4e13\u6709\u6307\u4ee4\u5b9e\u73b0\u793a\u4f8b (FADD_H)\n// \u53ea\u80fd\u5728\u5b8c\u6574Zfh\u4e2d\u4f7f\u7528\uff0cZfhmin\u4e2d\u4e0d\u53ef\u7528\nif (!(STATE.extension_enabled(EXT_ZFH) || STATE.extension_enabled(EXT_ZHINX)))\n  throw trap_illegal_instruction(insn.bits());\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#452-bf16","title":"4.5.2 BF16\u7684\u8f6f\u4ef6\u6a21\u62df","text":"<p>\u5bf9\u4e8e\u6ca1\u6709\u786c\u4ef6BF16\u652f\u6301\u7684\u5904\u7406\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u6a21\u62df\uff1a</p> <pre><code>// FP32\u5230BF16\u7684\u8f6c\u6362(\u8f6f\u4ef6\u5b9e\u73b0)\nuint16_t f32_to_bf16(uint32_t f32_val) {\n  // \u63d0\u53d6\u7b26\u53f7\u548c\u6307\u6570\n  uint32_t sign = f32_val &amp; 0x80000000;\n  uint32_t exp_mantissa = f32_val &amp; 0x7FFFFFFF;\n\n  // \u5904\u7406\u7279\u6b8a\u60c5\u51b5(\u96f6\u3001\u65e0\u7a77\u3001NaN)\n  if (exp_mantissa == 0) return 0; // +/- \u96f6\n  if (exp_mantissa &gt;= 0x7F800000) { // \u65e0\u7a77\u6216NaN\n    if (exp_mantissa &gt; 0x7F800000) { // NaN\n      return 0x7FC0; // \u8fd4\u56deBF16\u683c\u5f0f\u7684\u89c4\u8303NaN\n    }\n    return (sign &gt;&gt; 16) | 0x7F80; // +/- \u65e0\u7a77\n  }\n\n  // \u820d\u5165\u5230\u6700\u8fd1\u5076\u6570\n  uint32_t rounding_bias = 0x00007FFF + ((f32_val &gt;&gt; 16) &amp; 1);\n  uint32_t biased = exp_mantissa + rounding_bias;\n\n  // \u8fd4\u56deBF16\u503c(\u504f\u7f6e\u503c\u7684\u9ad816\u4f4d)\n  return (sign &gt;&gt; 16) | (biased &gt;&gt; 16);\n}\n</code></pre>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#_4","title":"\u4e94\u3001\u5b9e\u9645\u5e94\u7528\u5206\u6790","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#51","title":"5.1 \u4f7f\u7528\u573a\u666f\u5206\u6790","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#511-fp16","title":"5.1.1 FP16\u5e94\u7528\u573a\u666f","text":"<p>\u534a\u7cbe\u5ea6\u6d6e\u70b9\u6570(16\u4f4d)\u76f8\u6bd4\u5355\u7cbe\u5ea6(32\u4f4d)\u548c\u53cc\u7cbe\u5ea6(64\u4f4d)\u6d6e\u70b9\u6570\u6709\u4ee5\u4e0b\u4f18\u52bf\uff1a</p> <ul> <li>\u5185\u5b58\u5360\u7528\u51cf\u534a\uff0c\u63d0\u9ad8\u7f13\u5b58\u6548\u7387</li> <li>\u6570\u636e\u4f20\u8f93\u5e26\u5bbd\u9700\u6c42\u51cf\u5c11</li> <li>\u80fd\u8017\u66f4\u4f4e</li> <li>\u5728\u8bb8\u591a\u5e94\u7528\u4e2d\u7cbe\u5ea6\u8db3\u591f</li> </ul> <p>\u4e3b\u8981\u5e94\u7528\u573a\u666f\u5305\u62ec\uff1a 1. \u673a\u5668\u5b66\u4e60\u548cAI\uff1a\u8bb8\u591a\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u4f7f\u7528FP16\u7cbe\u5ea6\u8bad\u7ec3\u548c\u63a8\u7406 2. \u56fe\u5f62\u5904\u7406\uff1a3D\u56fe\u5f62\u3001VR/AR\u5e94\u7528\u7b49 3. \u79fb\u52a8\u548c\u5d4c\u5165\u5f0f\u8bbe\u5907\uff1a\u5bf9\u5185\u5b58\u548c\u80fd\u8017\u654f\u611f\u7684\u5e94\u7528 4. \u79d1\u5b66\u8ba1\u7b97\uff1a\u67d0\u4e9b\u5bf9\u7cbe\u5ea6\u8981\u6c42\u4e0d\u9ad8\u7684\u6a21\u62df\u8ba1\u7b97</p>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#512-bf16","title":"5.1.2 BF16\u5e94\u7528\u573a\u666f","text":"<p>BF16\u4e3a\u6df1\u5ea6\u5b66\u4e60\u63d0\u4f9b\u663e\u8457\u7684\u6027\u80fd\u4f18\u52bf\uff1a</p> <ol> <li>\u8bad\u7ec3\u6027\u80fd\uff1a</li> <li>\u76f8\u6bd4FP32\uff0c\u5185\u5b58\u5e26\u5bbd\u6548\u7387\u63d0\u9ad82\u500d</li> <li>\u51cf\u5c11\u7684\u5185\u5b58\u5360\u7528\u5141\u8bb8\u66f4\u5927\u7684\u6a21\u578b</li> <li> <p>\u4fdd\u6301\u8db3\u591f\u7684\u52a8\u6001\u8303\u56f4\u7528\u4e8e\u68af\u5ea6\u4f20\u64ad</p> </li> <li> <p>\u63a8\u7406\u6548\u7387\uff1a</p> </li> <li>\u6bd4FP32\u4f4e\u7684\u5185\u5b58\u9700\u6c42</li> <li>\u66f4\u9ad8\u7684\u8ba1\u7b97\u541e\u5410\u91cf</li> <li> <p>\u5bf9\u8bb8\u591a\u6a21\u578b\u7684\u7cbe\u5ea6\u635f\u5931\u6700\u5c0f</p> </li> <li> <p>\u6a21\u578b\u517c\u5bb9\u6027\uff1a</p> </li> <li>\u6bd4FP16\u66f4\u5bb9\u6613\u4eceFP32\u8f6c\u6362</li> <li>\u6bd4INT8\u91cf\u5316\u66f4\u597d\u7684\u6570\u503c\u7a33\u5b9a\u6027</li> </ol>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#52","title":"5.2 \u6269\u5c55\u9009\u62e9\u6307\u5357","text":""},{"location":"RISCV/ISA/Zfh_Zfhmin/#521-zfhzfhmin","title":"5.2.1 Zfh\u4e0eZfhmin\u7684\u9009\u62e9","text":"<ul> <li>\u9009\u62e9Zfh\uff1a\u9700\u8981\u76f4\u63a5\u5728\u534a\u7cbe\u5ea6\u4e0a\u8fdb\u884c\u8ba1\u7b97\u7684\u573a\u666f\uff0c\u5982\u67d0\u4e9bAI\u52a0\u901f\u8ba1\u7b97</li> <li>\u9009\u62e9Zfhmin\uff1a\u53ea\u9700\u8981\u5b58\u50a8\u548c\u8f6c\u6362\u529f\u80fd\uff0c\u8ba1\u7b97\u5728\u66f4\u9ad8\u7cbe\u5ea6\u4e2d\u8fdb\u884c\u7684\u573a\u666f\uff0c\u5982\u56fe\u5f62\u5904\u7406</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#522","title":"5.2.2 \u6df1\u5ea6\u5b66\u4e60\u573a\u666f\u7684\u683c\u5f0f\u9009\u62e9","text":"\u4efb\u52a1 BF16 FP16 FP32 INT8 \u8bad\u7ec3 \u826f\u597d \u90e8\u5206\u6a21\u578b\u4e0d\u7a33\u5b9a \u6781\u4f73\u4f46\u6162 \u4e0d\u9002\u7528 \u63a8\u7406 \u826f\u597d \u826f\u597d \u6781\u4f73\u4f46\u6162 \u90e8\u5206\u6a21\u578b\u6781\u4f73 \u7cbe\u5ea6 \u9ad8 \u4e2d-\u9ad8 \u6700\u9ad8 \u53d8\u5316\u5927 \u5185\u5b58\u6548\u7387 \u9ad8 \u9ad8 \u4f4e \u6700\u9ad8 \u8ba1\u7b97\u6548\u7387 \u9ad8 \u9ad8 \u4f4e \u6700\u9ad8"},{"location":"RISCV/ISA/Zfh_Zfhmin/#53","title":"5.3 \u6027\u80fd\u8003\u91cf","text":"<ul> <li>\u534a\u7cbe\u5ea6\u8ba1\u7b97\u7684\u786c\u4ef6\u9762\u79ef\u5c0f\u4e8e\u5355\u7cbe\u5ea6/\u53cc\u7cbe\u5ea6</li> <li>\u80fd\u63d0\u4f9b\u7ea62\u500d\u7684\u541e\u5410\u91cf(\u76f8\u5bf9\u4e8e\u5355\u7cbe\u5ea6)</li> <li>\u8ba1\u7b97\u65f6\u95f4\u4e0e\u5185\u5b58\u5e26\u5bbd\u9700\u6c42\u964d\u4f4e</li> <li>\u5728\u73b0\u4ee3RISC-V\u5904\u7406\u5668\u4e2d\u53ef\u80fd\u88ab\u5411\u91cf\u6269\u5c55(V\u6269\u5c55)\u52a0\u901f</li> </ul>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#531","title":"5.3.1 \u786c\u4ef6\u652f\u6301\u60c5\u51b5","text":"<p>\u76ee\u524d\u591a\u4e2a\u786c\u4ef6\u5e73\u53f0\u652f\u6301BF16\u64cd\u4f5c\uff1a</p> <ol> <li>RISC-V\u5904\u7406\u5668\uff1a</li> <li>\u5404\u79cd\u652f\u6301Zfbfmin/Zvfbfmin\u7684\u5b9e\u73b0</li> <li> <p>\u7528\u4e8eML\u52a0\u901f\u7684\u81ea\u5b9a\u4e49\u5411\u91cf\u6269\u5c55</p> </li> <li> <p>\u5176\u4ed6\u67b6\u6784\uff1a</p> </li> <li>Google TPU (\u5f20\u91cf\u5904\u7406\u5355\u5143)</li> <li>Intel Cooper Lake\u53ca\u66f4\u65b0\u7684CPU (AVX512_BF16)</li> <li>NVIDIA Ampere\u53ca\u66f4\u65b0\u7684GPU</li> <li>ARM SVE2\u6269\u5c55</li> </ol>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#_5","title":"\u516d\u3001\u603b\u7ed3","text":"<p>RISC-V\u7684\u6d6e\u70b9\u6269\u5c55\u4e3a\u4e0d\u540c\u5e94\u7528\u573a\u666f\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u6d6e\u70b9\u8ba1\u7b97\u80fd\u529b\uff1a</p> <ol> <li> <p>**Zfh\u6269\u5c55**\u4e3aRISC-V\u67b6\u6784\u63d0\u4f9b\u4e86\u7b26\u5408IEEE 754-2008\u6807\u51c6\u7684\u534a\u7cbe\u5ea6\u6d6e\u70b9\u8ba1\u7b97\u80fd\u529b\u3002\u5b83\u5305\u62ec\u4ece\u57fa\u672c\u7684\u6570\u5b66\u8fd0\u7b97\u5230\u683c\u5f0f\u8f6c\u6362\u7684\u5168\u5957\u6307\u4ee4\uff0c\u80fd\u591f\u6ee1\u8db3\u5404\u79cd\u5bf9\u534a\u7cbe\u5ea6\u6d6e\u70b9\u8ba1\u7b97\u9700\u6c42\u7684\u5e94\u7528\u573a\u666f\u3002</p> </li> <li> <p>**Zfhmin\u5b50\u96c6**\u63d0\u4f9b\u4e86\u6700\u5c0f\u7684\u534a\u7cbe\u5ea6\u652f\u6301\uff0c\u9002\u7528\u4e8e\u4e3b\u8981\u9700\u8981\u5b58\u50a8\u548c\u8f6c\u6362\u529f\u80fd\u7684\u573a\u666f\u3002</p> </li> <li> <p>BF16\u76f8\u5173\u6269\u5c55\uff08Zfbfmin/Zvfbfmin/Zvfbfwma\uff09\u63d0\u4f9b\u4e86\u4e3a\u673a\u5668\u5b66\u4e60\u4f18\u5316\u768416\u4f4d\u6d6e\u70b9\u683c\u5f0f\u652f\u6301\u3002\u901a\u8fc7\u4fdd\u7559FP32\u7684\u52a8\u6001\u8303\u56f4\u540c\u65f6\u5c06\u7cbe\u5ea6\u964d\u4f4e\u52307\u4e2a\u5c0f\u6570\u4f4d\uff0cBF16\u5728\u6570\u503c\u7a33\u5b9a\u6027\u548c\u8ba1\u7b97\u6548\u7387\u4e4b\u95f4\u63d0\u4f9b\u4e86\u5f15\u4eba\u6ce8\u76ee\u7684\u5e73\u8861\u3002</p> </li> </ol> <p>Spike\u6a21\u62df\u5668\u4e2d\u7684\u5b9e\u73b0\u91c7\u7528\u4e86softfloat\u5e93\u5904\u7406\u5177\u4f53\u7684\u6d6e\u70b9\u8fd0\u7b97\uff0c\u5e76\u9075\u5faa\u4e86IEEE 754\u7684\u5404\u79cd\u89c4\u5219\uff0c\u5982NaN\u5904\u7406\u3001\u820d\u5165\u6a21\u5f0f\u7b49\u3002</p> <p>\u8fd9\u4e9b\u6d6e\u70b9\u6269\u5c55\u7684\u4e3b\u8981\u4f18\u52bf\u5728\u4e8e\uff1a 1. \u964d\u4f4e\u5185\u5b58\u5360\u7528\uff08\u76f8\u6bd4\u9ad8\u7cbe\u5ea6\u683c\u5f0f\uff09 2. \u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u548c\u541e\u5410\u91cf 3. \u964d\u4f4e\u80fd\u8017 4. \u4e3a\u7279\u5b9a\u5e94\u7528\u573a\u666f\uff08\u5982\u673a\u5668\u5b66\u4e60\uff09\u63d0\u4f9b\u4f18\u5316\u7684\u6570\u503c\u8868\u793a</p> <p>\u968f\u7740\u673a\u5668\u5b66\u4e60\u548c\u8282\u80fd\u8ba1\u7b97\u7684\u91cd\u8981\u6027\u4e0d\u65ad\u589e\u957f\uff0c\u8fd9\u4e9b\u6269\u5c55\u4e3a\u6784\u5efa\u9ad8\u6548\u7684AI\u52a0\u901f\u5668\u548c\u5904\u7406\u5668\u63d0\u4f9b\u4e86\u5b9d\u8d35\u7684\u5de5\u5177\u3002</p>"},{"location":"RISCV/ISA/Zfh_Zfhmin/#_6","title":"\u53c2\u8003\u8d44\u6599","text":"<p>[1] RISC-V User-Level ISA Specification [2] RISC-V \"B\" Extension Task Group, \"RISC-V Bit Manipulation and Floating Point Extensions\" [3] Google, \"Brain Floating-Point Format: Specification\" [4] RISC-V Vector Extension (v1.0)</p>"},{"location":"RISCV/ISA/softfloat/","title":"SPIKE SoftFloat\u5e93\u5206\u6790","text":"<p>SoftFloat\u662f\u4e00\u4e2a\u7eaf\u8f6f\u4ef6\u5b9e\u73b0\u7684IEEE 754\u6d6e\u70b9\u8fd0\u7b97\u5e93\uff0cRISC-V\u7684SPIKE\u6a21\u62df\u5668\u4f7f\u7528\u5b83\u6765\u5b9e\u73b0\u5404\u79cd\u6d6e\u70b9\u6307\u4ee4\u3002</p>"},{"location":"RISCV/ISA/softfloat/#_1","title":"\u6574\u4f53\u4ee3\u7801\u7ed3\u6784","text":"<p>SoftFloat\u5e93\u7684\u4ee3\u7801\u7ed3\u6784\u7ec4\u7ec7\u6e05\u6670\uff0c\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u90e8\u5206\uff1a</p> <ol> <li>\u57fa\u7840\u7c7b\u578b\u5b9a\u4e49 (<code>softfloat_types.h</code>)</li> <li>\u5b9a\u4e49\u4e86\u5404\u79cd\u7cbe\u5ea6\u7684\u6d6e\u70b9\u6570\u7c7b\u578b\uff1a<code>float16_t</code>\u3001<code>bfloat16_t</code>(16\u4f4d)\u3001<code>float32_t</code>(32\u4f4d)\u3001<code>float64_t</code>(64\u4f4d)\u3001<code>float128_t</code>(128\u4f4d)\u548c<code>extFloat80_t</code>(80\u4f4d\u6269\u5c55\u7cbe\u5ea6)</li> <li> <p>\u8fd9\u4e9b\u7c7b\u578b\u4f7f\u7528\u4f4d\u5b57\u6bb5\u8868\u793a\u800c\u975e\u76f4\u63a5\u4f7f\u7528C\u539f\u751f\u6d6e\u70b9\u7c7b\u578b</p> </li> <li> <p>\u4e3b\u8981API\u63a5\u53e3 (<code>softfloat.h</code>)</p> </li> <li>\u5b9a\u4e49\u4e86\u820d\u5165\u6a21\u5f0f\uff1a<code>softfloat_round_near_even</code>\u3001<code>softfloat_round_min</code>\u7b49</li> <li>\u5b9a\u4e49\u4e86\u5f02\u5e38\u6807\u5fd7\uff1a<code>softfloat_flag_inexact</code>\u3001<code>softfloat_flag_underflow</code>\u7b49</li> <li> <p>\u58f0\u660e\u4e86\u5927\u91cf\u6d6e\u70b9\u8fd0\u7b97\u51fd\u6570\uff1a\u52a0\u51cf\u4e58\u9664\u3001\u6bd4\u8f83\u3001\u8f6c\u6362\u3001\u820d\u5165\u7b49</p> </li> <li> <p>\u7279\u6b8a\u503c\u5904\u7406 (<code>specialize.h</code>)</p> </li> <li>\u5b9a\u4e49\u4e86NaN(\u975e\u6570\u5b57)\u7684\u5904\u7406\u903b\u8f91</li> <li>\u5305\u542b\u8bc6\u522b\u548c\u5904\u7406\u4fe1\u53f7NaN(signaling NaN)\u7684\u51fd\u6570</li> <li> <p>\u63d0\u4f9b\u7279\u6b8a\u503c(\u5982\u221e\u3001NaN)\u7684\u9ed8\u8ba4\u4f4d\u6a21\u5f0f</p> </li> <li> <p>\u5185\u90e8\u5b9e\u73b0\u7ec6\u8282 (<code>internals.h</code>)</p> </li> <li>\u63d0\u4f9b\u4f4d\u64cd\u4f5c\u5b8f\u6765\u8bbf\u95ee\u6d6e\u70b9\u6570\u7684\u7b26\u53f7\u3001\u6307\u6570\u548c\u5c3e\u6570</li> <li>\u5b9a\u4e49\u5f52\u4e00\u5316\u3001\u820d\u5165\u548c\u6253\u5305\u51fd\u6570</li> <li> <p>\u5305\u542b\u8fd0\u7b97\u6838\u5fc3\u7b97\u6cd5\u5b9e\u73b0</p> </li> <li> <p>\u5177\u4f53\u7b97\u6cd5\u5b9e\u73b0\u6587\u4ef6</p> </li> <li>\u5982<code>f32_add.c</code>\u3001<code>s_roundPackToF32.c</code>\u7b49\uff0c\u7528\u4e8e\u5b9e\u73b0\u5404\u79cd\u5177\u4f53\u64cd\u4f5c</li> </ol>"},{"location":"RISCV/ISA/softfloat/#1-softfloat_typesh","title":"1. \u7c7b\u578b\u5b9a\u4e49\u4e0e\u8868\u793a (<code>softfloat_types.h</code>)","text":"<pre><code>typedef struct { uint16_t v; } float16_t;\ntypedef float16_t bfloat16_t;\ntypedef struct { uint32_t v; } float32_t;\ntypedef struct { uint64_t v; } float64_t;\ntypedef struct { uint64_t v[2]; } float128_t;\n</code></pre> <p>\u6bcf\u79cd\u7c7b\u578b\u90fd\u662f\u5c06IEEE 754\u4f4d\u6a21\u5f0f\u5c01\u88c5\u5728\u7b80\u5355\u7ed3\u6784\u4e2d\uff0c\u800c\u975e\u4f7f\u7528C\u539f\u751f\u6d6e\u70b9\u7c7b\u578b\uff0c\u8fd9\u786e\u4fdd\u4e86\u8de8\u5e73\u53f0\u7684\u884c\u4e3a\u4e00\u81f4\u6027\u3002</p>"},{"location":"RISCV/ISA/softfloat/#2","title":"2. \u72b6\u6001\u7ba1\u7406\u4e0e\u63a7\u5236","text":"<pre><code>extern THREAD_LOCAL uint_fast8_t softfloat_detectTininess;\nextern THREAD_LOCAL uint_fast8_t softfloat_roundingMode;\nextern THREAD_LOCAL uint_fast8_t softfloat_exceptionFlags;\n</code></pre> <p>\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf\u63a7\u5236\u820d\u5165\u6a21\u5f0f\u3001\u4e0b\u6ea2\u68c0\u6d4b\u65f6\u673a\u548c\u5f02\u5e38\u6807\u5fd7\uff0c\u4fdd\u8bc1\u7b26\u5408IEEE 754\u89c4\u8303\u3002</p>"},{"location":"RISCV/ISA/softfloat/#specializeh","title":"specialize.h\u8be6\u7ec6\u5206\u6790","text":"<p><code>specialize.h</code>\u6587\u4ef6\u4e13\u95e8\u5904\u7406\u7279\u6b8a\u6d6e\u70b9\u503c\uff08\u5982NaN\u3001\u65e0\u7a77\u5927\uff09\u548c\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u6838\u5fc3\u529f\u80fd\u6709\uff1a</p>"},{"location":"RISCV/ISA/softfloat/#1-nan","title":"1. \u9ed8\u8ba4NaN\u503c\u5b9a\u4e49","text":"<p><pre><code>#define defaultNaNF16UI 0x7E00\n#define defaultNaNF32UI 0x7FC00000\n#define defaultNaNF64UI UINT64_C(0x7FF8000000000000)\n</code></pre> \u5b9a\u4e49\u4e86\u5404\u79cd\u7cbe\u5ea6\u4e0b\u9ed8\u8ba4NaN\u7684\u4f4d\u6a21\u5f0f\u3002</p>"},{"location":"RISCV/ISA/softfloat/#2-nan","title":"2. NaN\u68c0\u6d4b\u548c\u5904\u7406","text":"<p><pre><code>#define softfloat_isSigNaNF32UI(uiA) \\\n  ((((uiA) &amp; 0x7FC00000) == 0x7F800000) &amp;&amp; ((uiA) &amp; 0x003FFFFF))\n</code></pre> \u5b9a\u4e49\u4e86\u8bc6\u522b\u4fe1\u53f7NaN(signaling NaN)\u7684\u5b8f\uff0c\u4fe1\u53f7NaN\u4f1a\u5728\u4f7f\u7528\u65f6\u89e6\u53d1\u65e0\u6548\u64cd\u4f5c\u5f02\u5e38\u3002</p>"},{"location":"RISCV/ISA/softfloat/#3-nan","title":"3. NaN\u4f20\u64ad\u673a\u5236","text":"<p><pre><code>uint_fast32_t softfloat_propagateNaNF32UI(uint_fast32_t uiA, uint_fast32_t uiB);\n</code></pre> \u5f53\u64cd\u4f5c\u6570\u5305\u542bNaN\u65f6\uff0c\u51b3\u5b9a\u7ed3\u679c\u4e2d\u5e94\u8fd4\u56de\u54ea\u4e2aNaN\u3002\u8fd9\u9075\u5faaIEEE\u89c4\u5219\uff0c\u4f18\u5148\u8fd4\u56de\u4fe1\u53f7NaN\uff08\u5728\u8bbe\u7f6e\u65e0\u6548\u64cd\u4f5c\u6807\u5fd7\u540e\u8f6c\u6362\u4e3a\u9759\u9ed8NaN\uff09\u3002</p>"},{"location":"RISCV/ISA/softfloat/#4","title":"4. \u7c7b\u578b\u8f6c\u6362\u6ea2\u51fa\u503c","text":"<p><pre><code>#define ui32_fromPosOverflow 0xFFFFFFFF\n#define ui32_fromNegOverflow 0\n#define i32_fromPosOverflow  0x7FFFFFFF\n#define i32_fromNegOverflow  (-0x7FFFFFFF - 1)\n</code></pre> \u5b9a\u4e49\u4e86\u6d6e\u70b9\u6570\u8f6c\u6574\u6570\u65f6\u6ea2\u51fa\u60c5\u51b5\u4e0b\u5e94\u8fd4\u56de\u7684\u503c\u3002</p>"},{"location":"RISCV/ISA/softfloat/#_2","title":"\u6d6e\u70b9\u7c7b\u578b\u8f6c\u6362\u5b9e\u73b0","text":""},{"location":"RISCV/ISA/softfloat/#1-f32_to_i32","title":"1. \u6d6e\u70b9\u5230\u6574\u6570\u7684\u8f6c\u6362 (f32_to_i32)","text":"<p>\u4ee5<code>f32_to_i32</code>\u4e3a\u4f8b\uff0c\u8f6c\u6362\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>int_fast32_t f32_to_i32(float32_t a, uint_fast8_t roundingMode, bool exact) {\n    uint_fast32_t uiA = a.v;\n    int16_t exp = expF32UI(uiA);  // \u63d0\u53d6\u6307\u6570\n    uint_fast32_t sig = fracF32UI(uiA);  // \u63d0\u53d6\u5c3e\u6570\n    bool sign = signF32UI(uiA);  // \u63d0\u53d6\u7b26\u53f7\u4f4d\n\n    // \u7279\u6b8a\u60c5\u51b5\u68c0\u67e5\uff08\u96f6\u3001NaN\u3001\u65e0\u7a77\u5927\uff09\n    if (exp == 0xFF) {\n        if (sig) return i32_fromNaN;  // NaN\n        return sign ? i32_fromNegOverflow : i32_fromPosOverflow;  // \u65e0\u7a77\u5927\n    }\n\n    // \u8c03\u6574\u5c3e\u6570\uff08\u52a0\u4e0a\u9690\u542b\u7684\u524d\u5bfc1\uff09\n    if (exp) sig |= 0x00800000;\n\n    // \u8ba1\u7b97\u9700\u8981\u79fb\u4f4d\u7684\u4f4d\u6570\n    int shiftCount = 0x9E - exp;\n\n    // \u5bf9\u5c3e\u6570\u8fdb\u884c\u79fb\u4f4d\uff0c\u51c6\u5907\u820d\u5165\n    if (shiftCount &gt; 0) {\n        sig = softfloat_shiftRightJam32(sig, shiftCount);\n    } else {\n        sig &lt;&lt;= -shiftCount;\n    }\n\n    // \u6839\u636e\u820d\u5165\u6a21\u5f0f\u8fdb\u884c\u820d\u5165\uff0c\u8fd4\u56de\u7ed3\u679c\n    return softfloat_roundToI32(sign, sig, roundingMode, exact);\n}\n</code></pre>"},{"location":"RISCV/ISA/softfloat/#2-i32_to_f32","title":"2. \u6574\u6570\u5230\u6d6e\u70b9\u7684\u8f6c\u6362 (i32_to_f32)","text":"<p>\u5bf9\u4e8e<code>i32_to_f32</code>\uff0c\u4e3b\u8981\u6b65\u9aa4\u5305\u62ec\uff1a</p> <ol> <li>\u5904\u7406\u96f6\u548c\u7279\u6b8a\u60c5\u51b5</li> <li>\u786e\u5b9a\u7b26\u53f7</li> <li>\u63d0\u53d6\u7edd\u5bf9\u503c\u5e76\u5f52\u4e00\u5316\uff08\u627e\u5230\u6700\u9ad8\u6709\u6548\u4f4d\uff09</li> <li>\u8ba1\u7b97\u6307\u6570</li> <li>\u820d\u5165\u5e76\u6253\u5305\u7ed3\u679c</li> </ol> <pre><code>float32_t i32_to_f32(int32_t a) {\n    bool sign;\n    uint_fast32_t absA;\n    int shiftCount;\n\n    if (!a) return packToF32UI(0, 0, 0);  // \u96f6\n\n    sign = (a &lt; 0);\n    absA = sign ? -a : a;  // \u53d6\u7edd\u5bf9\u503c\n\n    // \u5f52\u4e00\u5316 - \u627e\u5230\u6700\u9ad8\u6709\u6548\u4f4d\n    shiftCount = softfloat_countLeadingZeros32(absA);\n\n    // \u8ba1\u7b97\u6307\u6570\u548c\u8c03\u6574\u5c3e\u6570\n    int exp = 0x9E - shiftCount;\n    absA &lt;&lt;= shiftCount;\n\n    // \u63d0\u53d6\u5c3e\u6570\uff08\u53bb\u6389\u9690\u542b\u7684\u524d\u5bfc1\uff09\n    uint_fast32_t sig = absA &amp; 0x7FFFFFFF;\n\n    // \u6253\u5305\u5e76\u820d\u5165\n    return softfloat_roundPackToF32(sign, exp, sig);\n}\n</code></pre>"},{"location":"RISCV/ISA/softfloat/#_3","title":"\u57fa\u672c\u8fd0\u7b97\u7684\u8be6\u7ec6\u5b9e\u73b0","text":""},{"location":"RISCV/ISA/softfloat/#1-f32_mul","title":"1. \u4e58\u6cd5\u5b9e\u73b0 (f32_mul)","text":"<pre><code>float32_t f32_mul(float32_t a, float32_t b) {\n    uint_fast32_t uiA = a.v;\n    uint_fast32_t uiB = b.v;\n    bool signA = signF32UI(uiA);\n    bool signB = signF32UI(uiB);\n    bool signResult = signA ^ signB;  // \u5f02\u6216\u786e\u5b9a\u7ed3\u679c\u7b26\u53f7\n    int16_t expA = expF32UI(uiA);\n    int16_t expB = expF32UI(uiB);\n    uint_fast32_t sigA = fracF32UI(uiA);\n    uint_fast32_t sigB = fracF32UI(uiB);\n\n    // \u7279\u6b8a\u503c\u5904\u7406\uff08\u96f6\u3001NaN\u3001\u65e0\u7a77\u5927\uff09\n    if (expA == 0xFF) {\n        if (sigA || ((expB == 0xFF) &amp;&amp; sigB)) {\n            return softfloat_propagateNaNF32UI(uiA, uiB);\n        }\n        if (!expB &amp;&amp; !sigB) {\n            softfloat_raiseFlags(softfloat_flag_invalid);\n            return packToF32UI(signResult, 0xFF, 0x400000);  // \u65e0\u7a77\u5927 \u00d7 \u96f6 = NaN\n        }\n        return packToF32UI(signResult, 0xFF, 0);  // \u65e0\u7a77\u5927 \u00d7 \u6709\u9650\u503c = \u65e0\u7a77\u5927\n    }\n    if (expB == 0xFF) {\n        // \u7c7b\u4f3c\u5904\u7406...\n    }\n\n    // \u5904\u7406\u96f6\u548c\u975e\u89c4\u683c\u5316\u6570\n    if (!expA) {\n        if (!sigA) return packToF32UI(signResult, 0, 0);  // \u96f6 \u00d7 \u4efb\u4f55\u503c = \u96f6\n        struct exp16_sig32 normExpSig = softfloat_normSubnormalF32Sig(sigA);\n        expA = normExpSig.exp;\n        sigA = normExpSig.sig;\n    }\n    // \u4e3aB\u505a\u7c7b\u4f3c\u5904\u7406...\n\n    // \u6dfb\u52a0\u9690\u542b\u7684\u524d\u5bfc1\n    sigA |= 0x00800000;\n    sigB |= 0x00800000;\n\n    // \u8ba1\u7b97\u7ed3\u679c\u6307\u6570\n    int16_t expResult = expA + expB - 0x7F;\n\n    // \u6267\u884c\u4e58\u6cd5\uff0864\u4f4d\u7ed3\u679c\uff09\n    uint_fast64_t sig64Z = (uint_fast64_t)sigA * sigB;\n\n    // \u63d0\u53d6\u7ed3\u679c\u5c3e\u6570\u5e76\u5f52\u4e00\u5316\n    uint_fast32_t sigZ = sig64Z &gt;&gt; 23;\n    if (sig64Z &amp; 0x007FFFFF) {\n        sigZ |= 1;  // \u7c98\u6027\u4f4d\uff08\u4fdd\u7559\u820d\u5165\u4fe1\u606f\uff09\n    }\n\n    // \u5f52\u4e00\u5316\u5904\u7406\n    if (sigZ &amp; 0x01000000) {\n        sigZ &gt;&gt;= 1;\n        expResult++;\n    }\n\n    // \u68c0\u67e5\u6ea2\u51fa\u548c\u4e0b\u6ea2\n    // \u820d\u5165\u5e76\u6253\u5305\u7ed3\u679c\n    return softfloat_roundPackToF32(signResult, expResult, sigZ);\n}\n</code></pre> <p>\u4e58\u6cd5\u5173\u952e\u6b65\u9aa4\uff1a 1. \u8ba1\u7b97\u7ed3\u679c\u7b26\u53f7\uff08\u5f02\u6216\u64cd\u4f5c\uff09 2. \u8ba1\u7b97\u7ed3\u679c\u6307\u6570\uff08\u76f8\u52a0\u540e\u51cf\u53bb\u504f\u79fb\uff09 3. \u6267\u884c\u5c3e\u6570\u4e58\u6cd5\uff08\u9700\u8981\u6269\u5c55\u4f4d\u5bbd\uff09 4. \u5f52\u4e00\u5316\u7ed3\u679c\u5e76\u5904\u7406\u6ea2\u51fa\u60c5\u51b5 5. \u820d\u5165\u5e76\u6253\u5305\u7ed3\u679c</p>"},{"location":"RISCV/ISA/softfloat/#2-f32_div","title":"2. \u9664\u6cd5\u5b9e\u73b0 (f32_div)","text":"<pre><code>float32_t f32_div(float32_t a, float32_t b) {\n    // \u4e0e\u4e58\u6cd5\u7c7b\u4f3c\u7684\u524d\u671f\u5904\u7406...\n\n    // \u7279\u6b8a\u60c5\u51b5\u5904\u7406\n    if (!expB &amp;&amp; !sigB) {\n        if (!expA &amp;&amp; !sigA) {\n            softfloat_raiseFlags(softfloat_flag_invalid);\n            return packToF32UI(signResult, 0xFF, 0x400000);  // 0 \u00f7 0 = NaN\n        }\n        softfloat_raiseFlags(softfloat_flag_infinite);\n        return packToF32UI(signResult, 0xFF, 0);  // \u6709\u9650\u503c \u00f7 0 = \u65e0\u7a77\u5927\n    }\n\n    // \u751f\u6210\u5f52\u4e00\u5316\u64cd\u4f5c\u6570\n    // \u8ba1\u7b97\u7ed3\u679c\u6307\u6570\uff08\u76f8\u51cf\u540e\u52a0\u4e0a\u504f\u79fb\uff09\n    int16_t expResult = expA - expB + 0x7F;\n\n    // \u4e3a\u9664\u6cd5\u51c6\u5907\u64cd\u4f5c\u6570\n    sigA &lt;&lt;= 7;\n    sigB &lt;&lt;= 8;\n\n    // \u6267\u884c\u9664\u6cd5\uff08\u8fd4\u56de\u5546\u548c\u4f59\u6570\uff09\n    uint_fast32_t sigZ = (sigA + (sigB &gt;&gt; 1)) / sigB;\n\n    // \u5982\u679c\u6709\u4f59\u6570\uff0c\u8bbe\u7f6e\u7c98\u6027\u4f4d\n    if (sigA % sigB) sigZ |= 1;\n\n    // \u5f52\u4e00\u5316\u5e76\u820d\u5165\n    return softfloat_roundPackToF32(signResult, expResult, sigZ);\n}\n</code></pre> <p>\u9664\u6cd5\u5173\u952e\u6b65\u9aa4\uff1a 1. \u7279\u6b8a\u5904\u7406\u9664\u4ee5\u96f6\uff08\u751f\u6210\u65e0\u7a77\u5927\u6216NaN\uff09 2. \u8ba1\u7b97\u7ed3\u679c\u6307\u6570\uff08\u76f8\u51cf\u540e\u52a0\u4e0a\u504f\u79fb\uff09 3. \u8c03\u6574\u5c3e\u6570\u8868\u793a\u65b9\u5f0f\u4ee5\u51c6\u5907\u9664\u6cd5 4. \u6267\u884c\u5c3e\u6570\u9664\u6cd5\u5e76\u5904\u7406\u4f59\u6570 5. \u6839\u636e\u9700\u8981\u5f52\u4e00\u5316\u7ed3\u679c 6. \u820d\u5165\u5e76\u6253\u5305\u6700\u7ec8\u7ed3\u679c</p>"},{"location":"RISCV/ISA/softfloat/#_4","title":"\u8be6\u7ec6\u793a\u4f8b","text":""},{"location":"RISCV/ISA/softfloat/#1-32-375-20","title":"\u793a\u4f8b1: 32\u4f4d\u6d6e\u70b9\u6570\u4e58\u6cd5 (3.75 \u00d7 2.0)","text":"<ol> <li>\u89e3\u5305\u64cd\u4f5c\u6570:</li> <li>3.75 = 11.11(\u4e8c\u8fdb\u5236) = 0x40E00000: \u7b26\u53f7=0, \u6307\u6570=0x81(129), \u5c3e\u6570=0x600000(1.11)</li> <li> <p>2.0 = 10.0(\u4e8c\u8fdb\u5236) = 0x40000000: \u7b26\u53f7=0, \u6307\u6570=0x80(128), \u5c3e\u6570=0x000000(1.0)</p> </li> <li> <p>\u51c6\u5907\u64cd\u4f5c:</p> </li> <li>\u7ed3\u679c\u7b26\u53f7 = 0 ^ 0 = 0 (\u6b63)</li> <li> <p>\u6dfb\u52a0\u9690\u542b\u4f4d\u540e: </p> <ul> <li>sigA = 0x00800000 | 0x00600000 = 0x00E00000 (1.11)</li> <li>sigB = 0x00800000 | 0x00000000 = 0x00800000 (1.0)</li> </ul> </li> <li> <p>\u8ba1\u7b97\u6307\u6570:</p> </li> <li> <p>expResult = 129 + 128 - 127 = 130 (0x82)</p> </li> <li> <p>\u6267\u884c\u4e58\u6cd5:</p> </li> <li> <p>0x00E00000 \u00d7 0x00800000 = 0x70000000000 (\u5341\u8fdb\u5236: 1.11 \u00d7 1.0 = 1.11)</p> </li> <li> <p>\u5f52\u4e00\u5316\u4e0e\u820d\u5165:</p> </li> <li>\u7ed3\u679c = 0x70000000000 &gt;&gt; 23 = 0x00E00000</li> <li>\u6700\u7ec8\u7ed3\u679c: \u7b26\u53f7=0, \u6307\u6570=130, \u5c3e\u6570=0x00600000</li> <li>\u5bf9\u5e94IEEE 754: 0x41700000 (\u5341\u8fdb\u5236\u503c: 7.5)</li> </ol>"},{"location":"RISCV/ISA/softfloat/#2-3216-f32_to_f16-15","title":"\u793a\u4f8b2: 32\u4f4d\u6d6e\u70b9\u6570\u523016\u4f4d\u7684\u8f6c\u6362 (f32_to_f16, \u503c\u4e3a1.5)","text":"<ol> <li>\u89e3\u5305\u6e90\u503c:</li> <li> <p>1.5 = 0x3FC00000: \u7b26\u53f7=0, \u6307\u6570=0x7F(127), \u5c3e\u6570=0x400000(1.1)</p> </li> <li> <p>\u8c03\u6574\u6307\u6570:</p> </li> <li>F32\u6307\u6570\u504f\u79fb: 127</li> <li>F16\u6307\u6570\u504f\u79fb: 15</li> <li> <p>\u8c03\u6574\u540e\u6307\u6570 = 127 - 127 + 15 = 15 (0xF)</p> </li> <li> <p>\u820d\u5165\u5c3e\u6570:</p> </li> <li>F32\u5c3e\u6570: 23\u4f4d</li> <li>F16\u5c3e\u6570: 10\u4f4d</li> <li>\u9700\u8981\u820d\u53bb13\u4f4d</li> <li> <p>\u820d\u5165\u540e\u5c3e\u6570 = 0x400000 &gt;&gt; 13 = 0x200 (\u4fdd\u7559\u6700\u9ad810\u4f4d)</p> </li> <li> <p>\u68c0\u67e5\u7279\u6b8a\u60c5\u51b5\u548c\u6ea2\u51fa:</p> </li> <li> <p>\u503c\u5728F16\u8868\u793a\u8303\u56f4\u5185\uff0c\u65e0\u9700\u7279\u6b8a\u5904\u7406</p> </li> <li> <p>\u6253\u5305\u7ed3\u679c:</p> </li> <li>\u7b26\u53f7=0, \u6307\u6570=15, \u5c3e\u6570=0x200</li> <li>F16\u7ed3\u679c = 0x3E00 (\u5341\u8fdb\u5236\u503c\u4ecd\u4e3a1.5)</li> </ol>"},{"location":"RISCV/ISA/softfloat/#3-nan-nan-10","title":"\u793a\u4f8b3: \u5904\u7406\u7279\u6b8a\u503c - NaN\u7684\u4f20\u64ad (NaN + 1.0)","text":"<p>\u4f7f\u7528\u51fd\u6570<code>softfloat_propagateNaNF32UI</code>:</p> <ol> <li>\u8bc6\u522bNaN:</li> <li>NaN (0x7FC00000): \u7b26\u53f7=0, \u6307\u6570=0xFF, \u5c3e\u6570=0x400000 (\u975e\u96f6\uff0c\u8868\u793aNaN)</li> <li> <p>1.0 (0x3F800000): \u7b26\u53f7=0, \u6307\u6570=0x7F, \u5c3e\u6570=0x000000</p> </li> <li> <p>\u68c0\u67e5\u4fe1\u53f7NaN:</p> </li> <li>\u4f7f\u7528<code>softfloat_isSigNaNF32UI(0x7FC00000)</code> \u68c0\u67e5\u662f\u5426\u4e3a\u4fe1\u53f7NaN</li> <li>0x7FC00000\u7684\u5c3e\u6570\u6700\u9ad8\u4f4d\u4e3a1\uff0c\u8868\u793a\u9759\u9ed8NaN</li> <li> <p>\u5982\u679c\u662f\u4fe1\u53f7NaN(\u59820x7F800001)\uff0c\u4f1a\u89e6\u53d1\u65e0\u6548\u64cd\u4f5c\u5f02\u5e38</p> </li> <li> <p>\u8fd4\u56de\u7ed3\u679c:</p> </li> <li>\u7531\u4e8e\u8f93\u5165\u662f\u9759\u9ed8NaN\uff0c\u65e0\u9700\u89e6\u53d1\u5f02\u5e38</li> <li>\u7ed3\u679c\u4fdd\u6301\u4e3aNaN (0x7FC00000)</li> </ol>"},{"location":"RISCV/ISA/softfloat/#_5","title":"\u603b\u7ed3\u4e0e\u6bd4\u8f83","text":"<p>SoftFloat\u5e93\u901a\u8fc7\u7cbe\u786e\u5b9e\u73b0IEEE 754\u6807\u51c6\uff0c\u4fdd\u8bc1\u6d6e\u70b9\u8fd0\u7b97\u5728\u5404\u79cd\u5e73\u53f0\u4e0a\u7684\u884c\u4e3a\u4e00\u81f4\u6027\uff0c\u7279\u522b\u9002\u5408\u5982RISC-V SPIKE\u8fd9\u6837\u7684\u6a21\u62df\u5668\u4f7f\u7528\u3002\u76f8\u6bd4\u786c\u4ef6\u6d6e\u70b9\u5b9e\u73b0\uff1a</p> <ol> <li> <p>\u7cbe\u786e\u6027\uff1a\u8f6f\u4ef6\u5b9e\u73b0\u53ef\u5b8c\u5168\u63a7\u5236\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u7684\u6bcf\u4e00\u6b65\uff0c\u786e\u4fdd\u820d\u5165\u548c\u5f02\u5e38\u5904\u7406\u4e0e\u6807\u51c6\u5b8c\u5168\u7b26\u5408\u3002</p> </li> <li> <p>\u53ef\u79fb\u690d\u6027\uff1a\u4e0d\u4f9d\u8d56\u786c\u4ef6\u6d6e\u70b9\u5355\u5143\uff0c\u53ef\u5728\u4efb\u4f55\u5e73\u53f0\u4e0a\u63d0\u4f9b\u4e00\u81f4\u884c\u4e3a\u3002</p> </li> <li> <p>\u7075\u6d3b\u6027\uff1a\u53ef\u8f7b\u677e\u4fee\u6539\u4ee5\u652f\u6301\u81ea\u5b9a\u4e49\u6d6e\u70b9\u683c\u5f0f\u6216\u7279\u6b8a\u5904\u7406\u9700\u6c42\u3002</p> </li> <li> <p>\u7f3a\u70b9\uff1a\u6027\u80fd\u660e\u663e\u4f4e\u4e8e\u786c\u4ef6\u5b9e\u73b0\uff0c\u4f46\u5bf9\u4e8e\u6a21\u62df\u5668\u800c\u8a00\uff0c\u7cbe\u786e\u6027\u4f18\u5148\u4e8e\u6027\u80fd\u3002</p> </li> </ol> <p>SoftFloat\u5e93\u662fRISC-V SPIKE\u6a21\u62df\u5668\u7684\u5173\u952e\u7ec4\u4ef6\uff0c\u5e2e\u52a9\u786e\u4fdd\u6d6e\u70b9\u6307\u4ee4\u7684\u7cbe\u786e\u6a21\u62df\uff0c\u4e3aRISC-V\u6d6e\u70b9\u6307\u4ee4\u96c6\u63d0\u4f9b\u4e86\u53c2\u8003\u5b9e\u73b0\u3002</p>"},{"location":"RVV/","title":"RVV","text":""},{"location":"RVV/ISA/int_arith/","title":"RISC-V \u5411\u91cf\u7b97\u672f\u4e0e\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4\u6982\u8ff0","text":""},{"location":"RVV/ISA/int_arith/#_1","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u5411\u91cf\u7b97\u672f\u4e0e\u903b\u8f91\u6307\u4ee4\u662f RISC-V \u5411\u91cf\u6269\u5c55(RVV)\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u7528\u4e8e\u5bf9\u5411\u91cf\u5bc4\u5b58\u5668\u4e2d\u7684\u5143\u7d20\u6267\u884c\u5e76\u884c\u8ba1\u7b97\u64cd\u4f5c\u3002\u8fd9\u4e9b\u6307\u4ee4\u652f\u6301\u591a\u79cd\u64cd\u4f5c\u6570\u7ec4\u5408\uff1a\u5411\u91cf-\u5411\u91cf(vv)\u3001\u5411\u91cf-\u6807\u91cf(vx/vf)\u548c\u5411\u91cf-\u7acb\u5373\u6570(vi)\u3002</p>"},{"location":"RVV/ISA/int_arith/#_2","title":"\u6307\u4ee4\u547d\u540d\u89c4\u5219","text":"<p>RISC-V \u5411\u91cf\u6307\u4ee4\u9075\u5faa\u4e00\u81f4\u7684\u547d\u540d\u89c4\u5219\uff1a</p> <ul> <li><code>v{op}.{vv|vx|vi}</code> - \u6574\u6570/\u903b\u8f91\u64cd\u4f5c</li> <li><code>vf{op}.{vv|vf}</code> - \u6d6e\u70b9\u64cd\u4f5c</li> <li>\u540e\u7f00\u8868\u793a\u64cd\u4f5c\u6570\u7c7b\u578b\uff1a<ul> <li><code>vv</code> - \u5411\u91cf-\u5411\u91cf</li> <li><code>vx</code> - \u5411\u91cf-\u6574\u6570\u5bc4\u5b58\u5668(x)</li> <li><code>vf</code> - \u5411\u91cf-\u6d6e\u70b9\u5bc4\u5b58\u5668(f)</li> <li><code>vi</code> - \u5411\u91cf-\u7acb\u5373\u6570</li> </ul> </li> </ul>"},{"location":"RVV/ISA/int_arith/#_3","title":"\u6307\u4ee4\u5206\u7c7b\u4e0e\u529f\u80fd","text":""},{"location":"RVV/ISA/int_arith/#1","title":"1. \u6574\u6570\u7b97\u672f\u6307\u4ee4","text":"\u6307\u4ee4\u7c7b\u578b \u793a\u4f8b\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c \u52a0\u6cd5 <code>vadd.vv</code> \u5411\u91cf-\u5411\u91cf\u52a0\u6cd5 \\(v_d[i] = v_{s1}[i] + v_{s2}[i]\\) \u51cf\u6cd5 <code>vsub.vv</code> \u5411\u91cf-\u5411\u91cf\u51cf\u6cd5 \\(v_d[i] = v_{s1}[i] - v_{s2}[i]\\) \u4e58\u6cd5 <code>vmul.vv</code> \u5411\u91cf-\u5411\u91cf\u4e58\u6cd5 \\(v_d[i] = v_{s1}[i] \\times v_{s2}[i]\\) \u9664\u6cd5 <code>vdiv.vv</code> \u5411\u91cf-\u5411\u91cf\u9664\u6cd5 \\(v_d[i] = v_{s1}[i] \\div v_{s2}[i]\\) \u9664\u6cd5(\u65e0\u7b26\u53f7) <code>vdivu.vv</code> \u65e0\u7b26\u53f7\u5411\u91cf-\u5411\u91cf\u9664\u6cd5 \\(v_d[i] = v_{s1}[i] \\div v_{s2}[i]\\) (\u65e0\u7b26\u53f7) \u53d6\u4f59 <code>vrem.vv</code> \u5411\u91cf-\u5411\u91cf\u53d6\u4f59 \\(v_d[i] = v_{s1}[i] \\bmod v_{s2}[i]\\) \u53d6\u4f59(\u65e0\u7b26\u53f7) <code>vremu.vv</code> \u65e0\u7b26\u53f7\u5411\u91cf-\u5411\u91cf\u53d6\u4f59 \\(v_d[i] = v_{s1}[i] \\bmod v_{s2}[i]\\) (\u65e0\u7b26\u53f7)"},{"location":"RVV/ISA/int_arith/#2","title":"2. \u9971\u548c\u5b9a\u70b9\u7b97\u672f\u6307\u4ee4","text":"\u6307\u4ee4\u7c7b\u578b \u793a\u4f8b\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c \u9971\u548c\u52a0\u6cd5 <code>vsadd.vv</code> \u6709\u7b26\u53f7\u9971\u548c\u52a0\u6cd5 \\(v_d[i] = \\text{sat}(v_{s1}[i] + v_{s2}[i])\\) \u9971\u548c\u52a0\u6cd5(\u65e0\u7b26\u53f7) <code>vsaddu.vv</code> \u65e0\u7b26\u53f7\u9971\u548c\u52a0\u6cd5 \\(v_d[i] = \\text{sat}_u(v_{s1}[i] + v_{s2}[i])\\) \u9971\u548c\u51cf\u6cd5 <code>vssub.vv</code> \u6709\u7b26\u53f7\u9971\u548c\u51cf\u6cd5 \\(v_d[i] = \\text{sat}(v_{s1}[i] - v_{s2}[i])\\) \u9971\u548c\u51cf\u6cd5(\u65e0\u7b26\u53f7) <code>vssubu.vv</code> \u65e0\u7b26\u53f7\u9971\u548c\u51cf\u6cd5 \\(v_d[i] = \\text{sat}_u(v_{s1}[i] - v_{s2}[i])\\)"},{"location":"RVV/ISA/int_arith/#3","title":"3. \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4","text":"\u6307\u4ee4\u7c7b\u578b \u793a\u4f8b\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c \u6309\u4f4d\u4e0e <code>vand.vv</code> \u5411\u91cf-\u5411\u91cf\u6309\u4f4d\u4e0e \\(v_d[i] = v_{s1}[i] \\land v_{s2}[i]\\) \u6309\u4f4d\u6216 <code>vor.vv</code> \u5411\u91cf-\u5411\u91cf\u6309\u4f4d\u6216 \\(v_d[i] = v_{s1}[i] \\lor v_{s2}[i]\\) \u6309\u4f4d\u5f02\u6216 <code>vxor.vv</code> \u5411\u91cf-\u5411\u91cf\u6309\u4f4d\u5f02\u6216 \\(v_d[i] = v_{s1}[i] \\oplus v_{s2}[i]\\)"},{"location":"RVV/ISA/int_arith/#4","title":"4. \u4f4d\u79fb\u6307\u4ee4","text":"\u6307\u4ee4\u7c7b\u578b \u793a\u4f8b\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c \u903b\u8f91\u5de6\u79fb <code>vsll.vv</code> \u5411\u91cf-\u5411\u91cf\u903b\u8f91\u5de6\u79fb \\(v_d[i] = v_{s1}[i] \\ll v_{s2}[i]\\) \u903b\u8f91\u53f3\u79fb <code>vsrl.vv</code> \u5411\u91cf-\u5411\u91cf\u903b\u8f91\u53f3\u79fb \\(v_d[i] = v_{s1}[i] \\gg_l v_{s2}[i]\\) \u7b97\u672f\u53f3\u79fb <code>vsra.vv</code> \u5411\u91cf-\u5411\u91cf\u7b97\u672f\u53f3\u79fb \\(v_d[i] = v_{s1}[i] \\gg_a v_{s2}[i]\\)"},{"location":"RVV/ISA/int_arith/#5","title":"5. \u6700\u5927/\u6700\u5c0f\u503c\u6307\u4ee4","text":"\u6307\u4ee4\u7c7b\u578b \u793a\u4f8b\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c \u6700\u5927\u503c <code>vmax.vv</code> \u6709\u7b26\u53f7\u5411\u91cf-\u5411\u91cf\u6700\u5927\u503c \\(v_d[i] = \\max(v_{s1}[i], v_{s2}[i])\\) \u6700\u5927\u503c(\u65e0\u7b26\u53f7) <code>vmaxu.vv</code> \u65e0\u7b26\u53f7\u5411\u91cf-\u5411\u91cf\u6700\u5927\u503c \\(v_d[i] = \\max_u(v_{s1}[i], v_{s2}[i])\\) \u6700\u5c0f\u503c <code>vmin.vv</code> \u6709\u7b26\u53f7\u5411\u91cf-\u5411\u91cf\u6700\u5c0f\u503c \\(v_d[i] = \\min(v_{s1}[i], v_{s2}[i])\\) \u6700\u5c0f\u503c(\u65e0\u7b26\u53f7) <code>vminu.vv</code> \u65e0\u7b26\u53f7\u5411\u91cf-\u5411\u91cf\u6700\u5c0f\u503c \\(v_d[i] = \\min_u(v_{s1}[i], v_{s2}[i])\\)"},{"location":"RVV/ISA/int_arith/#6","title":"6. \u5411\u91cf\u5e26\u8fdb\u4f4d/\u501f\u4f4d\u7b97\u672f\u6307\u4ee4","text":"\u6307\u4ee4\u7c7b\u578b \u793a\u4f8b\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c \u5e26\u8fdb\u4f4d\u52a0\u6cd5 <code>vadc.vv</code> \u5e26\u8fdb\u4f4d\u5411\u91cf-\u5411\u91cf\u52a0\u6cd5 \\(v_d[i] = v_{s1}[i] + v_{s2}[i] + v0.mask[i]\\) \u5e26\u8fdb\u4f4d\u52a0\u6cd5\u751f\u6210\u8fdb\u4f4d <code>vmadc.vv</code> \u52a0\u6cd5\u8fdb\u4f4d\u751f\u6210 \\(v_d.mask[i] = carry\\_out(v_{s1}[i] + v_{s2}[i] + v0.mask[i])\\) \u5e26\u501f\u4f4d\u51cf\u6cd5 <code>vsbc.vv</code> \u5e26\u501f\u4f4d\u5411\u91cf-\u5411\u91cf\u51cf\u6cd5 \\(v_d[i] = v_{s1}[i] - v_{s2}[i] - v0.mask[i]\\) \u5e26\u501f\u4f4d\u51cf\u6cd5\u751f\u6210\u501f\u4f4d <code>vmsbc.vv</code> \u51cf\u6cd5\u501f\u4f4d\u751f\u6210 \\(v_d.mask[i] = borrow\\_out(v_{s1}[i] - v_{s2}[i] - v0.mask[i])\\)"},{"location":"RVV/ISA/int_arith/#7","title":"7. \u5411\u91cf\u6574\u6570\u6269\u5c55\u6307\u4ee4","text":"\u6307\u4ee4\u7c7b\u578b \u793a\u4f8b\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c \u96f6\u6269\u5c55 <code>vzext.vf2</code> \u96f6\u6269\u5c55\u5230 2 \u500d\u5bbd\u5ea6 \\(v_d[i] = zext(v_s[i])\\)\uff0c\u5bbd\u5ea6\u6269\u5c55\u5230\u539f\u6765\u7684 2 \u500d \u96f6\u6269\u5c55 <code>vzext.vf4</code> \u96f6\u6269\u5c55\u5230 4 \u500d\u5bbd\u5ea6 \\(v_d[i] = zext(v_s[i])\\)\uff0c\u5bbd\u5ea6\u6269\u5c55\u5230\u539f\u6765\u7684 4 \u500d \u96f6\u6269\u5c55 <code>vzext.vf8</code> \u96f6\u6269\u5c55\u5230 8 \u500d\u5bbd\u5ea6 \\(v_d[i] = zext(v_s[i])\\)\uff0c\u5bbd\u5ea6\u6269\u5c55\u5230\u539f\u6765\u7684 8 \u500d \u7b26\u53f7\u6269\u5c55 <code>vsext.vf2</code> \u7b26\u53f7\u6269\u5c55\u5230 2 \u500d\u5bbd\u5ea6 \\(v_d[i] = sext(v_s[i])\\)\uff0c\u5bbd\u5ea6\u6269\u5c55\u5230\u539f\u6765\u7684 2 \u500d \u7b26\u53f7\u6269\u5c55 <code>vsext.vf4</code> \u7b26\u53f7\u6269\u5c55\u5230 4 \u500d\u5bbd\u5ea6 \\(v_d[i] = sext(v_s[i])\\)\uff0c\u5bbd\u5ea6\u6269\u5c55\u5230\u539f\u6765\u7684 4 \u500d \u7b26\u53f7\u6269\u5c55 <code>vsext.vf8</code> \u7b26\u53f7\u6269\u5c55\u5230 8 \u500d\u5bbd\u5ea6 \\(v_d[i] = sext(v_s[i])\\)\uff0c\u5bbd\u5ea6\u6269\u5c55\u5230\u539f\u6765\u7684 8 \u500d <pre><code>- . \u5411\u91cf\u5bbd\u5ea6\u8f6c\u6362\u7b97\u672f\u6307\u4ee4\n</code></pre> \u6307\u4ee4\u7c7b\u578b \u793a\u4f8b\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c \u5bbd\u5316\u52a0\u6cd5 <code>vwadd.vv</code> \u5bbd\u5316\u5411\u91cf-\u5411\u91cf\u52a0\u6cd5 \\(v_d[i] = sext(v_{s1}[i]) + sext(v_{s2}[i])\\)\uff0c\u7ed3\u679c\u662f\u4e24\u500d SEW \u5bbd\u5ea6 \u5bbd\u5316\u65e0\u7b26\u53f7\u52a0\u6cd5 <code>vwaddu.vv</code> \u5bbd\u5316\u65e0\u7b26\u53f7\u5411\u91cf-\u5411\u91cf\u52a0\u6cd5 \\(v_d[i] = zext(v_{s1}[i]) + zext(v_{s2}[i])\\)\uff0c\u7ed3\u679c\u662f\u4e24\u500d SEW \u5bbd\u5ea6 \u5bbd\u5316\u51cf\u6cd5 <code>vwsub.vv</code> \u5bbd\u5316\u5411\u91cf-\u5411\u91cf\u51cf\u6cd5 \\(v_d[i] = sext(v_{s1}[i]) - sext(v_{s2}[i])\\)\uff0c\u7ed3\u679c\u662f\u4e24\u500d SEW \u5bbd\u5ea6 \u5bbd\u5316\u65e0\u7b26\u53f7\u51cf\u6cd5 <code>vwsubu.vv</code> \u5bbd\u5316\u65e0\u7b26\u53f7\u5411\u91cf-\u5411\u91cf\u51cf\u6cd5 \\(v_d[i] = zext(v_{s1}[i]) - zext(v_{s2}[i])\\)\uff0c\u7ed3\u679c\u662f\u4e24\u500d SEW \u5bbd\u5ea6 \u5bbd\u5316\u4e58\u6cd5 <code>vwmul.vv</code> \u5bbd\u5316\u5411\u91cf-\u5411\u91cf\u4e58\u6cd5 \\(v_d[i] = v_{s1}[i] \\times v_{s2}[i]\\)\uff0c\u7ed3\u679c\u662f\u4e24\u500d SEW \u5bbd\u5ea6 \u5bbd\u5316\u65e0\u7b26\u53f7\u4e58\u6cd5 <code>vwmulu.vv</code> \u5bbd\u5316\u65e0\u7b26\u53f7\u5411\u91cf-\u5411\u91cf\u4e58\u6cd5 \\(v_d[i] = v_{s1}[i] \\times v_{s2}[i]\\) (\u65e0\u7b26\u53f7)\uff0c\u7ed3\u679c\u662f\u4e24\u500d SEW \u5bbd\u5ea6 \u5df2\u5bbd\u5316\u64cd\u4f5c\u6570\u52a0\u6cd5 <code>vwadd.wv</code> \u5df2\u5bbd\u5316-\u5411\u91cf\u52a0\u6cd5 \\(v_d[i] = v_{s1}[i] + sext(v_{s2}[i])\\)\uff0c\\(v_{s1}[i]\\)\u5df2\u662f\u4e24\u500d SEW \u5bbd\u5ea6 \u5df2\u5bbd\u5316\u64cd\u4f5c\u6570\u51cf\u6cd5 <code>vwsub.wv</code> \u5df2\u5bbd\u5316-\u5411\u91cf\u51cf\u6cd5 \\(v_d[i] = v_{s1}[i] - sext(v_{s2}[i])\\)\uff0c\\(v_{s1}[i]\\)\u5df2\u662f\u4e24\u500d SEW \u5bbd\u5ea6"},{"location":"RVV/ISA/int_arith/#9","title":"9. \u5411\u91cf\u6574\u6570\u7f29\u7a84\u6307\u4ee4","text":"\u6307\u4ee4\u7c7b\u578b \u793a\u4f8b\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c \u7f29\u7a84\u903b\u8f91\u53f3\u79fb <code>vnsrl.wv</code> \u7f29\u7a84\u903b\u8f91\u53f3\u79fb \\(v_d[i] = (v_{s1}[i] \\gg v_{s2}[i])[SEW-1:0]\\)\uff0c\u5c06 2*SEW \u5bbd\u5ea6\u7684\u6e90\u64cd\u4f5c\u6570\u7f29\u7a84\u5230 SEW \u5bbd\u5ea6 \u7f29\u7a84\u7b97\u672f\u53f3\u79fb <code>vnsra.wv</code> \u7f29\u7a84\u7b97\u672f\u53f3\u79fb \\(v_d[i] = (v_{s1}[i] \\gg_a v_{s2}[i])[SEW-1:0]\\)\uff0c\u5c06 2*SEW \u5bbd\u5ea6\u7684\u6e90\u64cd\u4f5c\u6570\u7f29\u7a84\u5230 SEW \u5bbd\u5ea6 \u7f29\u7a84\u88c1\u526a <code>vnclip.wv</code> \u6709\u7b26\u53f7\u7f29\u7a84\u88c1\u526a \\(v_d[i] = clip(round((v_{s1}[i] \\gg v_{s2}[i])[SEW-1:0]))\\) \u7f29\u7a84\u88c1\u526a(\u65e0\u7b26\u53f7) <code>vnclipu.wv</code> \u65e0\u7b26\u53f7\u7f29\u7a84\u88c1\u526a \\(v_d[i] = clip_u(round((v_{s1}[i] \\gg v_{s2}[i])[SEW-1:0]))\\)"},{"location":"RVV/ISA/int_arith/#10","title":"10. \u5411\u91cf\u6574\u6570\u4e58\u52a0\u6307\u4ee4","text":"\u6307\u4ee4\u7c7b\u578b \u793a\u4f8b\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c \u4e58\u52a0 <code>vmacc.vv</code> \u5411\u91cf-\u5411\u91cf\u4e58\u52a0 \\(v_d[i] = v_d[i] + (v_{s1}[i] \\times v_{s2}[i])\\) \u4e58\u52a0(\u5bbd\u5316) <code>vwmacc.vv</code> \u5bbd\u5316\u5411\u91cf-\u5411\u91cf\u4e58\u52a0 \\(v_d[i] = v_d[i] + (sext(v_{s1}[i]) \\times sext(v_{s2}[i]))\\)\uff0c\u7ed3\u679c\u662f\u4e24\u500d SEW \u5bbd\u5ea6 \u4e58\u52a0(\u65e0\u7b26\u53f7\u5bbd\u5316) <code>vwmaccu.vv</code> \u65e0\u7b26\u53f7\u5bbd\u5316\u5411\u91cf-\u5411\u91cf\u4e58\u52a0 \\(v_d[i] = v_d[i] + (zext(v_{s1}[i]) \\times zext(v_{s2}[i]))\\)\uff0c\u7ed3\u679c\u662f\u4e24\u500d SEW \u5bbd\u5ea6 \u4e58\u52a0\u6e90 <code>vmadd.vv</code> \u5411\u91cf-\u5411\u91cf\u4e58\u52a0\u6e90 \\(v_d[i] = v_{s1}[i] + (v_d[i] \\times v_{s2}[i])\\) \u4e58\u51cf <code>vnmsac.vv</code> \u5411\u91cf-\u5411\u91cf\u4e58\u51cf \\(v_d[i] = v_d[i] - (v_{s1}[i] \\times v_{s2}[i])\\) \u4e58\u51cf\u6e90 <code>vnmsub.vv</code> \u5411\u91cf-\u5411\u91cf\u4e58\u51cf\u6e90 \\(v_d[i] = v_{s1}[i] - (v_d[i] \\times v_{s2}[i])\\)"},{"location":"RVV/ISA/int_arith/#_4","title":"\u6307\u4ee4\u683c\u5f0f\u4e0e\u5143\u7d20\u5904\u7406\u8be6\u89e3","text":""},{"location":"RVV/ISA/int_arith/#_5","title":"\u901a\u7528\u6307\u4ee4\u683c\u5f0f","text":"<p>\u6240\u6709\u5411\u91cf\u7b97\u672f\u548c\u903b\u8f91\u6307\u4ee4\u9075\u5faa\u76f8\u4f3c\u7684\u5143\u7d20\u5904\u7406\u89c4\u5219\uff1a</p> \u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(0 \\leq i &lt; \\text{vstart}\\) \u5143\u7d20\u4e0d\u53d8 \\(\\text{vstart} \\leq i &lt; \\text{vl}\\) \u6267\u884c\u6307\u5b9a\u64cd\u4f5c (\u53d7\u63a9\u7801\u63a7\u5236) \\(\\text{vl} \\leq i &lt; \\text{VLMAX}\\) \u6839\u636e\u5c3e\u90e8\u7b56\u7565\u5904\u7406"},{"location":"RVV/ISA/int_arith/#_6","title":"\u63a9\u7801\u5904\u7406\u89c4\u5219","text":"<p>\u63a9\u7801\u4f4d(\\(v0.\\text{mask}[i]\\))\u63a7\u5236\u5bf9\u5e94\u4f4d\u7f6e\u7684\u64cd\u4f5c\u662f\u5426\u6267\u884c\uff1a</p> <ul> <li>\u5f53\\(\\text{mask}[i]=1\\)\u6216\u672a\u6307\u5b9a\u63a9\u7801\u65f6\uff0c\u6267\u884c\u64cd\u4f5c</li> <li>\u5f53\\(\\text{mask}[i]=0\\)\u65f6\uff0c\u6839\u636e\u63a9\u7801\u7b56\u7565\u5904\u7406\uff1a<ul> <li>\\(v_d[i] = v_{s1}[i]\\) (\u63a9\u7801\u672a\u5f00\u542f\u503c)</li> <li>\\(v_d[i]\\)\u4e0d\u53d8 (\u63a9\u7801\u4e0d\u6270\u52a8)</li> </ul> </li> </ul>"},{"location":"RVV/ISA/int_arith/#spike","title":"SPIKE \u6a21\u62df\u5668\u5b9e\u73b0\u4e0e\u6307\u4ee4\u8be6\u89e3","text":""},{"location":"RVV/ISA/int_arith/#1-vaddvv","title":"1. \u5411\u91cf-\u5411\u91cf\u6574\u6570\u52a0\u6cd5 (vadd.vv)","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vadd.vv vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u5c06 vs1 \u548c vs2 \u7684\u5bf9\u5e94\u5143\u7d20\u76f8\u52a0\uff0c\u7ed3\u679c\u5b58\u5165 vd \u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728riscv-isa-sim/riscv/insns/vadd_vv.h\nVI_VV_LOOP\n({\n  vd = vs1 + vs2;\n})\n</code></pre> <p>\u5b8f\u5c55\u5f00\u5206\u6790: <code>VI_VV_LOOP</code>\u5b8f\u5c55\u5f00\u540e\uff0c<code>vadd.vv</code>\u7684\u5b9e\u9645\u6267\u884c\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>// 1. \u68c0\u67e5\u5411\u91cf\u64cd\u4f5c\u6761\u4ef6\nrequire(P.VU.vsew &gt;= e8 &amp;&amp; P.VU.vsew &lt;= e64);\nrequire_vector(true);\nrequire_align(insn.rd(), P.VU.vflmul);\nrequire_align(insn.rs1(), P.VU.vflmul);\nrequire_align(insn.rs2(), P.VU.vflmul);\n\n// 2. \u83b7\u53d6\u57fa\u672c\u53c2\u6570\nreg_t vl = P.VU.vl-&gt;read();\nreg_t rd_num = insn.rd();\nreg_t rs1_num = insn.rs1();\nreg_t rs2_num = insn.rs2();\n\n// 3. \u6839\u636e\u5143\u7d20\u5bbd\u5ea6(SEW)\u5904\u7406\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\nswitch (P.VU.vsew) {\n  case e8: {\n    // \u5904\u74068\u4f4d\u5143\u7d20\n    VI_VV_LOOP_BODY(int8_t, 1)\n    break;\n  }\n  case e16: {\n    // \u5904\u740616\u4f4d\u5143\u7d20\n    VI_VV_LOOP_BODY(int16_t, 2)\n    break;\n  }\n  case e32: {\n    // \u5904\u740632\u4f4d\u5143\u7d20\n    VI_VV_LOOP_BODY(int32_t, 4)\n    break;\n  }\n  default: {\n    // \u5904\u740664\u4f4d\u5143\u7d20\n    VI_VV_LOOP_BODY(int64_t, 8)\n    break;\n  }\n}\n\n// VI_VV_LOOP_BODY\u5c55\u5f00(\u4ee532\u4f4d\u4e3a\u4f8b)\nfor (reg_t i = P.VU.vstart-&gt;read(); i &lt; vl; ++i) {\n  // \u63a9\u7801\u5904\u7406 - \u68c0\u67e5\u662f\u5426\u9700\u8981\u6267\u884c\u8be5\u5143\u7d20\n  bool do_op = P.VU.get_vm()-&gt;read() || (P.VU.get_mask(i) &amp; 0x1);\n\n  if (do_op) {\n    // \u83b7\u53d6\u64cd\u4f5c\u6570\n    int32_t vs1 = P.VU.elt&lt;int32_t&gt;(rs1_num, i);\n    int32_t vs2 = P.VU.elt&lt;int32_t&gt;(rs2_num, i);\n\n    // \u6267\u884c\u6838\u5fc3\u64cd\u4f5c\n    int32_t vd = vs1 + vs2;\n\n    // \u5b58\u50a8\u7ed3\u679c\n    P.VU.elt&lt;int32_t&gt;(rd_num, i) = vd;\n  }\n}\n\n// \u91cd\u7f6evstart = 0\nP.VU.vstart-&gt;write(0);\n</code></pre>"},{"location":"RVV/ISA/int_arith/#2-vaddvx","title":"2. \u5411\u91cf-\u6807\u91cf\u6574\u6570\u52a0\u6cd5 (vadd.vx)","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vadd.vx vd, vs2, rs1, vm</code></p> <p>\u529f\u80fd: \u5c06\u5411\u91cf vs2 \u7684\u6bcf\u4e2a\u5143\u7d20\u4e0e\u6807\u91cf\u5bc4\u5b58\u5668 rs1 \u7684\u503c\u76f8\u52a0\uff0c\u7ed3\u679c\u5b58\u5165 vd \u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728riscv-isa-sim/riscv/insns/vadd_vx.h\nVI_VX_LOOP\n({\n  vd = rs1 + vs2;\n})\n</code></pre> <p>\u5b8f\u5c55\u5f00\u5206\u6790: <code>VI_VX_LOOP</code>\u5b8f\u7c7b\u4f3c\u4e8e<code>VI_VV_LOOP</code>\uff0c\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u6807\u91cf\u800c\u975e\u5411\u91cf\u3002\u5b83\u4ece\u901a\u7528\u5bc4\u5b58\u5668\u83b7\u53d6 rs1 \u503c\uff0c\u5e76\u5c06\u5176\u7528\u4e8e\u6bcf\u4e2a\u5411\u91cf\u5143\u7d20\u7684\u64cd\u4f5c\u3002</p> <pre><code>// \u6838\u5fc3\u5b9e\u73b0\u533a\u522b\nreg_t rs1 = RS1; // \u4ece\u901a\u7528\u5bc4\u5b58\u5668\u83b7\u53d6\u6807\u91cf\u503c\n\n// \u5728\u5faa\u73af\u4e2d\nfor (reg_t i = P.VU.vstart-&gt;read(); i &lt; vl; ++i) {\n  // ...\n  int32_t vs2 = P.VU.elt&lt;int32_t&gt;(rs2_num, i);\n\n  // \u6267\u884c\u6838\u5fc3\u64cd\u4f5c - \u6ce8\u610frs1\u662f\u6807\u91cf\n  int32_t vd = rs1 + vs2;\n\n  // ...\n}\n</code></pre>"},{"location":"RVV/ISA/int_arith/#3-vsaddvv","title":"3. \u9971\u548c\u52a0\u6cd5 (vsadd.vv)","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vsadd.vv vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u6267\u884c\u6709\u7b26\u53f7\u9971\u548c\u52a0\u6cd5\uff0c\u786e\u4fdd\u7ed3\u679c\u5728\u5143\u7d20\u7c7b\u578b\u7684\u6709\u6548\u8303\u56f4\u5185\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728riscv-isa-sim/riscv/insns/vsadd_vv.h\nVI_VV_LOOP\n({\n  vd = sat_add&lt;int8_t&gt;(vs1, vs2, 1);\n})\n</code></pre> <p>\u5b8f\u5c55\u5f00\u5206\u6790: \u9971\u548c\u8fd0\u7b97\u786e\u4fdd\u7ed3\u679c\u4e0d\u4f1a\u6ea2\u51fa\uff0c\u5982\u679c\u8ba1\u7b97\u7ed3\u679c\u8d85\u51fa\u6570\u636e\u7c7b\u578b\u8303\u56f4\uff0c\u5c06\u622a\u65ad\u4e3a\u8be5\u7c7b\u578b\u80fd\u8868\u793a\u7684\u6700\u5927/\u6700\u5c0f\u503c\u3002</p> <pre><code>// sat_add\u5b9e\u73b0\ntemplate&lt;typename T&gt;\ninline T sat_add(T x, T y, bool sign) {\n  // \u4f7f\u7528\u66f4\u5927\u4f4d\u5bbd\u7c7b\u578b\u907f\u514d\u6ea2\u51fa\u68c0\u6d4b\n  typedef typename std::make_signed&lt;typename double_width&lt;T&gt;::type&gt;::type S;\n  S s = S(x) + S(y);\n\n  // \u6709\u7b26\u53f7\u68c0\u67e5\n  if (sign) {\n    S min = S(std::numeric_limits&lt;T&gt;::min());\n    S max = S(std::numeric_limits&lt;T&gt;::max());\n    return s &lt; min ? min : (s &gt; max ? max : s);\n  }\n  // \u65e0\u7b26\u53f7\u68c0\u67e5\n  else {\n    typename double_width&lt;T&gt;::type U =\n      typename double_width&lt;T&gt;::type(x) +\n      typename double_width&lt;T&gt;::type(y);\n    typename double_width&lt;T&gt;::type max =\n      typename double_width&lt;T&gt;::type(std::numeric_limits&lt;T&gt;::max());\n    return U &gt; max ? max : U;\n  }\n}\n</code></pre>"},{"location":"RVV/ISA/int_arith/#4-vandvv","title":"4. \u4f4d\u64cd\u4f5c\u6307\u4ee4 (vand.vv)","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vand.vv vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u6267\u884c\u5411\u91cf\u5143\u7d20\u95f4\u7684\u6309\u4f4d\u4e0e\u64cd\u4f5c\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728riscv-isa-sim/riscv/insns/vand_vv.h\nVI_VV_LOOP\n({\n  vd = vs1 &amp; vs2;\n})\n</code></pre> <p>\u4f4d\u64cd\u4f5c\u6307\u4ee4\u5b9e\u73b0\u7b80\u5355\u76f4\u63a5\uff0c\u76f4\u63a5\u4f7f\u7528 C++\u7684\u4f4d\u64cd\u4f5c\u7b26\u5bf9\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\u3002</p>"},{"location":"RVV/ISA/int_arith/#5-vmaxvv","title":"5. \u6700\u5927/\u6700\u5c0f\u503c\u6307\u4ee4 (vmax.vv)","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vmax.vv vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u9009\u62e9 vs1 \u548c vs2 \u5bf9\u5e94\u5143\u7d20\u4e2d\u7684\u6700\u5927\u503c\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728riscv-isa-sim/riscv/insns/vmax_vv.h\nVI_VV_LOOP\n({\n  vd = std::max(vs1, vs2);\n})\n</code></pre> <p>\u5bf9\u4e8e\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u7684\u5dee\u5f02\uff0c\u5728\u6570\u636e\u7c7b\u578b\u4e0a\u53cd\u6620\uff1a\u6709\u7b26\u53f7\u64cd\u4f5c\u4f7f\u7528\u6709\u7b26\u53f7\u7c7b\u578b(<code>int8_t</code>\u7b49)\uff0c\u65e0\u7b26\u53f7\u64cd\u4f5c\u4f7f\u7528\u65e0\u7b26\u53f7\u7c7b\u578b(<code>uint8_t</code>\u7b49)\u3002</p>"},{"location":"RVV/ISA/int_arith/#6-vwaddvv","title":"6. \u6574\u6570\u5bbd\u5316\u6307\u4ee4 (vwadd.vv)","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vwadd.vv vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u5c06 vs1 \u548c vs2 \u7684\u5143\u7d20\u5bbd\u5316\u4e3a\u4e24\u500d SEW \u540e\u76f8\u52a0\uff0c\u7ed3\u679c\u5b58\u50a8\u5728 vd \u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728riscv-isa-sim/riscv/insns/vwadd_vv.h\nVI_VV_LOOP_WIDE\n({\n  vd = (type_sew_t&lt;2*SEW&gt;::type)vs1 + (type_sew_t&lt;2*SEW&gt;::type)vs2;\n})\n</code></pre> <p>\u5b8f\u5c55\u5f00\u5206\u6790: \u5bbd\u5316\u64cd\u4f5c\u5c06\u8f93\u5165\u64cd\u4f5c\u6570\u6269\u5c55\u5230\u66f4\u5927\u7684\u4f4d\u5bbd\u5ea6\uff0c\u6267\u884c\u64cd\u4f5c\u540e\u7ed3\u679c\u4e5f\u4f7f\u7528\u66f4\u5927\u7684\u4f4d\u5bbd\u5ea6\u5b58\u50a8\u3002\u8fd9\u901a\u5e38\u9700\u8981\u66f4\u591a\u7684\u5bc4\u5b58\u5668\u7a7a\u95f4\u6765\u5b58\u50a8\u7ed3\u679c\u3002</p>"},{"location":"RVV/ISA/int_arith/#_7","title":"\u5411\u91cf\u7b97\u672f\u4e0e\u903b\u8f91\u6307\u4ee4\u5e94\u7528\u793a\u4f8b","text":""},{"location":"RVV/ISA/int_arith/#1-2-1","title":"1. \u5411\u91cf\u5143\u7d20\u4e58 2 \u52a0 1 \u64cd\u4f5c","text":"<pre><code># \u5bf9\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u6267\u884c 2*x + 1 \u8fd0\u7b97\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u6570\u7ec4\u5730\u5740\uff0ca1\u5305\u542b\u6570\u7ec4\u957f\u5ea6\uff0ca2\u5305\u542b\u76ee\u6807\u5730\u5740\n\n    # \u8bbe\u7f6e\u5411\u91cf\u73af\u5883\n    vsetvli t0, a1, e32, m4       # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u5143\u7d20\n\n    # \u8f7d\u5165\u5411\u91cf\u6570\u636e\n    vle32.v v4, (a0)              # \u52a0\u8f7d\u6e90\u6570\u7ec4\u5230v4\n\n    # \u6267\u884c2*x + 1\u64cd\u4f5c\n    li t1, 2                      # \u52a0\u8f7d\u4e58\u65702\u5230t1\n    vmul.vx v8, v4, t1            # v8 = v4 * 2\n    li t1, 1                      # \u52a0\u8f7d\u52a0\u65701\u5230t1\n    vadd.vx v8, v8, t1            # v8 = v8 + 1\n\n    # \u5b58\u50a8\u7ed3\u679c\n    vse32.v v8, (a2)              # \u4fdd\u5b58\u7ed3\u679c\u5230\u76ee\u6807\u5730\u5740\n</code></pre>"},{"location":"RVV/ISA/int_arith/#2_1","title":"2. \u5411\u91cf\u6761\u4ef6\u6700\u5927\u503c\u8ba1\u7b97","text":"<pre><code># \u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u7684\u6761\u4ef6\u6700\u5927\u503c(\u8d1f\u6570\u53d6\u6700\u5927\uff0c\u6b63\u6570\u53d6\u6700\u5c0f)\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u7b2c\u4e00\u4e2a\u6570\u7ec4\u5730\u5740\uff0ca1\u5305\u542b\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u5730\u5740\n    # a2\u5305\u542b\u6570\u7ec4\u957f\u5ea6\uff0ca3\u5305\u542b\u76ee\u6807\u5730\u5740\n\n    # \u8bbe\u7f6e\u5411\u91cf\u73af\u5883\n    vsetvli t0, a2, e32, m2       # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u5143\u7d20\n\n    # \u8f7d\u5165\u5411\u91cf\u6570\u636e\n    vle32.v v2, (a0)              # \u52a0\u8f7d\u7b2c\u4e00\u4e2a\u6570\u7ec4\u5230v2\n    vle32.v v4, (a1)              # \u52a0\u8f7d\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u5230v4\n\n    # \u521b\u5efa\u63a9\u7801 - \u6807\u8bb0\u8d1f\u6570\n    vmslt.vx v0, v2, zero         # v0.mask[i] = v2[i] &lt; 0 ? 1 : 0\n\n    # \u9009\u62e9\u6027\u6267\u884c\u6700\u5927\u6216\u6700\u5c0f\u503c\u64cd\u4f5c\n    vmax.vv v6, v2, v4, v0.t      # \u5bf9\u8d1f\u6570: v6 = max(v2, v4)\n    vmin.vv v6, v2, v4, !v0.t     # \u5bf9\u6b63\u6570: v6 = min(v2, v4)\n\n    # \u5b58\u50a8\u7ed3\u679c\n    vse32.v v6, (a3)              # \u4fdd\u5b58\u7ed3\u679c\u5230\u76ee\u6807\u5730\u5740\n</code></pre>"},{"location":"RVV/ISA/int_arith/#3_1","title":"3. \u9971\u548c\u52a0\u6cd5\u7528\u4e8e\u56fe\u50cf\u5904\u7406","text":"<pre><code># \u56fe\u50cf\u589e\u4eae\u5904\u7406 - \u6dfb\u52a0\u4eae\u5ea6\u503c\u4e14\u9632\u6b62\u6ea2\u51fa\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u56fe\u50cf\u6570\u636e\u5730\u5740\uff0ca1\u5305\u542b\u50cf\u7d20\u6570\u91cf\n    # a2\u5305\u542b\u4eae\u5ea6\u589e\u91cf\u503c\uff0ca3\u5305\u542b\u7ed3\u679c\u5730\u5740\n\n    # \u8bbe\u7f6e\u5411\u91cf\u73af\u5883\n    vsetvli t0, a1, e8, m4        # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c8\u4f4d\u5143\u7d20(\u6bcf\u50cf\u7d20\u4e00\u5b57\u8282)\n\n    # \u8f7d\u5165\u56fe\u50cf\u6570\u636e\n    vle8.v v4, (a0)               # \u52a0\u8f7d\u50cf\u7d20\u6570\u636e\n\n    # \u6267\u884c\u9971\u548c\u52a0\u6cd5 - \u589e\u52a0\u4eae\u5ea6\u4e14\u9632\u6b62\u6ea2\u51fa\n    vsaddu.vx v8, v4, a2          # v8 = sat(v4 + brightness_value)\n\n    # \u5b58\u50a8\u7ed3\u679c\n    vse8.v v8, (a3)               # \u4fdd\u5b58\u5904\u7406\u540e\u7684\u50cf\u7d20\u6570\u636e\n</code></pre>"},{"location":"RVV/ISA/int_arith/#4_1","title":"4. \u4f4d\u64cd\u4f5c\u5b9e\u73b0\u63a9\u7801\u5e94\u7528","text":"<pre><code># \u4f7f\u7528\u4f4d\u64cd\u4f5c\u5b9e\u73b0\u6570\u636e\u8fc7\u6ee4(\u4f8b\u5982\u4fdd\u7559\u7279\u5b9a\u4f4d\u5b57\u6bb5)\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u6570\u636e\u5730\u5740\uff0ca1\u5305\u542b\u6570\u636e\u6570\u91cf\n    # a2\u5305\u542b\u4f4d\u63a9\u7801\uff0ca3\u5305\u542b\u7ed3\u679c\u5730\u5740\n\n    # \u8bbe\u7f6e\u5411\u91cf\u73af\u5883\n    vsetvli t0, a1, e32, m2       # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u5143\u7d20\n\n    # \u8f7d\u5165\u6570\u636e\n    vle32.v v2, (a0)              # \u52a0\u8f7d\u6570\u636e\n\n    # \u5e94\u7528\u4f4d\u63a9\u7801\n    vand.vx v4, v2, a2            # \u5e94\u7528AND\u63a9\u7801\uff0c\u4fdd\u7559\u6307\u5b9a\u4f4d\n\n    # \u5b58\u50a8\u7ed3\u679c\n    vse32.v v4, (a3)              # \u4fdd\u5b58\u8fc7\u6ee4\u540e\u7684\u6570\u636e\n</code></pre>"},{"location":"RVV/ISA/int_arith/#5_1","title":"5. \u590d\u5408\u8fd0\u7b97\u4e0e\u5411\u91cf\u94fe","text":"<pre><code># \u5b9e\u73b0\u590d\u6742\u516c\u5f0f\u5982 y = (a + b) * (a - b)\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542ba\u6570\u7ec4\u5730\u5740\uff0ca1\u5305\u542bb\u6570\u7ec4\u5730\u5740\n    # a2\u5305\u542b\u5143\u7d20\u6570\u91cf\uff0ca3\u5305\u542b\u7ed3\u679c\u5730\u5740\n\n    # \u8bbe\u7f6e\u5411\u91cf\u73af\u5883\n    vsetvli t0, a2, e32, m2       # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u5143\u7d20\n\n    # \u8f7d\u5165\u8f93\u5165\u6570\u636e\n    vle32.v v2, (a0)              # \u52a0\u8f7da\u6570\u7ec4\n    vle32.v v4, (a1)              # \u52a0\u8f7db\u6570\u7ec4\n\n    # \u8ba1\u7b97(a+b)\u548c(a-b)\n    vadd.vv v6, v2, v4            # v6 = a + b\n    vsub.vv v8, v2, v4            # v8 = a - b\n\n    # \u8ba1\u7b97\u6700\u7ec8\u7ed3\u679c(a+b)*(a-b)\n    vmul.vv v10, v6, v8           # v10 = v6 * v8 = (a+b)*(a-b)\n\n    # \u5b58\u50a8\u7ed3\u679c\n    vse32.v v10, (a3)             # \u4fdd\u5b58\u8ba1\u7b97\u7ed3\u679c\n</code></pre>"},{"location":"RVV/ISA/int_arith/#6_1","title":"6. \u5411\u91cf\u5bbd\u5316\u793a\u4f8b","text":"<pre><code># \u4f7f\u7528\u5bbd\u5316\u6307\u4ee4\u5904\u7406\u4f4e\u7cbe\u5ea6\u6570\u636e\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b8\u4f4d\u6570\u636e\u5730\u5740\uff0ca1\u5305\u542b\u5143\u7d20\u6570\u91cf\n    # a2\u5305\u542b\u7ed3\u679c\u5730\u5740\n\n    # \u8bbe\u7f6e\u5411\u91cf\u73af\u5883 - \u5904\u74068\u4f4d\u6570\u636e\n    vsetvli t0, a1, e8, m1        # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c8\u4f4d\u5143\u7d20\n\n    # \u8f7d\u51658\u4f4d\u6570\u636e\n    vle8.v v1, (a0)               # \u52a0\u8f7d8\u4f4d\u6570\u636e\n\n    # \u4f7f\u7528\u5bbd\u5316\u52a0\u6cd5 - \u7ed3\u679c\u6269\u5c55\u4e3a16\u4f4d\n    vwaddu.vx v2, v1, zero        # v2 = \u96f6\u6269\u5c55(v1)\uff0c16\u4f4d\u7ed3\u679c\n\n    # \u7ee7\u7eed\u5bbd\u5316\u523032\u4f4d\n    vsetvli t0, a1, e16, m2       # \u5207\u6362\u523016\u4f4d\u5143\u7d20\u6a21\u5f0f\n    vwaddu.vx v4, v2, zero        # v4 = \u96f6\u6269\u5c55(v2)\uff0c32\u4f4d\u7ed3\u679c\n\n    # \u5b58\u50a832\u4f4d\u7ed3\u679c\n    vsetvli t0, a1, e32, m4       # \u5207\u6362\u523032\u4f4d\u5143\u7d20\u6a21\u5f0f\n    vse32.v v4, (a2)              # \u4fdd\u5b5832\u4f4d\u7ed3\u679c\n</code></pre> <p>\u8fd9\u4e9b\u793a\u4f8b\u5c55\u793a\u4e86\u5411\u91cf\u7b97\u672f\u548c\u903b\u8f91\u6307\u4ee4\u5728\u5404\u79cd\u6570\u636e\u5904\u7406\u573a\u666f\u4e2d\u7684\u5e94\u7528\uff0c\u4ece\u7b80\u5355\u7684\u5143\u7d20\u8fd0\u7b97\u5230\u590d\u6742\u7684\u6761\u4ef6\u5904\u7406\u548c\u590d\u5408\u7b97\u6cd5\u3002\u901a\u8fc7\u7ec4\u5408\u8fd9\u4e9b\u6307\u4ee4\uff0c\u53ef\u4ee5\u9ad8\u6548\u5b9e\u73b0\u5404\u79cd\u5411\u91cf\u8ba1\u7b97\u4efb\u52a1\u3002</p>"},{"location":"RVV/ISA/permutation/","title":"RISC-V \u5411\u91cf\u7f6e\u6362\u4e0e\u79fb\u52a8\u6307\u4ee4\u6982\u8ff0","text":""},{"location":"RVV/ISA/permutation/#_1","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u5411\u91cf\u7f6e\u6362(Vector Permutation)\u548c\u79fb\u52a8(Move)\u6307\u4ee4\u7528\u4e8e\u91cd\u6392\u5143\u7d20\u987a\u5e8f\u548c\u4f20\u8f93\u6570\u636e\uff0c\u662f\u5411\u91cf\u5904\u7406\u4e2d\u6570\u636e\u91cd\u7ec4\u548c\u7ba1\u7406\u7684\u5173\u952e\u6307\u4ee4\u96c6\u3002</p>"},{"location":"RVV/ISA/permutation/#_2","title":"\u6307\u4ee4\u5206\u7c7b","text":"<p>RISC-V \u5411\u91cf\u7f6e\u6362\u4e0e\u79fb\u52a8\u6307\u4ee4\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a</p> <ol> <li>\u6ed1\u52a8\u6307\u4ee4 - \u5728\u5411\u91cf\u5bc4\u5b58\u5668\u4e2d\u4e0a\u4e0b\u6ed1\u52a8\u5143\u7d20</li> <li>\u7d22\u5f15\u6536\u96c6\u6307\u4ee4 - \u6839\u636e\u7d22\u5f15\u5411\u91cf\u4ece\u6e90\u5411\u91cf\u6536\u96c6\u5143\u7d20</li> <li>\u538b\u7f29/\u6269\u5c55\u6307\u4ee4 - \u6839\u636e\u63a9\u7801\u4f4d\u538b\u7f29\u6216\u6269\u5c55\u5411\u91cf\u5143\u7d20</li> <li>\u79fb\u52a8\u6307\u4ee4 - \u5728\u6807\u91cf\u548c\u5411\u91cf\u5bc4\u5b58\u5668\u95f4\uff0c\u6216\u5411\u91cf\u5bc4\u5b58\u5668\u95f4\u79fb\u52a8\u6570\u636e</li> <li>\u5bc4\u5b58\u5668\u7ec4\u6307\u4ee4 - \u6574\u7ec4\u5411\u91cf\u5bc4\u5b58\u5668\u4f20\u8f93</li> </ol>"},{"location":"RVV/ISA/permutation/#_3","title":"\u6307\u4ee4\u683c\u5f0f\u4e0e\u529f\u80fd","text":""},{"location":"RVV/ISA/permutation/#1","title":"1. \u5411\u91cf\u6ed1\u52a8\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vslideupvxvslideupvi-","title":"<code>vslideup.vx</code>/<code>vslideup.vi</code> - \u5411\u91cf\u5143\u7d20\u5411\u4e0a\u6ed1\u52a8(\u56fa\u5b9a\u504f\u79fb/\u7acb\u5373\u6570)","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(0 \\leq i &lt; \\max(\\text{vstart}, \\text{OFFSET})\\) \u5143\u7d20\u4e0d\u53d8 \\(\\max(\\text{vstart}, \\text{OFFSET}) \\leq i &lt; \\text{vl}\\) \\(\\text{vd}[i] = \\text{vs2}[i-\\text{OFFSET}]\\) (\u4ec5\u5f53 v0.mask[i]=1 \u65f6) \\(\\text{vl} \\leq i &lt; \\text{VLMAX}\\) \u6839\u636e\u5c3e\u90e8\u7b56\u7565\u5904\u7406"},{"location":"RVV/ISA/permutation/#vslidedownvxvslidedownvi-","title":"<code>vslidedown.vx</code>/<code>vslidedown.vi</code> - \u5411\u91cf\u5143\u7d20\u5411\u4e0b\u6ed1\u52a8(\u56fa\u5b9a\u504f\u79fb/\u7acb\u5373\u6570)","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(0 \\leq i &lt; \\text{vstart}\\) \u5143\u7d20\u4e0d\u53d8 \\(\\text{vstart} \\leq i &lt; \\text{vl}\\) \\(\\text{vd}[i] = \\text{vs2}[i+\\text{OFFSET}]\\) (\u4ec5\u5f53 v0.mask[i]=1 \u65f6\uff0c\u4e14 i+OFFSET &lt; vl\uff0c\u5426\u5219\u4e3a 0) \\(\\text{vl} \\leq i &lt; \\text{VLMAX}\\) \u6839\u636e\u5c3e\u90e8\u7b56\u7565\u5904\u7406"},{"location":"RVV/ISA/permutation/#vslide1upvx-1","title":"<code>vslide1up.vx</code> - \u5411\u91cf\u5143\u7d20\u5411\u4e0a\u6ed1\u52a8 1 \u5e76\u63d2\u5165\u6807\u91cf","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(0 \\leq i &lt; \\text{vstart}\\) \u5143\u7d20\u4e0d\u53d8 \\(i = \\text{vstart} = 0\\) \\(\\text{vd}[0] = \\text{rs1}\\) (\u4ec5\u5f53 v0.mask[0]=1 \u65f6) \\(\\max(1, \\text{vstart}) \\leq i &lt; \\text{vl}\\) \\(\\text{vd}[i] = \\text{vs2}[i-1]\\) (\u4ec5\u5f53 v0.mask[i]=1 \u65f6) \\(\\text{vl} \\leq i &lt; \\text{VLMAX}\\) \u6839\u636e\u5c3e\u90e8\u7b56\u7565\u5904\u7406"},{"location":"RVV/ISA/permutation/#vslide1downvx-1","title":"<code>vslide1down.vx</code> - \u5411\u91cf\u5143\u7d20\u5411\u4e0b\u6ed1\u52a8 1 \u5e76\u63d2\u5165\u6807\u91cf","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(0 \\leq i &lt; \\text{vstart}\\) \u5143\u7d20\u4e0d\u53d8 \\(\\text{vstart} \\leq i &lt; \\text{vl}-1\\) \\(\\text{vd}[i] = \\text{vs2}[i+1]\\) (\u4ec5\u5f53 v0.mask[i]=1 \u65f6) \\(i = \\text{vl}-1\\) \\(\\text{vd}[\\text{vl}-1] = \\text{rs1}\\) (\u4ec5\u5f53 v0.mask[vl-1]=1 \u65f6) \\(\\text{vl} \\leq i &lt; \\text{VLMAX}\\) \u6839\u636e\u5c3e\u90e8\u7b56\u7565\u5904\u7406"},{"location":"RVV/ISA/permutation/#2","title":"2. \u7d22\u5f15\u6536\u96c6\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vrgathervv-","title":"<code>vrgather.vv</code> - \u4f7f\u7528\u5411\u91cf\u7d22\u5f15\u8fdb\u884c\u6536\u96c6","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(0 \\leq i &lt; \\text{vstart}\\) \u5143\u7d20\u4e0d\u53d8 \\(\\text{vstart} \\leq i &lt; \\text{vl}\\) \\(\\text{vd}[i] = (\\text{vs1}[i] &lt; \\text{vl}) ? \\text{vs2}[\\text{vs1}[i]] : 0\\) (\u4ec5\u5f53 v0.mask[i]=1 \u65f6) \\(\\text{vl} \\leq i &lt; \\text{VLMAX}\\) \u6839\u636e\u5c3e\u90e8\u7b56\u7565\u5904\u7406"},{"location":"RVV/ISA/permutation/#vrgathervx-","title":"<code>vrgather.vx</code> - \u4f7f\u7528\u6807\u91cf\u7d22\u5f15\u8fdb\u884c\u6536\u96c6","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(0 \\leq i &lt; \\text{vstart}\\) \u5143\u7d20\u4e0d\u53d8 \\(\\text{vstart} \\leq i &lt; \\text{vl}\\) \\(\\text{vd}[i] = (\\text{rs1} &lt; \\text{vl}) ? \\text{vs2}[\\text{rs1}] : 0\\) (\u4ec5\u5f53 v0.mask[i]=1 \u65f6) \\(\\text{vl} \\leq i &lt; \\text{VLMAX}\\) \u6839\u636e\u5c3e\u90e8\u7b56\u7565\u5904\u7406"},{"location":"RVV/ISA/permutation/#vrgathervi-","title":"<code>vrgather.vi</code> - \u4f7f\u7528\u7acb\u5373\u6570\u7d22\u5f15\u8fdb\u884c\u6536\u96c6","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(0 \\leq i &lt; \\text{vstart}\\) \u5143\u7d20\u4e0d\u53d8 \\(\\text{vstart} \\leq i &lt; \\text{vl}\\) \\(\\text{vd}[i] = (\\text{imm} &lt; \\text{vl}) ? \\text{vs2}[\\text{imm}] : 0\\) (\u4ec5\u5f53 v0.mask[i]=1 \u65f6) \\(\\text{vl} \\leq i &lt; \\text{VLMAX}\\) \u6839\u636e\u5c3e\u90e8\u7b56\u7565\u5904\u7406"},{"location":"RVV/ISA/permutation/#vrgatherei16vv-16","title":"<code>vrgatherei16.vv</code> - \u4f7f\u7528 16 \u4f4d\u5411\u91cf\u7d22\u5f15\u6536\u96c6","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(0 \\leq i &lt; \\text{vstart}\\) \u5143\u7d20\u4e0d\u53d8 \\(\\text{vstart} \\leq i &lt; \\text{vl}\\) \\(\\text{vd}[i] = (\\text{vs1}[i] &lt; \\text{vl}) ? \\text{vs2}[\\text{vs1}[i]] : 0\\) (\u4ec5\u5f53 v0.mask[i]=1 \u65f6) \\(\\text{vl} \\leq i &lt; \\text{VLMAX}\\) \u6839\u636e\u5c3e\u90e8\u7b56\u7565\u5904\u7406"},{"location":"RVV/ISA/permutation/#3","title":"3. \u538b\u7f29/\u6269\u5c55\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vcompressvm-","title":"<code>vcompress.vm</code> - \u5411\u91cf\u63a9\u7801\u538b\u7f29","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(0 \\leq i &lt; \\text{vstart}\\) \u6e90\u5143\u7d20\u4e0d\u53c2\u4e0e\u538b\u7f29 \\(\\text{vstart} \\leq i &lt; \\text{vl}\\) \u5bf9\u4e8e\u6bcf\u4e2a\\(\\text{vs1}[i]=1\\)\uff0c\u6267\u884c\\(\\text{vd}[j++] = \\text{vs2}[i]\\)\uff08j \u4ece 0 \u5f00\u59cb\uff09 \u5269\u4f59\u76ee\u6807\u4f4d\u7f6e \\(j\\) \u5230 \\(\\text{vl}-1\\) \u5143\u7d20\u4e0d\u53d8\uff08\u8fd9\u4e9b\u662f\u672a\u88ab\u5199\u5165\u7684\u76ee\u6807\u4f4d\u7f6e\uff09 \\(\\text{vl} \\leq j &lt; \\text{VLMAX}\\) \u6839\u636e\u5c3e\u90e8\u7b56\u7565\u5904\u7406 <p>\u6ce8\u610f\uff1a\u4e0e\u5176\u4ed6\u5411\u91cf\u6307\u4ee4\u4e0d\u540c\uff0c<code>vcompress.vm</code>\u76f4\u63a5\u4f7f\u7528 vs1 \u4f5c\u4e3a\u538b\u7f29\u63a9\u7801\uff0c\u4e0d\u4f7f\u7528 v0.mask \u8fdb\u884c\u6761\u4ef6\u6267\u884c\u3002</p>"},{"location":"RVV/ISA/permutation/#4-","title":"4. \u5411\u91cf-\u6807\u91cf\u79fb\u52a8\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vmvsx-","title":"<code>vmv.s.x</code> - \u6807\u91cf\u6574\u6570\u5199\u5165\u5411\u91cf\u5143\u7d20","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(i = 0\\) \\(\\text{vd}[0] = \\text{rs1}\\) \\(1 \\leq i &lt; \\text{VLMAX}\\) \u5143\u7d20\u4e0d\u53d8"},{"location":"RVV/ISA/permutation/#vmvxs-","title":"<code>vmv.x.s</code> - \u5411\u91cf\u5143\u7d20\u8bfb\u5165\u6807\u91cf\u6574\u6570\u5bc4\u5b58\u5668","text":"\u64cd\u4f5c \u5143\u7d20\u5904\u7406 \u8bfb\u53d6\u64cd\u4f5c \\(\\text{rd} = \\text{vs2}[0]\\) (\u6709\u7b26\u53f7\u6269\u5c55\u5230 XLEN)"},{"location":"RVV/ISA/permutation/#vfmvsf-","title":"<code>vfmv.s.f</code> - \u6807\u91cf\u6d6e\u70b9\u6570\u5199\u5165\u5411\u91cf\u5143\u7d20","text":"\u7d22\u5f15\u8303\u56f4 \u5143\u7d20\u5904\u7406 \\(i = 0\\) \\(\\text{vd}[0] = \\text{fs1}\\) \\(1 \\leq i &lt; \\text{VLMAX}\\) \u5143\u7d20\u4e0d\u53d8"},{"location":"RVV/ISA/permutation/#vfmvfs-","title":"<code>vfmv.f.s</code> - \u5411\u91cf\u5143\u7d20\u8bfb\u5165\u6807\u91cf\u6d6e\u70b9\u5bc4\u5b58\u5668","text":"\u64cd\u4f5c \u5143\u7d20\u5904\u7406 \u8bfb\u53d6\u64cd\u4f5c \\(\\text{fd} = \\text{vs2}[0]\\)"},{"location":"RVV/ISA/permutation/#5","title":"5. \u5411\u91cf\u6574\u7ec4\u79fb\u52a8\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vmv1rvvmv2rvvmv4rvvmv8rv-","title":"<code>vmv1r.v</code>/<code>vmv2r.v</code>/<code>vmv4r.v</code>/<code>vmv8r.v</code> - \u590d\u5236\u5411\u91cf\u5bc4\u5b58\u5668\u7ec4","text":"\u5bc4\u5b58\u5668\u8303\u56f4 \u5143\u7d20\u5904\u7406 \u6574\u4e2a\u5bc4\u5b58\u5668\u7ec4 \u5c06\u6e90\u5bc4\u5b58\u5668\u7ec4\u7684\u6240\u6709\u4f4d\u6309\u5b57\u8282\u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u7ec4 <p>SPIKE \u5b9e\u73b0 (\u4ee5 <code>vmv1r.v</code> \u4e3a\u4f8b):</p> <pre><code>require_vector(true);\nrequire_align(insn.rd(), 1);\nrequire_align(insn.rs2(), 1);\n\nreg_t vl = 0;\nconst reg_t rd_num = insn.rd();\nconst reg_t rs2_num = insn.rs2();\n\nfor (reg_t i=0; i&lt;P.VU.vlenb; ++i) {\n  P.VU.elt&lt;uint8_t&gt;(rd_num, 0, i) = P.VU.elt&lt;uint8_t&gt;(rs2_num, 0, i);\n}\n</code></pre> <p>\u7279\u70b9:</p> <ol> <li>\u8fd9\u4e9b\u6307\u4ee4\u76f4\u63a5\u64cd\u4f5c\u539f\u59cb\u5bc4\u5b58\u5668\u4f4d\uff0c\u4e0d\u8003\u8651\u5143\u7d20\u8fb9\u754c</li> <li>\u590d\u5236\u662f\u6309\u5b57\u8282\u8fdb\u884c\u7684\uff0c\u9ad8\u6548\u5feb\u901f</li> <li>\u4e0d\u4f7f\u7528\u63a9\u7801\uff0c\u4e0d\u53d7 vstart \u6216 vl \u5f71\u54cd</li> <li>\u5bc4\u5b58\u5668\u9700\u8981\u6309\u7167\u8981\u79fb\u52a8\u7684\u7ec4\u5927\u5c0f\u5bf9\u9f50(\u00bd/4/8)</li> </ol> <p>\u4f7f\u7528\u573a\u666f:</p> <ul> <li>\u5bc4\u5b58\u5668\u5907\u4efd\u4e0e\u6062\u590d</li> <li>\u5411\u91cf\u5bc4\u5b58\u5668\u4e0a\u4e0b\u6587\u5207\u6362</li> <li>\u5411\u91cf\u6570\u636e\u7684\u6574\u5757\u4f20\u8f93</li> </ul>"},{"location":"RVV/ISA/permutation/#vmvxs-_1","title":"vmv.x.s - \u5411\u91cf\u5143\u7d20\u8bfb\u5165\u6807\u91cf\u6574\u6570\u5bc4\u5b58\u5668","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vmv.x.s rd, vs2</code></p> <p>\u529f\u80fd: \u5c06\u5411\u91cf\u5bc4\u5b58\u5668 vs2 \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u8bfb\u5165\u901a\u7528\u5bc4\u5b58\u5668 rd\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>require(P.VU.vsew &gt;= e8 &amp;&amp; P.VU.vsew &lt;= e64);\nrequire_vector(true);\n\nreg_t sew = P.VU.vsew;\n\nreg_t v;\nif (sew == e8)\n  v = P.VU.elt&lt;int8_t&gt;(insn.rs2(), 0);\nelse if (sew == e16)\n  v = P.VU.elt&lt;int16_t&gt;(insn.rs2(), 0);\nelse if (sew == e32)\n  v = P.VU.elt&lt;int32_t&gt;(insn.rs2(), 0);\nelse\n  v = P.VU.elt&lt;int64_t&gt;(insn.rs2(), 0);\n\n// \u5b8c\u6210\u7b26\u53f7\u6269\u5c55\u5e76\u5199\u5165\u76ee\u6807\u5bc4\u5b58\u5668\nWRITE_RD(sext_xlen(v));\n</code></pre> <p>\u6ce8\u610f:</p> <ul> <li>\u81ea\u52a8\u5bf9\u5c0f\u4e8e XLEN \u7684\u6570\u636e\u8fdb\u884c\u7b26\u53f7\u6269\u5c55</li> <li>\u4e0d\u53d7 vstart\u3001vl \u6216\u63a9\u7801\u7684\u5f71\u54cd</li> <li>\u53ea\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20</li> </ul>"},{"location":"RVV/ISA/permutation/#6","title":"6. \u5411\u91cf\u7d22\u5f15\u751f\u6210\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vidv-","title":"vid.v - \u751f\u6210\u5411\u91cf\u7d22\u5f15","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vid.v vd, vm</code></p> <p>\u529f\u80fd: \u751f\u6210\u4ece 0 \u5f00\u59cb\u9012\u589e\u7684\u8fde\u7eed\u7d22\u5f15\u503c\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u6bcf\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>VI_VD_LOOP_BASE\nif (!is_skip(i)) {\n  switch(sew) {\n  case e8:\n    P.VU.elt&lt;uint8_t&gt;(rd_num, i) = i;\n    break;\n  case e16:\n    P.VU.elt&lt;uint16_t&gt;(rd_num, i) = i;\n    break;\n  case e32:\n    P.VU.elt&lt;uint32_t&gt;(rd_num, i) = i;\n    break;\n  default:\n    P.VU.elt&lt;uint64_t&gt;(rd_num, i) = i;\n    break;\n  }\n}\nVI_VD_LOOP_END\n</code></pre> <p>\u6ce8\u610f: \u5728 SPIKE \u4e2d\uff0c<code>VI_VD_LOOP_BASE</code>\u548c<code>VI_VD_LOOP_END</code>\u662f\u5b8f\uff0c\u5b83\u4eec\u5c55\u5f00\u540e\u5305\u542b\u4e86\u9a8c\u8bc1\u5411\u91cf\u5355\u5143\u72b6\u6001\u3001\u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\u3001\u5904\u7406\u63a9\u7801\u7b49\u901a\u7528\u4ee3\u7801\u3002\u6838\u5fc3\u64cd\u4f5c\u662f\u6839\u636e\u5143\u7d20\u5bbd\u5ea6\uff0c\u5c06\u5f53\u524d\u7d22\u5f15\u503c\u5b58\u50a8\u5230\u76f8\u5e94\u4f4d\u7f6e\u3002</p> <p>vid.v \u6307\u4ee4\u5728\u5411\u91cf\u8ba1\u7b97\u4e2d\u975e\u5e38\u6709\u7528\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u751f\u6210\u7d22\u5f15\u5411\u91cf\uff0c\u4e0e\u5176\u4ed6\u5411\u91cf\u6307\u4ee4\u7ed3\u5408\u4f7f\u7528\u5b9e\u73b0\u590d\u6742\u7684\u6570\u636e\u91cd\u7ec4\u548c\u5904\u7406\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u6cd5\u662f\u7ed3\u5408 vid.v \u548c vrgather.vv \u5b9e\u73b0\u77e9\u9635\u8f6c\u7f6e\u3002</p>"},{"location":"RVV/ISA/permutation/#viotam-","title":"viota.m - \u751f\u6210\u524d\u7f00\u548c\u7d22\u5f15\u8868","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>viota.m vd, vs2, vm</code></p> <p>\u529f\u80fd: \u5bf9 vs2 \u5411\u91cf\u4e2d\u7684\u63a9\u7801\u4f4d\u8fdb\u884c\u9012\u589e\u8ba1\u6570\uff0c\u7ed3\u679c\u653e\u5728 vd \u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>VI_CHECK_MSS(false);\n\nreg_t vl = P.VU.vl-&gt;read();\nreg_t rd_num = insn.rd();\nreg_t rs1_num = insn.rs1();\nreg_t rs2_num = insn.rs2();\nreg_t vmask = P.VU.vmask;\n\nrequire(P.VU.vflmul &gt;= P.VU.vlmul);\nrequire_align(rd_num, P.VU.vflmul);\nrequire_align(rs2_num, P.VU.vlmul);\n\n// \u521d\u59cb\u5316\u7d2f\u79ef\u8ba1\u6570\u5668\nreg_t sum = 0;\nfor (reg_t i = P.VU.vstart-&gt;read(); i &lt; vl; ++i) {\n  // \u5bc4\u5b58\u5668\u5143\u7d20\u8bbf\u95ee\n  VI_LOOP_ELEMENT_SKIP();\n\n  // \u5224\u65ad\u6e90\u5411\u91cf\u4e2d\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\u662f\u5426\u4e3a1\n  bool vs2_lsb = (P.VU.elt&lt;uint64_t&gt;(rs2_num, midx) &gt;&gt; mpos) &amp; 0x1;\n\n  // \u5199\u5165\u5f53\u524d\u7d2f\u79ef\u503c\u5e76\u53ef\u80fd\u66f4\u65b0\u7d2f\u79ef\u5668\n  VI_LOOP_ELEMENT_EDIT({\n    P.VU.elt&lt;uint64_t&gt;(rd_num, i) = sum;\n    if (vs2_lsb)\n      ++sum;\n  })\n}\n\nP.VU.vstart-&gt;write(0);\n</code></pre> <p>\u6ce8\u610f: \u5728 SPIKE \u5b9e\u73b0\u4e2d\uff0c\u4f7f\u7528\u4e86\u8bb8\u591a\u5b8f\u6765\u7b80\u5316\u4ee3\u7801\uff0c\u4f46\u6838\u5fc3\u903b\u8f91\u662f\u904d\u5386\u5411\u91cf\uff0c\u8bb0\u5f55\u4e4b\u524d\u9047\u5230\u7684\u6709\u6548\u4f4d\u6570\u91cf\uff0c\u5e76\u5c06\u8fd9\u4e2a\u7d2f\u79ef\u503c\u5199\u5165\u76ee\u6807\u5411\u91cf\u7684\u76f8\u5e94\u4f4d\u7f6e\u3002</p>"},{"location":"RVV/ISA/permutation/#spike","title":"SPIKE \u6a21\u62df\u5668\u5b9e\u73b0\u4e0e\u6307\u4ee4\u8be6\u89e3","text":""},{"location":"RVV/ISA/permutation/#1_1","title":"1. \u5411\u91cf\u6ed1\u52a8\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vslide1upvx-1_1","title":"vslide1up.vx - \u5411\u91cf\u5143\u7d20\u5411\u4e0a\u6ed1\u52a8 1 \u5e76\u63d2\u5165\u6807\u91cf","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vslide1up.vx vd, vs2, rs1, vm</code></p> <p>\u529f\u80fd: \u5c06 vs2 \u4e2d\u7684\u5143\u7d20\u5411\u4e0a\u6ed1\u52a8 1 \u4e2a\u4f4d\u7f6e\uff0c\u5e76\u5728\u4f4d\u7f6e 0 \u63d2\u5165 rs1 \u4e2d\u7684\u6807\u91cf\u503c\u3002</p> <p>SPIKE \u5b8f\u5c55\u5f00\u5206\u6790: <code>vslide1up.vx</code>\u7684\u5b9e\u73b0\u53ef\u4ee5\u5c55\u5f00\u4e3a:</p> <pre><code>// \u6838\u5fc3\u64cd\u4f5c\u6b65\u9aa4\n// 1. \u9a8c\u8bc1\u64cd\u4f5c\u6761\u4ef6\nrequire(P.VU.vsew &gt;= e8 &amp;&amp; P.VU.vsew &lt;= e64);\nrequire_vector(true);\nrequire_align(insn.rd(), P.VU.vflmul);\nrequire_align(insn.rs2(), P.VU.vflmul);\n\n// 2. \u83b7\u53d6\u5411\u91cf\u957f\u5ea6\u548c\u64cd\u4f5c\u6570\nreg_t vl = P.VU.vl-&gt;read();\nreg_t rd_num = insn.rd();\nreg_t rs1_num = insn.rs1();\nreg_t rs2_num = insn.rs2();\nreg_t xrm = 0;\nreg_t scalar_val = RS1;  // \u83b7\u53d6\u6807\u91cf\u503c\n\n// 3. \u904d\u5386\u5904\u7406\u6bcf\u4e2a\u5143\u7d20\nfor (reg_t i = P.VU.vstart-&gt;read(); i &lt; vl; ++i) {\n  // 3.1 \u63a9\u7801\u68c0\u67e5\n  bool use_result = true;\n  if (!P.VU.get_vm()-&gt;read()) {\n    // \u68c0\u67e5\u63a9\u7801\u4f4d\n    const int mpos = i / 8;\n    const int moff = i % 8;\n    use_result = (P.VU.get_mask(mpos) &gt;&gt; moff) &amp; 0x1;\n  }\n\n  // 3.2 \u5143\u7d20\u5904\u7406\n  if (use_result) {\n    if (i == 0) {\n      // \u7b2c\u4e00\u4e2a\u5143\u7d20\u4f7f\u7528\u6807\u91cfrs1\u7684\u503c\n      P.VU.set_elt&lt;uint32_t&gt;(rd_num, 0, scalar_val);  // \u793a\u4f8b\u4f7f\u752832\u4f4d\u5143\u7d20\n    } else {\n      // \u5176\u4ed6\u5143\u7d20\u4ecevs2\u7684i-1\u4f4d\u7f6e\u83b7\u53d6\n      uint32_t val = P.VU.elt&lt;uint32_t&gt;(rs2_num, i-1);\n      P.VU.set_elt&lt;uint32_t&gt;(rd_num, i, val);\n    }\n  }\n}\n\n// 4. \u91cd\u7f6evstart\u5bc4\u5b58\u5668\nP.VU.vstart-&gt;write(0);\n</code></pre> <p>\u5728\u8fd9\u4e2a\u6307\u4ee4\u4e2d\uff0c\u5173\u952e\u64cd\u4f5c\u662f\u5c06\u5411\u91cf\u5143\u7d20\"\u5411\u4e0a\u6ed1\u52a8\"\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u540c\u65f6\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u63d2\u5165\u6807\u91cf\u503c\u3002\u5bf9\u4e8e\u63a9\u7801\u5904\u7406\uff0c\u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\u7684\u63a9\u7801\u4f4d\u4e3a 0\uff0c\u5219\u8be5\u4f4d\u7f6e\u7684\u503c\u4fdd\u6301\u4e0d\u53d8\uff08\u5bf9\u5e94\u64cd\u4f5c\u88ab\u8df3\u8fc7\uff09\u3002</p>"},{"location":"RVV/ISA/permutation/#vslidedownvx-","title":"vslidedown.vx - \u5411\u91cf\u5143\u7d20\u5411\u4e0b\u6ed1\u52a8\u6307\u4ee4","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vslidedown.vx vd, vs2, rs1, vm</code></p> <p>\u529f\u80fd: \u5c06 vs2 \u4e2d\u7684\u5143\u7d20\u5411\u4e0b\u6ed1\u52a8 rs1 \u4e2a\u4f4d\u7f6e\u3002</p> <p>SPIKE \u5b8f\u5c55\u5f00\u5206\u6790:</p> <pre><code>// \u6838\u5fc3\u5b9e\u73b0\n// 1. \u9a8c\u8bc1\u64cd\u4f5c\u6761\u4ef6\nrequire(P.VU.vsew &gt;= e8 &amp;&amp; P.VU.vsew &lt;= e64);\nrequire_vector(true);\nrequire_align(insn.rd(), P.VU.vflmul);\nrequire_align(insn.rs2(), P.VU.vflmul);\n\n// 2. \u83b7\u53d6\u5411\u91cf\u957f\u5ea6\u548c\u64cd\u4f5c\u6570\nreg_t vl = P.VU.vl-&gt;read();\nreg_t rd_num = insn.rd();\nreg_t rs1_num = insn.rs1();\nreg_t rs2_num = insn.rs2();\nreg_t offset = RS1;  // \u4ece\u5bc4\u5b58\u5668\u83b7\u53d6\u6ed1\u52a8\u504f\u79fb\u91cf\n\n// 3. \u904d\u5386\u6bcf\u4e2a\u76ee\u6807\u5143\u7d20\nfor (reg_t i = P.VU.vstart-&gt;read(); i &lt; vl; ++i) {\n  // 3.1 \u63a9\u7801\u68c0\u67e5\n  bool use_result = true;\n  if (!P.VU.get_vm()-&gt;read()) {\n    // \u68c0\u67e5\u63a9\u7801\u4f4d\n    const int mpos = i / 8;\n    const int moff = i % 8;\n    use_result = (P.VU.get_mask(mpos) &gt;&gt; moff) &amp; 0x1;\n  }\n\n  // 3.2 \u5143\u7d20\u5904\u7406\n  if (use_result) {\n    const reg_t src_idx = i + offset;  // \u8ba1\u7b97\u6e90\u7d22\u5f15\n    if (src_idx &gt;= vl) {\n      // \u8d85\u51fa\u8303\u56f4\u7684\u5143\u7d20\u8bbe\u4e3a0\n      P.VU.set_elt&lt;uint32_t&gt;(rd_num, i, 0);\n    } else {\n      // \u4ece\u6e90\u4f4d\u7f6e\u83b7\u53d6\u5143\u7d20\n      uint32_t val = P.VU.elt&lt;uint32_t&gt;(rs2_num, src_idx);\n      P.VU.set_elt&lt;uint32_t&gt;(rd_num, i, val);\n    }\n  }\n}\n\n// 4. \u91cd\u7f6evstart\u5bc4\u5b58\u5668\nP.VU.vstart-&gt;write(0);\n</code></pre> <p>\u6ed1\u52a8\u6307\u4ee4\u7684\u6838\u5fc3\u539f\u7406\u662f\u8ba1\u7b97\u76ee\u6807\u7d22\u5f15\u548c\u6e90\u7d22\u5f15\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\u3002\u5728<code>vslidedown</code>\u4e2d\uff0c\u7d22\u5f15\u6620\u5c04\u4e3a<code>vd[i] = vs2[i+offset]</code>\uff0c\u800c\u5728<code>vslideup</code>\u4e2d\uff0c\u6620\u5c04\u4e3a<code>vd[i+offset] = vs2[i]</code>\u3002</p>"},{"location":"RVV/ISA/permutation/#2_1","title":"2. \u7d22\u5f15\u6536\u96c6\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vrgathervv-_1","title":"vrgather.vv - \u4f7f\u7528\u5411\u91cf\u7d22\u5f15\u8fdb\u884c\u6536\u96c6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vrgather.vv vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u6839\u636e\u5411\u91cf vs1 \u4e2d\u7684\u7d22\u5f15\u503c\uff0c\u4ece vs2 \u4e2d\u6536\u96c6\u5143\u7d20\u5230 vd\u3002</p> <p>SPIKE \u5b8f\u5c55\u5f00\u5206\u6790:</p> <pre><code>// \u6838\u5fc3\u5b9e\u73b0\n// 1. \u9a8c\u8bc1\u64cd\u4f5c\u6761\u4ef6\nrequire(P.VU.vsew &gt;= e8 &amp;&amp; P.VU.vsew &lt;= e64);\nrequire_vector(true);\nrequire_align(insn.rd(), P.VU.vflmul);\nrequire_align(insn.rs2(), P.VU.vflmul);\n\n// 2. \u83b7\u53d6\u5411\u91cf\u957f\u5ea6\u548c\u64cd\u4f5c\u6570\nreg_t vl = P.VU.vl-&gt;read();\nreg_t rd_num = insn.rd();\nreg_t rs1_num = insn.rs1();\nreg_t rs2_num = insn.rs2();\n\n// 3. \u904d\u5386\u5904\u7406\u6bcf\u4e2a\u5143\u7d20\nfor (reg_t i = P.VU.vstart-&gt;read(); i &lt; vl; ++i) {\n  // 3.1 \u63a9\u7801\u68c0\u67e5\n  bool use_result = true;\n  if (!P.VU.get_vm()-&gt;read()) {\n    // \u68c0\u67e5\u63a9\u7801\u4f4d\n    const int mpos = i / 8;\n    const int moff = i % 8;\n    use_result = (P.VU.get_mask(mpos) &gt;&gt; moff) &amp; 0x1;\n  }\n\n  // 3.2 \u5143\u7d20\u5904\u7406\n  if (use_result) {\n    // \u83b7\u53d6\u7d22\u5f15\u5411\u91cf\u7684\u503c\n    const uint64_t idx = P.VU.elt&lt;uint64_t&gt;(rs1_num, i);\n\n    // \u9a8c\u8bc1\u7d22\u5f15\u8303\u56f4\n    if (idx &gt;= vl) {\n      // \u8d85\u51fa\u8303\u56f4\u7684\u7d22\u5f15\u7ed3\u679c\u4e3a0\n      P.VU.set_elt&lt;uint32_t&gt;(rd_num, i, 0);\n    } else {\n      // \u4ece\u6e90\u4f4d\u7f6e\u83b7\u53d6\u5143\u7d20\n      uint32_t val = P.VU.elt&lt;uint32_t&gt;(rs2_num, idx);\n      P.VU.set_elt&lt;uint32_t&gt;(rd_num, i, val);\n    }\n  }\n}\n\n// 4. \u91cd\u7f6evstart\u5bc4\u5b58\u5668\nP.VU.vstart-&gt;write(0);\n</code></pre> <p><code>vrgather</code>\u6307\u4ee4\u7cfb\u5217\u5b9e\u73b0\u4e86\u4e00\u79cd\u95f4\u63a5\u5bfb\u5740\u7684\u65b9\u5f0f\uff0c\u5141\u8bb8\u901a\u8fc7\u7d22\u5f15\u5411\u91cf\u6765\u6253\u4e71\u6216\u91cd\u7ec4\u539f\u59cb\u5411\u91cf\u7684\u5143\u7d20\u3002\u8fd9\u76f8\u5f53\u4e8e\u5b9e\u73b0\u4e86\u4e00\u4e2a\u67e5\u627e\u8868\u529f\u80fd\uff0c\u5141\u8bb8\u7075\u6d3b\u7684\u6570\u636e\u91cd\u7ec4\u3002</p>"},{"location":"RVV/ISA/permutation/#3-","title":"3. \u5411\u91cf-\u6807\u91cf\u79fb\u52a8\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vmvsx-_1","title":"vmv.s.x - \u6807\u91cf\u6574\u6570\u5199\u5165\u5411\u91cf\u5143\u7d20","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vmv.s.x vd, rs1</code></p> <p>\u529f\u80fd: \u5c06\u901a\u7528\u5bc4\u5b58\u5668 rs1 \u4e2d\u7684\u6574\u6570\u503c\u5199\u5165\u5411\u91cf\u5bc4\u5b58\u5668 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// 1. \u9a8c\u8bc1\u5411\u91cf\u6269\u5c55\u72b6\u6001\nrequire(P.VU.vsew &gt;= e8 &amp;&amp; P.VU.vsew &lt;= e64);\nrequire_vector(true);\n\n// 2. \u83b7\u53d6\u6e90\u5bc4\u5b58\u5668\u503c\u5e76\u5199\u5165\u5411\u91cf\u5bc4\u5b58\u5668\u7b2c\u4e00\u4e2a\u5143\u7d20\nreg_t sew = P.VU.vsew;\n\nif (sew == e8)\n  P.VU.elt&lt;uint8_t&gt;(insn.rd(), 0) = RS1;\nelse if (sew == e16)\n  P.VU.elt&lt;uint16_t&gt;(insn.rd(), 0) = RS1;\nelse if (sew == e32)\n  P.VU.elt&lt;uint32_t&gt;(insn.rd(), 0) = RS1;\nelse\n  P.VU.elt&lt;uint64_t&gt;(insn.rd(), 0) = RS1;\n</code></pre> <p>\u6ce8\u610f:</p> <ul> <li>\u8fd9\u6761\u6307\u4ee4\u4e0d\u53d7 vstart\u3001vl \u6216\u63a9\u7801\u7684\u5f71\u54cd</li> <li>\u53ea\u4fee\u6539\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u4ed6\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8</li> <li>\u652f\u6301\u4e0d\u540c\u7684\u5143\u7d20\u5bbd\u5ea6(8/16/32/64 \u4f4d)</li> <li>\u8fd9\u662f\u4e00\u4e2a\u4e13\u95e8\u7684\u6307\u4ee4\uff0c\u4e0d\u5c5e\u4e8e\u5e38\u89c4\u5411\u91cf\u6307\u4ee4\u96c6</li> </ul>"},{"location":"RVV/ISA/permutation/#vmvxs-_2","title":"vmv.x.s - \u5411\u91cf\u5143\u7d20\u8bfb\u5165\u6807\u91cf\u6574\u6570\u5bc4\u5b58\u5668","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vmv.x.s rd, vs2</code></p> <p>\u529f\u80fd: \u5c06\u5411\u91cf\u5bc4\u5b58\u5668 vs2 \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u8bfb\u5165\u901a\u7528\u5bc4\u5b58\u5668 rd\u3002</p> <p>SPIKE \u5b8f\u5c55\u5f00\u5206\u6790:</p> <pre><code>// \u6838\u5fc3\u5b9e\u73b0\n// 1. \u9a8c\u8bc1\u5411\u91cf\u6269\u5c55\u72b6\u6001\nrequire(P.VU.vsew &gt;= e8 &amp;&amp; P.VU.vsew &lt;= e64);\nrequire_vector(true);\n\n// 2. \u8bfb\u53d6\u5411\u91cf\u5143\u7d20\u5e76\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\nreg_t v = 0;\nswitch (P.VU.vsew) {\n  case e8:\n    v = sign_extend(P.VU.elt&lt;int8_t&gt;(insn.rs2(), 0), 8);\n    break;\n  case e16:\n    v = sign_extend(P.VU.elt&lt;int16_t&gt;(insn.rs2(), 0), 16);\n    break;\n  case e32:\n    v = sign_extend(P.VU.elt&lt;int32_t&gt;(insn.rs2(), 0), 32);\n    break;\n  case e64:\n    v = P.VU.elt&lt;int64_t&gt;(insn.rs2(), 0);\n    break;\n}\n\n// 3. \u5199\u5165\u76ee\u6807\u5bc4\u5b58\u5668\nWRITE_RD(v);\n</code></pre> <p>\u6ce8\u610f:</p> <ul> <li>\u81ea\u52a8\u5bf9\u5c0f\u4e8e XLEN \u7684\u6570\u636e\u8fdb\u884c\u7b26\u53f7\u6269\u5c55</li> <li>\u4e0d\u53d7 vstart\u3001vl \u6216\u63a9\u7801\u7684\u5f71\u54cd</li> <li>\u53ea\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20</li> </ul>"},{"location":"RVV/ISA/permutation/#4","title":"4. \u5411\u91cf\u6574\u7ec4\u79fb\u52a8\u6307\u4ee4","text":"<p>\u5411\u91cf\u6574\u7ec4\u79fb\u52a8\u6307\u4ee4(<code>vmvNr.v</code>)\u662f\u4e00\u7ec4\u5feb\u901f\u590d\u5236\u591a\u4e2a\u5411\u91cf\u5bc4\u5b58\u5668\u5185\u5bb9\u7684\u6307\u4ee4\uff0c\u901a\u5e38\u7528\u4e8e\u5411\u91cf\u5bc4\u5b58\u5668\u7684\u4e0a\u4e0b\u6587\u4fdd\u5b58\u548c\u6062\u590d\u3002</p> <p>\u901a\u7528\u539f\u7406: \u6240\u6709<code>vmvNr.v</code>\u6307\u4ee4\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f - \u5c06\u6e90\u5411\u91cf\u5bc4\u5b58\u5668\u7ec4\u7684\u5b8c\u6574\u5185\u5bb9\u590d\u5236\u5230\u76ee\u6807\u5411\u91cf\u5bc4\u5b58\u5668\u7ec4\u3002\u6307\u4ee4\u4e2d\u7684 N(1,2,4,8)\u8868\u793a\u4e00\u6b21\u590d\u5236\u7684\u5411\u91cf\u5bc4\u5b58\u5668\u6570\u91cf\u3002</p> <p>SPIKE \u5b8f\u5c55\u5f00\u5206\u6790:</p> <pre><code>// vmvNr.v\u5171\u540c\u5b9e\u73b0\u6a21\u5f0f\n// \u4ee5vmv4r.v\u4e3a\u4f8b\n\n// 1. \u9a8c\u8bc1\u5411\u91cf\u6269\u5c55\u72b6\u6001\u548c\u5bc4\u5b58\u5668\u5bf9\u9f50\nrequire_vector(true);\nrequire_align(insn.rd(), 4);  // \u9700\u89814\u4e2a\u5bc4\u5b58\u5668\u5bf9\u9f50\nrequire_align(insn.rs2(), 4);\n\n// 2. \u83b7\u53d6\u5bc4\u5b58\u5668\u4fe1\u606f\nconst reg_t rd_num = insn.rd();\nconst reg_t rs2_num = insn.rs2();\nconst reg_t size = 4 * P.VU.vlenb;  // 4\u4e2a\u5411\u91cf\u5bc4\u5b58\u5668\u7684\u603b\u5b57\u8282\u6570\n\n// 3. \u6309\u5b57\u8282\u590d\u5236\u5bc4\u5b58\u5668\u5185\u5bb9\nfor (reg_t i = 0; i &lt; size; ++i) {\n  const uint8_t val = P.VU.elt&lt;uint8_t&gt;(rs2_num, 0, i);\n  P.VU.elt&lt;uint8_t&gt;(rd_num, 0, i) = val;\n}\n</code></pre> <p>\u5bf9\u4e8e<code>vmv1r.v</code>\u3001<code>vmv2r.v</code>\u548c<code>vmv8r.v</code>\uff0c\u5b9e\u73b0\u65b9\u5f0f\u76f8\u540c\uff0c\u53ea\u662f size \u7684\u8ba1\u7b97\u548c\u5bf9\u9f50\u8981\u6c42\u4e0d\u540c\u3002\u8fd9\u4e9b\u6307\u4ee4\u76f4\u63a5\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u64cd\u4f5c\uff0c\u5ffd\u7565\u5143\u7d20\u8fb9\u754c\uff0c\u5b9e\u73b0\u5bf9\u5411\u91cf\u5bc4\u5b58\u5668\u5185\u5bb9\u7684\u4f4d\u7ea7\u522b\u5b8c\u6574\u590d\u5236\u3002</p>"},{"location":"RVV/ISA/permutation/#5_1","title":"5. \u538b\u7f29/\u6269\u5c55\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vcompressvm-_1","title":"vcompress.vm - \u5411\u91cf\u63a9\u7801\u538b\u7f29","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vcompress.vm vd, vs2, vs1</code></p> <p>\u529f\u80fd: \u6839\u636e\u63a9\u7801\u5411\u91cf vs1\uff0c\u5c06 vs2 \u4e2d\u63a9\u7801\u4e3a 1 \u7684\u5143\u7d20\u6309\u987a\u5e8f\u538b\u7f29\u5230 vd \u4e2d\u3002</p> <p>SPIKE \u5b8f\u5c55\u5f00\u5206\u6790:</p> <pre><code>// \u6838\u5fc3\u5b9e\u73b0\n// 1. \u9a8c\u8bc1\u5bc4\u5b58\u5668\u4e0d\u91cd\u53e0\u4e14\u6b63\u786e\u5bf9\u9f50\nrequire(insn.rd() != insn.rs1() &amp;&amp; insn.rd() != insn.rs2());\nrequire_vector(true);\nrequire_align(insn.rd(), P.VU.vflmul);\nrequire_align(insn.rs2(), P.VU.vflmul);\n\n// 2. \u83b7\u53d6\u57fa\u672c\u53c2\u6570\u548c\u4f4d\u7f6e\u8ba1\u6570\u5668\nreg_t vl = P.VU.vl-&gt;read();\nreg_t rd_num = insn.rd();\nreg_t rs1_num = insn.rs1();\nreg_t rs2_num = insn.rs2();\nreg_t pos = 0;  // \u76ee\u6807\u5199\u5165\u4f4d\u7f6e\uff0c\u4ece0\u5f00\u59cb\n\n// 3. \u904d\u5386\u6e90\u5411\u91cf\u5143\u7d20\nfor (reg_t i = P.VU.vstart-&gt;read(); i &lt; vl; ++i) {\n  // 3.1 \u83b7\u53d6\u63a9\u7801\u4f4d\n  const int mpos = i / 8;  // \u63a9\u7801\u5b57\u8282\u7d22\u5f15\n  const int moff = i % 8;  // \u63a9\u7801\u4f4d\u7d22\u5f15\n  bool mask_bit = (P.VU.elt&lt;uint8_t&gt;(rs1_num, mpos) &gt;&gt; moff) &amp; 0x1;\n\n  // 3.2 \u6839\u636e\u63a9\u7801\u4f4d\u51b3\u5b9a\u662f\u5426\u538b\u7f29\u5f53\u524d\u5143\u7d20\n  if (mask_bit) {\n    // \u53ea\u6709\u5728\u76ee\u6807\u7d22\u5f15\u5c0f\u4e8evl\u65f6\u624d\u5199\u5165\n    if (pos &lt; vl) {\n      // \u62f7\u8d1d\u6570\u636e\uff08\u4ee532\u4f4d\u5143\u7d20\u4e3a\u4f8b\uff09\n      P.VU.elt&lt;uint32_t&gt;(rd_num, pos) = P.VU.elt&lt;uint32_t&gt;(rs2_num, i);\n      pos++;  // \u9012\u589e\u76ee\u6807\u7d22\u5f15\n    }\n  }\n}\n\n// 4. \u91cd\u7f6evstart\u5bc4\u5b58\u5668\nP.VU.vstart-&gt;write(0);\n</code></pre> <p><code>vcompress.vm</code>\u6307\u4ee4\u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5b83\u76f4\u63a5\u4f7f\u7528\u63a9\u7801\u5411\u91cf vs1 \u63a7\u5236\u538b\u7f29\u64cd\u4f5c\uff0c\u800c\u4e0d\u50cf\u5176\u4ed6\u5411\u91cf\u6307\u4ee4\u90a3\u6837\u4f7f\u7528 v0.mask \u4f5c\u4e3a\u6761\u4ef6\u6267\u884c\u63a9\u7801\u3002\u5b9e\u73b0\u903b\u8f91\u662f\u626b\u63cf\u6e90\u5411\u91cf vs2\uff0c\u5bf9\u6bcf\u4e2a\u63a9\u7801\u4f4d\u4e3a 1 \u7684\u5143\u7d20\uff0c\u6309\u987a\u5e8f\u5199\u5165\u5230\u76ee\u6807\u5411\u91cf vd \u7684\u8fde\u7eed\u4f4d\u7f6e\u3002</p>"},{"location":"RVV/ISA/permutation/#6_1","title":"6. \u5411\u91cf\u7d22\u5f15\u751f\u6210\u6307\u4ee4","text":""},{"location":"RVV/ISA/permutation/#vidv-_1","title":"vid.v - \u751f\u6210\u5411\u91cf\u7d22\u5f15","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vid.v vd, vm</code></p> <p>\u529f\u80fd: \u751f\u6210\u4ece 0 \u5f00\u59cb\u9012\u589e\u7684\u8fde\u7eed\u7d22\u5f15\u503c\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u6bcf\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b8f\u5c55\u5f00\u5206\u6790:</p> <pre><code>// \u6838\u5fc3\u5b9e\u73b0\n// 1. \u9a8c\u8bc1\u64cd\u4f5c\u6761\u4ef6\nrequire(P.VU.vsew &gt;= e8 &amp;&amp; P.VU.vsew &lt;= e64);\nrequire_vector(true);\nrequire_align(insn.rd(), P.VU.vflmul);\n\n// 2. \u83b7\u53d6\u5411\u91cf\u957f\u5ea6\u548c\u76ee\u6807\u5bc4\u5b58\u5668\nreg_t vl = P.VU.vl-&gt;read();\nreg_t rd_num = insn.rd();\n\n// 3. \u904d\u5386\u5904\u7406\u6bcf\u4e2a\u5143\u7d20\nfor (reg_t i = P.VU.vstart-&gt;read(); i &lt; vl; ++i) {\n  // 3.1 \u63a9\u7801\u68c0\u67e5\n  bool use_result = true;\n  if (!P.VU.get_vm()-&gt;read()) {\n    // \u68c0\u67e5\u63a9\u7801\u4f4d\n    const int mpos = i / 8;\n    const int moff = i % 8;\n    use_result = (P.VU.get_mask(mpos) &gt;&gt; moff) &amp; 0x1;\n  }\n\n  // 3.2 \u5143\u7d20\u5904\u7406\n  if (use_result) {\n    // \u4e3a\u6bcf\u4e2a\u5143\u7d20\u5206\u914d\u5176\u7d22\u5f15\u503c\n    P.VU.set_elt&lt;uint32_t&gt;(rd_num, i, i);\n  }\n}\n\n// 4. \u91cd\u7f6evstart\u5bc4\u5b58\u5668\nP.VU.vstart-&gt;write(0);\n</code></pre> <p>vid.v \u6307\u4ee4\u5728\u5411\u91cf\u8ba1\u7b97\u4e2d\u975e\u5e38\u6709\u7528\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u751f\u6210\u7d22\u5f15\u5411\u91cf\uff0c\u4e0e\u5176\u4ed6\u5411\u91cf\u6307\u4ee4\u7ed3\u5408\u4f7f\u7528\u5b9e\u73b0\u590d\u6742\u7684\u6570\u636e\u91cd\u7ec4\u548c\u5904\u7406\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u6cd5\u662f\u7ed3\u5408 vid.v \u548c vrgather.vv \u5b9e\u73b0\u77e9\u9635\u8f6c\u7f6e\u3002</p>"},{"location":"RVV/ISA/permutation/#viotam-_1","title":"viota.m - \u751f\u6210\u524d\u7f00\u548c\u7d22\u5f15\u8868","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>viota.m vd, vs2, vm</code></p> <p>\u529f\u80fd: \u5bf9 vs2 \u5411\u91cf\u4e2d\u7684\u63a9\u7801\u4f4d\u8fdb\u884c\u9012\u589e\u8ba1\u6570\uff0c\u7ed3\u679c\u653e\u5728 vd \u4e2d\u3002</p> <p>SPIKE \u5b8f\u5c55\u5f00\u5206\u6790:</p> <pre><code>// \u6838\u5fc3\u5b9e\u73b0\n// 1. \u9a8c\u8bc1\u64cd\u4f5c\u6761\u4ef6\nrequire(P.VU.vsew &gt;= e8 &amp;&amp; P.VU.vsew &lt;= e64);\nrequire_vector(true);\nrequire_align(insn.rd(), P.VU.vflmul);\nrequire_align(insn.rs2(), P.VU.vflmul);\n\n// 2. \u83b7\u53d6\u5411\u91cf\u957f\u5ea6\u548c\u5bc4\u5b58\u5668\nreg_t vl = P.VU.vl-&gt;read();\nreg_t rd_num = insn.rd();\nreg_t rs2_num = insn.rs2();\nreg_t sum = 0;  // \u7d2f\u79ef\u8ba1\u6570\u5668\n\n// 3. \u904d\u5386\u5904\u7406\u6bcf\u4e2a\u5143\u7d20\nfor (reg_t i = P.VU.vstart-&gt;read(); i &lt; vl; ++i) {\n  // 3.1 \u63a9\u7801\u68c0\u67e5\n  bool use_result = true;\n  if (!P.VU.get_vm()-&gt;read()) {\n    // \u68c0\u67e5\u63a9\u7801\u4f4d\n    const int mpos = i / 8;\n    const int moff = i % 8;\n    use_result = (P.VU.get_mask(mpos) &gt;&gt; moff) &amp; 0x1;\n  }\n\n  // 3.2 \u5143\u7d20\u5904\u7406\n  if (use_result) {\n    // \u68c0\u67e5\u6e90\u5411\u91cf\u7684\u63a9\u7801\u4f4d\n    const int mpos = i / 8;\n    const int moff = i % 8;\n    bool vs2_mask = (P.VU.elt&lt;uint8_t&gt;(rs2_num, mpos) &gt;&gt; moff) &amp; 0x1;\n\n    // \u5b58\u50a8\u5f53\u524d\u7d2f\u79ef\u548c\n    P.VU.set_elt&lt;uint32_t&gt;(rd_num, i, sum);\n\n    // \u5982\u679c\u63a9\u7801\u4e3a1\uff0c\u8ba1\u6570\u589e\u52a0\n    if (vs2_mask) sum++;\n  }\n}\n\n// 4. \u91cd\u7f6evstart\u5bc4\u5b58\u5668\nP.VU.vstart-&gt;write(0);\n</code></pre> <p><code>viota.m</code>\u6307\u4ee4\u5b9e\u73b0\u4e86\u4e00\u4e2a\u524d\u7f00\u548c\u64cd\u4f5c\uff0c\u8ba1\u7b97\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u6709\u591a\u5c11\u4e2a\u63a9\u7801\u4f4d\u4e3a 1\u3002\u8fd9\u5728\u5411\u91cf\u538b\u7f29\u64cd\u4f5c\u4e2d\u5f88\u6709\u7528\uff0c\u53ef\u4ee5\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u5728\u538b\u7f29\u540e\u7684\u76ee\u6807\u4f4d\u7f6e\u3002</p>"},{"location":"RVV/ISA/permutation/#_4","title":"\u5411\u91cf\u7f6e\u6362\u4e0e\u79fb\u52a8\u6307\u4ee4\u5e94\u7528\u793a\u4f8b","text":""},{"location":"RVV/ISA/permutation/#1-","title":"1. \u4f7f\u7528\u5411\u91cf-\u6807\u91cf\u79fb\u52a8\u6307\u4ee4\u5b9e\u73b0\u9ad8\u6548\u521d\u59cb\u5316","text":"<pre><code># \u5c06\u5411\u91cf\u5bc4\u5b58\u5668\u4e2d\u7684\u9996\u5143\u7d20\u521d\u59cb\u5316\u4e3a\u5e38\u91cf\uff0c\u5176\u4f59\u5143\u7d20\u4e0d\u53d8\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u6570\u7ec4\u957f\u5ea6\n\n    # \u8bbe\u7f6e\u5411\u91cf\u73af\u5883\n    vsetvli t0, a0, e32, m4       # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u5143\u7d20\n\n    # \u521d\u59cb\u5316\u9996\u5143\u7d20\n    li t1, 0xFF                   # \u52a0\u8f7d\u5e38\u91cf\u5230t1\n    vmv.s.x v4, t1                # \u5c06\u5e38\u91cf\u52a0\u8f7d\u5230v4[0]\n\n    # \u590d\u5236\u9996\u5143\u7d20\u5230\u6574\u4e2a\u5411\u91cf\n    vrgather.vi v8, v4, 0         # \u5c06v4[0]\u590d\u5236\u5230v8\u7684\u6240\u6709\u5143\u7d20\n</code></pre>"},{"location":"RVV/ISA/permutation/#2_2","title":"2. \u4f7f\u7528\u5355\u5143\u7d20\u6ed1\u52a8\u5b9e\u73b0\u9ad8\u6548\u6570\u7ec4\u626b\u63cf","text":"<pre><code># \u4f7f\u7528\u6ed1\u52a8\u6307\u4ee4\u6784\u5efa\u4e09\u5143\u7d20\u6ed1\u52a8\u7a97\u53e3\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u6570\u7ec4\u5730\u5740\uff0ca1\u5305\u542b\u6570\u7ec4\u957f\u5ea6\n\n    # \u8bbe\u7f6e\u5411\u91cf\u73af\u5883\n    vsetvli t0, a1, e32, m1       # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u5143\u7d20\n\n    # \u52a0\u8f7d\u539f\u59cb\u6570\u7ec4\n    vle32.v v1, (a0)              # \u52a0\u8f7d\u5411\u91cf\u6570\u636e\n\n    # \u6784\u5efa\u6ed1\u52a8\u7a97\u53e3\n    vslide1down.vx v2, v1, zero   # v2 = [0, v1[0], v1[1], ...]\n    vslide1down.vx v3, v2, zero   # v3 = [0, v2[0], v2[1], ...] = [0, 0, v1[0], ...]\n\n    # \u73b0\u5728v1, v2, v3\u6784\u6210\u4e00\u4e2a\u4e09\u5143\u7d20\u6ed1\u52a8\u7a97\u53e3\uff0c\u53ef\u7528\u4e8e\u5377\u79ef\u7b49\u64cd\u4f5c\n    # \u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6ei\uff0c\u7a97\u53e3\u5143\u7d20\u4e3a[v3[i], v2[i], v1[i]]\n</code></pre>"},{"location":"RVV/ISA/permutation/#3-vcompress","title":"3. \u4f7f\u7528 vcompress \u5b9e\u73b0\u6761\u4ef6\u6570\u636e\u7b5b\u9009","text":"<pre><code># \u7b5b\u9009\u51fa\u6570\u7ec4\u4e2d\u6240\u6709\u6b63\u6570\u5143\u7d20\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u6570\u7ec4\u5730\u5740\uff0ca1\u5305\u542b\u6570\u7ec4\u957f\u5ea6\uff0ca2\u5305\u542b\u7ed3\u679c\u5730\u5740\n\n    # \u8bbe\u7f6e\u5411\u91cf\u73af\u5883\n    vsetvli t0, a1, e32, m2       # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u5143\u7d20\n\n    # \u52a0\u8f7d\u6e90\u6570\u7ec4\n    vle32.v v2, (a0)              # \u52a0\u8f7d\u5411\u91cf\u6570\u636e\n\n    # \u521b\u5efa\u63a9\u7801\uff1a\u6807\u8bb0\u6240\u6709\u6b63\u6570\n    vmslt.vi v0, v2, 0            # \u8bbe\u7f6e\u63a9\u7801\uff1av2[i] &lt; 0 ? 0 : 1\n    vmxor.mm v0, v0, v0           # \u53cd\u8f6c\u63a9\u7801\u4f4d\uff1a\u73b0\u57281\u8868\u793a\u6b63\u6570\n\n    # \u538b\u7f29\u64cd\u4f5c\uff1a\u53ea\u4fdd\u7559\u6b63\u6570\n    vcompress.vm v4, v2, v0       # \u4f7f\u7528\u63a9\u7801\u538b\u7f29v2\n\n    # \u5b58\u50a8\u7ed3\u679c\n    vse32.v v4, (a2)              # \u5b58\u50a8\u538b\u7f29\u540e\u7684\u5411\u91cf\n</code></pre>"},{"location":"RVV/ISA/permutation/#4_1","title":"4. \u4f7f\u7528\u6574\u7ec4\u79fb\u52a8\u6307\u4ee4\u5b9e\u73b0\u5411\u91cf\u5bc4\u5b58\u5668\u4fdd\u5b58\u4e0e\u6062\u590d","text":"<pre><code># \u4fdd\u5b58\u548c\u6062\u590d8\u4e2a\u5411\u91cf\u5bc4\u5b58\u5668\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbe\u6808\u6307\u9488\u5df2\u8bbe\u7f6e\uff0c\u5206\u914d\u7a7a\u95f4\u4ee5\u4fdd\u5b58\u5411\u91cf\u5bc4\u5b58\u5668\n    addi sp, sp, -256            # \u4e3a8\u4e2a32\u5b57\u8282\u7684\u5411\u91cf\u5bc4\u5b58\u5668\u5206\u914d\u6808\u7a7a\u95f4\n\n    # \u4fdd\u5b58\u5411\u91cf\u5bc4\u5b58\u5668v0-v7\n    vmv8r.v v16, v0              # \u5c06v0-v7\u590d\u5236\u5230v16-v23\n\n    # \u4fdd\u5b58\u5230\u6808\n    addi t0, sp, 0\n    vs1r.v v16, (t0)             # \u4fdd\u5b58v16\n    addi t0, t0, 32\n    vs1r.v v17, (t0)             # \u4fdd\u5b58v17\n    # ... \u4fdd\u5b58v18-v23 ...\n\n    # \u6267\u884c\u8ba1\u7b97...\n\n    # \u6062\u590d\u5411\u91cf\u5bc4\u5b58\u5668\n    addi t0, sp, 0\n    vl1r.v v16, (t0)             # \u52a0\u8f7dv16\n    addi t0, t0, 32\n    vl1r.v v17, (t0)             # \u52a0\u8f7dv17\n    # ... \u52a0\u8f7dv18-v23 ...\n\n    vmv8r.v v0, v16              # \u5c06v16-v23\u590d\u5236\u56dev0-v7\n\n    # \u91ca\u653e\u6808\u7a7a\u95f4\n    addi sp, sp, 256\n</code></pre>"},{"location":"RVV/ISA/permutation/#5_2","title":"5. \u4f7f\u7528\u7d22\u5f15\u6307\u4ee4\u5b9e\u73b0\u77e9\u9635\u8f6c\u7f6e","text":"<pre><code># 4x4\u77e9\u9635\u8f6c\u7f6e\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u6e90\u77e9\u9635\u5730\u5740\uff0ca1\u5305\u542b\u76ee\u6807\u77e9\u9635\u5730\u5740\n\n    # \u8bbe\u7f6e\u5411\u91cf\u73af\u5883\n    li t0, 16                    # \u603b\u5143\u7d20\u6570 = 4x4\n    vsetvli zero, t0, e32, m4    # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u5143\u7d20\n\n    # \u52a0\u8f7d\u6574\u4e2a4x4\u77e9\u9635\n    vle32.v v4, (a0)             # \u52a0\u8f7d\u77e9\u9635 v4 = [a0,a1,a2,a3, b0,b1,b2,b3, c0,c1,c2,c3, d0,d1,d2,d3]\n\n    # \u521b\u5efa\u884c\u4e3b\u5e8f\u5230\u5217\u4e3b\u5e8f\u7684\u7d22\u5f15\u5411\u91cf\n    # \u7d22\u5f15\u5411\u91cf: [0,4,8,12, 1,5,9,13, 2,6,10,14, 3,7,11,15]\n    vid.v v0                     # \u751f\u6210\u8fde\u7eed\u7d22\u5f15 [0,1,2,...,15]\n\n    # \u8ba1\u7b97\u8f6c\u7f6e\u7d22\u5f15\n    li t1, 4                     # \u77e9\u9635\u5bbd\u5ea6\n    vdivu.vx v1, v0, t1          # v1 = v0 / 4 = \u884c\u7d22\u5f15\n    vrem.vx v2, v0, t1           # v2 = v0 % 4 = \u5217\u7d22\u5f15\n    vmul.vx v1, v1, t1           # v1 = \u884c\u7d22\u5f15 * 4\n    vadd.vv v3, v2, v1           # v3 = \u5217\u7d22\u5f15 + \u884c\u7d22\u5f15*4 = \u8f6c\u7f6e\u7d22\u5f15\n\n    # \u4f7f\u7528\u8ba1\u7b97\u7684\u7d22\u5f15\u91cd\u6392\u5143\u7d20\n    vrgather.vv v8, v4, v3       # v8 = \u8f6c\u7f6e\u540e\u7684\u77e9\u9635\n\n    # \u5b58\u50a8\u7ed3\u679c\n    vse32.v v8, (a1)             # \u5b58\u50a8\u8f6c\u7f6e\u540e\u7684\u77e9\u9635\n</code></pre> <p>\u8fd9\u4e9b\u793a\u4f8b\u5c55\u793a\u4e86\u5411\u91cf\u7f6e\u6362\u548c\u79fb\u52a8\u6307\u4ee4\u5728\u5404\u79cd\u6570\u636e\u5904\u7406\u573a\u666f\u4e2d\u7684\u5e94\u7528\uff0c\u4ece\u7b80\u5355\u7684\u6570\u636e\u521d\u59cb\u5316\u5230\u590d\u6742\u7684\u77e9\u9635\u8f6c\u7f6e\u64cd\u4f5c\u3002\u901a\u8fc7\u7ec4\u5408\u8fd9\u4e9b\u6307\u4ee4\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u5b9e\u73b0\u5404\u79cd\u5411\u91cf\u6570\u636e\u91cd\u7ec4\u548c\u5904\u7406\u4efb\u52a1\u3002</p>"},{"location":"RVV/ISA/reduction/","title":"RISC-V \u5411\u91cf\u5f52\u7ea6\u6307\u4ee4\u6982\u8ff0","text":""},{"location":"RVV/ISA/reduction/#_1","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u5411\u91cf\u5f52\u7ea6(Vector Reduction)\u6307\u4ee4\u5c06\u5411\u91cf\u5143\u7d20\u901a\u8fc7\u7279\u5b9a\u64cd\u4f5c(\u5982\u6c42\u548c\u3001\u6c42\u6700\u5927\u503c\u7b49)\u5f52\u7ea6\u4e3a\u5355\u4e2a\u6807\u91cf\u7ed3\u679c\u3002</p>"},{"location":"RVV/ISA/reduction/#_2","title":"\u6307\u4ee4\u683c\u5f0f","text":"<p>\u6240\u6709\u5411\u91cf\u5f52\u7ea6\u6307\u4ee4\u4f7f\u7528\u7edf\u4e00\u683c\u5f0f:</p> <p><code>v[f]red&lt;op&gt;.vs vd, vs2, vs1, vm</code></p> <p>\u5176\u4e2d:</p> <ul> <li><code>vd</code>: \u76ee\u6807\u5411\u91cf\u5bc4\u5b58\u5668(\u4ec5\u4f7f\u7528\u7b2c\u4e00\u4e2a\u5143\u7d20)</li> <li><code>vs2</code>: \u8f93\u5165\u5411\u91cf</li> <li><code>vs1</code>: \u521d\u59cb\u7d2f\u79ef\u503c(\u4ec5\u4f7f\u7528\u7b2c\u4e00\u4e2a\u5143\u7d20)</li> <li><code>vm</code>: \u63a9\u7801\u4f4d</li> </ul>"},{"location":"RVV/ISA/reduction/#_3","title":"\u6307\u4ee4\u5206\u7c7b\u4e0e\u529f\u80fd","text":""},{"location":"RVV/ISA/reduction/#_4","title":"\u6574\u6570\u5f52\u7ea6\u6307\u4ee4","text":"\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c <code>vredsum.vs</code> \u6574\u6570\u6c42\u548c\u5f52\u7ea6 \\(vd[0]=vs1[0]+\\sum_{i=0}^{vl-1}vs2[i]\\) <code>vredmax.vs</code> \u6709\u7b26\u53f7\u6574\u6570\u6700\u5927\u503c\u5f52\u7ea6 \\(vd[0]=\\max(vs1[0],\\max_{i=0}^{vl-1}vs2[i])\\) <code>vredmaxu.vs</code> \u65e0\u7b26\u53f7\u6574\u6570\u6700\u5927\u503c\u5f52\u7ea6 \\(vd[0]=\\max_u(vs1[0],\\max_{i=0}^{vl-1}vs2[i])\\) <code>vredmin.vs</code> \u6709\u7b26\u53f7\u6574\u6570\u6700\u5c0f\u503c\u5f52\u7ea6 \\(vd[0]=\\min(vs1[0],\\min_{i=0}^{vl-1}vs2[i])\\) <code>vredminu.vs</code> \u65e0\u7b26\u53f7\u6574\u6570\u6700\u5c0f\u503c\u5f52\u7ea6 \\(vd[0]=\\min_u(vs1[0],\\min_{i=0}^{vl-1}vs2[i])\\)"},{"location":"RVV/ISA/reduction/#_5","title":"\u6d6e\u70b9\u5f52\u7ea6\u6307\u4ee4","text":"\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c <code>vfredosum.vs</code> \u6709\u5e8f\u6d6e\u70b9\u6c42\u548c\u5f52\u7ea6 \\(vd[0]=vs1[0]+\\sum_{i=0}^{vl-1}vs2[i]\\) <code>vfredusum.vs</code> \u975e\u6709\u5e8f\u6d6e\u70b9\u6c42\u548c\u5f52\u7ea6 \\(vd[0]=vs1[0]+\\sum_{i=0}^{vl-1}vs2[i]\\) <code>vfredmax.vs</code> \u6d6e\u70b9\u6700\u5927\u503c\u5f52\u7ea6 \\(vd[0]=\\max(vs1[0],\\max_{i=0}^{vl-1}vs2[i])\\) <code>vfredmin.vs</code> \u6d6e\u70b9\u6700\u5c0f\u503c\u5f52\u7ea6 \\(vd[0]=\\min(vs1[0],\\min_{i=0}^{vl-1}vs2[i])\\)"},{"location":"RVV/ISA/reduction/#_6","title":"\u903b\u8f91\u5f52\u7ea6\u6307\u4ee4","text":"\u6307\u4ee4 \u529f\u80fd\u63cf\u8ff0 \u64cd\u4f5c <code>vredand.vs</code> \u6309\u4f4d\u4e0e\u5f52\u7ea6 \\(vd[0]=vs1[0] \\&amp; \\bigwedge_{i=0}^{vl-1}vs2[i]\\) <code>vredor.vs</code> \u6309\u4f4d\u6216\u5f52\u7ea6 \\(vd[0]=vs1[0] \\| \\bigvee_{i=0}^{vl-1}vs2[i]\\) <code>vredxor.vs</code> \u6309\u4f4d\u5f02\u6216\u5f52\u7ea6 \\(vd[0]=vs1[0] \\oplus \\bigoplus_{i=0}^{vl-1}vs2[i]\\)"},{"location":"RVV/ISA/reduction/#spike","title":"SPIKE \u6a21\u62df\u5668\u5b9e\u73b0\u4e0e\u6307\u4ee4\u8be6\u89e3","text":"<p>\u5f52\u7ea6\u6307\u4ee4\u5728 SPIKE \u6a21\u62df\u5668\u4e2d\u901a\u8fc7\u4e13\u95e8\u7684\u5b8f\u6765\u5b9e\u73b0\uff0c\u5305\u62ec<code>VI_VV_LOOP_REDUCTION</code>(\u6574\u6570\u5f52\u7ea6)\u3001<code>VI_VFP_LOOP_REDUCTION</code>(\u6d6e\u70b9\u5f52\u7ea6)\u548c<code>VI_VV_ULOOP_REDUCTION</code>(\u65e0\u7b26\u53f7\u5f52\u7ea6)\u3002</p> <p>\u5f52\u7ea6\u6307\u4ee4\u7684\u57fa\u672c\u5de5\u4f5c\u539f\u7406\u662f\uff1a</p> <ol> <li>\u4ece<code>vs1</code>\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u83b7\u53d6\u521d\u59cb\u7d2f\u79ef\u503c</li> <li>\u904d\u5386<code>vs2</code>\u5411\u91cf\u4e2d\u7684\u6bcf\u4e2a\u6d3b\u8dc3\u5143\u7d20</li> <li>\u6839\u636e\u5177\u4f53\u64cd\u4f5c\u5bf9\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u7d2f\u79ef\u8ba1\u7b97</li> <li>\u5c06\u6700\u7ec8\u7ed3\u679c\u5b58\u50a8\u5728<code>vd</code>\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d</li> </ol>"},{"location":"RVV/ISA/reduction/#1","title":"1. \u6574\u6570\u5f52\u7ea6\u6307\u4ee4","text":""},{"location":"RVV/ISA/reduction/#vredsumvs-","title":"vredsum.vs - \u5411\u91cf-\u6807\u91cf\u6574\u6570\u6c42\u548c\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vredsum.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u5c06 vs2 \u4e2d\u7684\u6240\u6709\u6d3b\u8dc3\u5143\u7d20\u52a0\u5230 vs1 \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0a\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vredsum_vs.h\nVI_VV_LOOP_REDUCTION\n({\n  vd_0 = vs1_0 + vs2;\n}, {\n  vd_0 = vs1_0;\n})\n</code></pre> <p>\u5b8f\u5c55\u5f00\u5206\u6790: <code>VI_VV_LOOP_REDUCTION</code>\u5b8f\u5c55\u5f00\u540e\uff0c<code>vredsum.vs</code>\u7684\u5b9e\u9645\u6267\u884c\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>// 1. \u68c0\u67e5\u5f52\u7ea6\u64cd\u4f5c\u6761\u4ef6\nrequire(insn.rd() != insn.rs1() &amp;&amp; insn.rd() != insn.rs2());\nrequire_vector_vs1_overlap_vm(insn);\n\n// 2. \u83b7\u53d6\u57fa\u672c\u53c2\u6570\nreg_t vstart = P.VU.vstart-&gt;read();\nreg_t vl = P.VU.vl-&gt;read();\nreg_t LMUL = P.VU.get_lmul();\nreg_t VLMAX = P.VU.get_vlen() / P.VU.get_elen();\n\n// 3. \u6839\u636e\u5143\u7d20\u5bbd\u5ea6(SEW)\u5904\u7406\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\nif (sew == e8) {\n    // 3.1 \u5b9a\u4e49\u6570\u636e\u7c7b\u578b(8\u4f4d\u6574\u6570)\n    typedef int8_t VV_S;\n    const int sew = 8;\n\n    // 3.2 \u83b7\u53d6vs1\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u503c\n    VV_S vs1_0 = P.VU.elt&lt;VV_S&gt;(insn.rs1(), 0);\n    // 3.3 \u8bbe\u7f6e\u521d\u59cb\u7d2f\u79ef\u503c\n    VV_S vd_0 = vs1_0;\n\n    // 3.4 \u904d\u5386\u5411\u91cf\u5143\u7d20\n    for (reg_t i = vstart; i &lt; vl; ++i) {\n        // 3.4.1 \u63a9\u7801\u5904\u7406\n        int midx = i / 64;\n        int mpos = i % 64;\n        bool use_first = (P.VU.vmlen &lt; VLMAX) &amp;&amp; (LMUL &lt; 1);\n        bool skip = (!P.VU.get_vm()-&gt;read() &amp;&amp;\n                    !((P.VU.get_mask(midx, use_first) &gt;&gt; mpos) &amp; 0x1));\n\n        // 3.4.2 \u5982\u679c\u88ab\u63a9\u7801\u8fc7\u6ee4\uff0c\u5e94\u7528\u7b2c\u4e8c\u4e2a\u4ee3\u7801\u5757\n        if (skip) {\n            // \u5bf9\u4e8e\u975e\u6d3b\u8dc3\u5143\u7d20: vd_0 = vs1_0;\n            // \u5728vredsum.vs\u4e2d\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5b9e\u9645\u4e0a\u4e0d\u6539\u53d8vd_0\uff0c\u6240\u4ee5\u662f\u7a7a\u64cd\u4f5c\n            continue;\n        }\n\n        // 3.4.3 \u83b7\u53d6\u5f53\u524d\u5143\u7d20\u503c\n        VV_S vs2 = P.VU.elt&lt;VV_S&gt;(insn.rs2(), i);\n\n        // 3.4.4 \u6267\u884c\u6c42\u548c\u64cd\u4f5c(\u7b2c\u4e00\u4e2a\u4ee3\u7801\u5757)\n        vd_0 = vs1_0 + vs2;  // \u8fd9\u91cc\u7684\u5173\u952e\u64cd\u4f5c\u662f\u628avs1_0+vs2\u8d4b\u7ed9vd_0\n    }\n\n    // 3.5 \u5c06\u6700\u7ec8\u7d2f\u79ef\u7ed3\u679c\u5199\u56de\n    P.VU.elt&lt;VV_S&gt;(insn.rd(), 0) = vd_0;\n}\nelse if (sew == e16) {\n    // 16\u4f4d\u6574\u6570\u5904\u7406\uff0c\u903b\u8f91\u76f8\u540c\uff0c\u4f7f\u7528int16_t\u7c7b\u578b\n    // ...\n}\nelse if (sew == e32) {\n    // 32\u4f4d\u6574\u6570\u5904\u7406\uff0c\u903b\u8f91\u76f8\u540c\uff0c\u4f7f\u7528int32_t\u7c7b\u578b\n    // ...\n}\nelse if (sew == e64) {\n    // 64\u4f4d\u6574\u6570\u5904\u7406\uff0c\u903b\u8f91\u76f8\u540c\uff0c\u4f7f\u7528int64_t\u7c7b\u578b\n    // ...\n}\n\n// \u8bbe\u7f6evstart = 0\uff0c\u8868\u793a\u6307\u4ee4\u6267\u884c\u5b8c\u6bd5\nP.VU.vstart-&gt;write(0);\n</code></pre> <p>\u6ce8\u610f\uff1a\u5b8f\u5c55\u5f00\u5206\u6790\u8868\u660e SPIKE \u6a21\u62df\u5668\u5728\u8fd9\u4e2a\u6307\u4ee4\u7684\u5b9e\u73b0\u4e0a\u53ef\u80fd\u5b58\u5728 bug\u3002\u771f\u6b63\u7684\u5f52\u7ea6\u6c42\u548c\u5e94\u8be5\u662f\u5c06\u6240\u6709\u5143\u7d20\u7d2f\u52a0\uff0c\u800c\u4e0d\u662f\u53ea\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u52a0\u6cd5\u7684\u7ed3\u679c\u3002\u6b63\u786e\u7684\u5b9e\u73b0\u5e94\u8be5\u662f\uff1a<code>vd_0 = vd_0 + vs2;</code></p>"},{"location":"RVV/ISA/reduction/#vredmaxuvs-","title":"vredmaxu.vs - \u5411\u91cf-\u6807\u91cf\u65e0\u7b26\u53f7\u6574\u6570\u6700\u5927\u503c\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vredmaxu.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u627e\u51fa vs2 \u4e2d\u6240\u6709\u6d3b\u8dc3\u5143\u7d20\u548c vs1 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u65e0\u7b26\u53f7\u6700\u5927\u503c\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vredmaxu_vs.h\nVI_VV_ULOOP_REDUCTION\n({\n  vd_0 = max(vd_0, vs2);\n}, {\n  ;\n})\n</code></pre> <p>\u5b8f\u5c55\u5f00\u5206\u6790: <code>VI_VV_ULOOP_REDUCTION</code>\u5b8f\u5c55\u5f00\u540e\uff0c\u4e0e<code>VI_VV_LOOP_REDUCTION</code>\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b\u3002\u5173\u952e\u64cd\u4f5c\u662f\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u4f7f\u7528<code>max(vd_0, vs2)</code>\u6bd4\u8f83\u5f53\u524d\u7d2f\u79ef\u7684\u6700\u5927\u503c(<code>vd_0</code>)\u548c\u5f53\u524d\u5143\u7d20(<code>vs2</code>)\uff0c\u4fdd\u7559\u8f83\u5927\u7684\u503c\u3002\u5bf9\u4e8e\u975e\u6d3b\u8dc3\u5143\u7d20\uff0c\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff0c\u4fdd\u6301\u5f53\u524d\u7684\u6700\u5927\u503c\u4e0d\u53d8\u3002</p> <pre><code>// \u6838\u5fc3\u5b9e\u73b0\u4e0d\u540c\u70b9\ntypedef uint8_t VV_U;  // \u65e0\u7b26\u53f7\u7c7b\u578b\n// ...\nvd_0 = max(vd_0, vs2);  // \u4fdd\u7559\u8f83\u5927\u7684\u503c\n</code></pre>"},{"location":"RVV/ISA/reduction/#vredmaxvs-","title":"vredmax.vs - \u5411\u91cf-\u6807\u91cf\u6709\u7b26\u53f7\u6574\u6570\u6700\u5927\u503c\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vredmax.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u627e\u51fa vs2 \u4e2d\u6240\u6709\u6d3b\u8dc3\u5143\u7d20\u548c vs1 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6709\u7b26\u53f7\u6700\u5927\u503c\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vredmax_vs.h\nVI_VV_LOOP_REDUCTION\n({\n  vd_0 = max(vd_0, vs2);\n}, {\n  ;\n})\n</code></pre> <p><code>vredmax.vs</code>\u7684\u5b8f\u5c55\u5f00\u4e0e<code>vredmaxu.vs</code>\u975e\u5e38\u76f8\u4f3c\uff0c\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u6570\u636e\u7c7b\u578b\uff1a<code>vredmax.vs</code>\u4f7f\u7528\u6709\u7b26\u53f7\u6574\u6570\u7c7b\u578b(<code>int8_t</code>\u7b49)\uff0c\u800c<code>vredmaxu.vs</code>\u4f7f\u7528\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b(<code>uint8_t</code>\u7b49)\u3002\u8fd9\u4f1a\u5f71\u54cd\u6700\u5927\u503c\u6bd4\u8f83\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u6709\u7b26\u53f7\u6574\u6570\u548c\u65e0\u7b26\u53f7\u6574\u6570\u7684\u5927\u5c0f\u6bd4\u8f83\u89c4\u5219\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e 8 \u4f4d\u6574\u6570\uff0c-1(0xFF)\u5728\u6709\u7b26\u53f7\u6bd4\u8f83\u4e2d\u5c0f\u4e8e 1(0x01)\uff0c\u4f46\u5728\u65e0\u7b26\u53f7\u6bd4\u8f83\u4e2d\u5927\u4e8e 1\u3002</p>"},{"location":"RVV/ISA/reduction/#vredminuvs-","title":"vredminu.vs - \u5411\u91cf-\u6807\u91cf\u65e0\u7b26\u53f7\u6574\u6570\u6700\u5c0f\u503c\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vredminu.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u627e\u51fa vs2 \u4e2d\u6240\u6709\u6d3b\u8dc3\u5143\u7d20\u548c vs1 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u65e0\u7b26\u53f7\u6700\u5c0f\u503c\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vredminu_vs.h\nVI_VV_ULOOP_REDUCTION\n({\n  vd_0 = min(vd_0, vs2);\n}, {\n  ;\n})\n</code></pre> <p>\u8fd9\u4e2a\u6307\u4ee4\u662f<code>vredmaxu.vs</code>\u7684\u5bf9\u5e94\u7248\u672c\uff0c\u5bfb\u627e\u65e0\u7b26\u53f7\u6700\u5c0f\u503c\u800c\u4e0d\u662f\u6700\u5927\u503c\u3002\u5173\u952e\u64cd\u4f5c\u662f\u4f7f\u7528<code>min(vd_0, vs2)</code>\u800c\u975e<code>max(vd_0, vs2)</code>\u3002</p>"},{"location":"RVV/ISA/reduction/#vredminvs-","title":"vredmin.vs - \u5411\u91cf-\u6807\u91cf\u6709\u7b26\u53f7\u6574\u6570\u6700\u5c0f\u503c\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vredmin.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u627e\u51fa vs2 \u4e2d\u6240\u6709\u6d3b\u8dc3\u5143\u7d20\u548c vs1 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6709\u7b26\u53f7\u6700\u5c0f\u503c\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vredmin_vs.h\nVI_VV_LOOP_REDUCTION\n({\n  vd_0 = min(vd_0, vs2);\n}, {\n  ;\n})\n</code></pre> <p><code>vredmin.vs</code>\u7684\u5b8f\u5c55\u5f00\u4e0e<code>vredminu.vs</code>\u7c7b\u4f3c\uff0c\u4f46\u6570\u636e\u7c7b\u578b\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff0c\u8fd9\u4f1a\u5f71\u54cd\u6700\u5c0f\u503c\u6bd4\u8f83\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u5f53\u6bd4\u8f83-128 \u548c 127 \u65f6\uff0c\u5728\u6709\u7b26\u53f7\u6bd4\u8f83\u4e2d-128 \u66f4\u5c0f\uff0c\u800c\u5728\u65e0\u7b26\u53f7\u6bd4\u8f83\u4e2d\uff0c\u5982\u679c\u5c06-128 \u89c6\u4e3a\u65e0\u7b26\u53f7\u6570 0x80\uff0c\u5b83\u6bd4 127 \u5927\u3002</p>"},{"location":"RVV/ISA/reduction/#2","title":"2. \u903b\u8f91\u5f52\u7ea6\u6307\u4ee4","text":""},{"location":"RVV/ISA/reduction/#vredandvs-","title":"vredand.vs - \u5411\u91cf-\u6807\u91cf\u6309\u4f4d\u4e0e\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vredand.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u8ba1\u7b97 vs2 \u4e2d\u6240\u6709\u6d3b\u8dc3\u5143\u7d20\u548c vs1 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6309\u4f4d\u4e0e\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vredand_vs.h\nVI_VV_LOOP_REDUCTION\n({\n  vd_0 &amp;= vs2;\n}, {\n  ;\n})\n</code></pre> <p>\u5b8f\u5c55\u5f00\u5206\u6790: \u4f7f\u7528\u6309\u4f4d\u4e0e\u64cd\u4f5c\u7b26<code>&amp;=</code>\u8fdb\u884c\u7d2f\u79ef\uff0c\u8fd9\u662f\u4e00\u4e2a\u590d\u5408\u8d4b\u503c\u64cd\u4f5c\uff0c\u786e\u4fdd\u6bcf\u4e2a\u5143\u7d20\u90fd\u53c2\u4e0e\u6309\u4f4d\u4e0e\u8ba1\u7b97\u3002\u4e0e\u524d\u9762\u7684<code>vredsum.vs</code>\u7684\u5b8f\u5c55\u5f00\u7c7b\u4f3c\uff0c\u53ea\u662f\u64cd\u4f5c\u4ece\u52a0\u6cd5\u53d8\u4e3a\u6309\u4f4d\u4e0e\u3002</p>"},{"location":"RVV/ISA/reduction/#vredorvs-","title":"vredor.vs - \u5411\u91cf-\u6807\u91cf\u6309\u4f4d\u6216\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vredor.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u8ba1\u7b97 vs2 \u4e2d\u6240\u6709\u6d3b\u8dc3\u5143\u7d20\u548c vs1 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6309\u4f4d\u6216\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vredor_vs.h\nVI_VV_LOOP_REDUCTION\n({\n  vd_0 |= vs2;\n}, {\n  ;\n})\n</code></pre> <p>\u4e0e<code>vredand.vs</code>\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u6309\u4f4d\u6216\u64cd\u4f5c\u7b26<code>|=</code>\u8fdb\u884c\u7d2f\u79ef\u3002</p>"},{"location":"RVV/ISA/reduction/#vredxorvs-","title":"vredxor.vs - \u5411\u91cf-\u6807\u91cf\u6309\u4f4d\u5f02\u6216\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vredxor.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u8ba1\u7b97 vs2 \u4e2d\u6240\u6709\u6d3b\u8dc3\u5143\u7d20\u548c vs1 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6309\u4f4d\u5f02\u6216\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vredxor_vs.h\nVI_VV_LOOP_REDUCTION\n({\n  vd_0 ^= vs2;\n}, {\n  ;\n})\n</code></pre> <p>\u4e0e\u524d\u4e24\u4e2a\u903b\u8f91\u5f52\u7ea6\u6307\u4ee4\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u6309\u4f4d\u5f02\u6216\u64cd\u4f5c\u7b26<code>^=</code>\u8fdb\u884c\u7d2f\u79ef\u3002</p>"},{"location":"RVV/ISA/reduction/#3","title":"3. \u6d6e\u70b9\u6570\u5f52\u7ea6\u6307\u4ee4","text":""},{"location":"RVV/ISA/reduction/#vfredosumvs-","title":"vfredosum.vs - \u5411\u91cf-\u6807\u91cf\u6d6e\u70b9\u6709\u5e8f\u6c42\u548c\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vfredosum.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u4ee5\u786e\u5b9a\u6027\u987a\u5e8f\u5c06 vs2 \u4e2d\u7684\u6240\u6709\u6d3b\u8dc3\u6d6e\u70b9\u5143\u7d20\u52a0\u5230 vs1 \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0a\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vfredosum_vs.h\nVI_VFP_LOOP_REDUCTION\n({\n  vd_0 = f32_add(vd_0, vs2);\n}, {\n  ;\n})\n</code></pre> <p>\u5b8f\u5c55\u5f00\u5206\u6790: <code>VI_VFP_LOOP_REDUCTION</code>\u5b8f\u5c55\u5f00\u540e\uff0c\u4e0e\u6574\u6570\u5f52\u7ea6\u7c7b\u4f3c\uff0c\u4f46\u9488\u5bf9\u6d6e\u70b9\u6570\u5904\u7406\uff1a</p> <pre><code>// 1. \u68c0\u67e5\u5f52\u7ea6\u64cd\u4f5c\u6761\u4ef6\nrequire(insn.rd() != insn.rs1() &amp;&amp; insn.rd() != insn.rs2());\nrequire_vector_vs1_overlap_vm(insn);\nrequire_fp;  // \u786e\u8ba4\u6d6e\u70b9\u5355\u5143\u53ef\u7528\n\n// 2. \u6839\u636e\u6d6e\u70b9\u6570\u7cbe\u5ea6\u5904\u7406\u4e0d\u540c\u60c5\u51b5\nif (sew == e32) {  // \u5355\u7cbe\u5ea6\u6d6e\u70b9\n    typedef float32_t VFP_VV_S;\n    const int sew = 32;\n\n    // \u8bbe\u7f6e\u6d6e\u70b9\u820d\u5165\u6a21\u5f0f\n    softfloat_roundingMode = STATE.frm-&gt;read();\n\n    // \u83b7\u53d6\u521d\u59cb\u503c\n    VFP_VV_S vs1_0 = P.VU.elt&lt;VFP_VV_S&gt;(insn.rs1(), 0);\n    VFP_VV_S vd_0 = vs1_0;\n\n    // \u904d\u5386\u5411\u91cf\u5143\u7d20\n    for (reg_t i = vstart; i &lt; vl; ++i) {\n        // \u63a9\u7801\u5904\u7406\u7565...\n\n        // \u83b7\u53d6\u5f53\u524d\u5411\u91cf\u5143\u7d20\n        VFP_VV_S vs2 = P.VU.elt&lt;VFP_VV_S&gt;(insn.rs2(), i);\n\n        // \u6267\u884c\u6d6e\u70b9\u52a0\u6cd5\n        vd_0 = f32_add(vd_0, vs2);\n    }\n\n    // \u5c06\u7ed3\u679c\u5199\u56de\n    P.VU.elt&lt;VFP_VV_S&gt;(insn.rd(), 0) = vd_0;\n}\n// \u5904\u7406\u534a\u7cbe\u5ea6\uff08e16\uff09\u548c\u53cc\u7cbe\u5ea6\uff08e64\uff09\u6d6e\u70b9...\n</code></pre> <p>\u5bf9\u4e8e\u6d6e\u70b9\u64cd\u4f5c\uff0cSPIKE \u4f7f\u7528\u8f6f\u4ef6\u6d6e\u70b9\u5e93\u5b9e\u73b0\uff08\u5982<code>f32_add</code>\uff09\uff0c\u5e76\u6839\u636e\u5f53\u524d\u6d6e\u70b9\u820d\u5165\u6a21\u5f0f\u8fdb\u884c\u8ba1\u7b97\u3002</p>"},{"location":"RVV/ISA/reduction/#vfredusumvs-","title":"vfredusum.vs - \u5411\u91cf-\u6807\u91cf\u6d6e\u70b9\u4e0d\u4fdd\u8bc1\u987a\u5e8f\u6c42\u548c\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vfredusum.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u4e0d\u4fdd\u8bc1\u987a\u5e8f\u5c06 vs2 \u4e2d\u7684\u6240\u6709\u6d3b\u8dc3\u6d6e\u70b9\u5143\u7d20\u52a0\u5230 vs1 \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0a\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vfredusum_vs.h\nVI_VFP_LOOP_REDUCTION\n({\n  vd_0 = f32_add(vd_0, vs2);\n}, {\n  ;\n})\n</code></pre> <p>\u5728 SPIKE \u5b9e\u73b0\u4e2d\uff0c<code>vfredusum.vs</code>\u548c<code>vfredosum.vs</code>\u7684\u5b9e\u73b0\u76f8\u540c\uff0c\u4f46\u5728\u5b9e\u9645\u786c\u4ef6\u4e0a\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u4f18\u5316\u3002\u65e0\u5e8f\u5b9e\u73b0\u53ef\u4ee5\u5141\u8bb8\u786c\u4ef6\u8fdb\u884c\u5e76\u884c\u5316\u6216\u4f7f\u7528\u6811\u5f62\u5f52\u7ea6\u7b49\u6280\u672f\u63d0\u9ad8\u6027\u80fd\u3002</p>"},{"location":"RVV/ISA/reduction/#vfredmaxvs-","title":"vfredmax.vs - \u5411\u91cf-\u6807\u91cf\u6d6e\u70b9\u6700\u5927\u503c\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vfredmax.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u627e\u51fa vs2 \u4e2d\u6240\u6709\u6d3b\u8dc3\u6d6e\u70b9\u5143\u7d20\u548c vs1 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u5927\u503c\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vfredmax_vs.h\nVI_VFP_LOOP_REDUCTION\n({\n  vd_0 = f32_max(vd_0, vs2);\n}, {\n  ;\n})\n</code></pre> <p>\u4e0e\u6d6e\u70b9\u6c42\u548c\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528<code>f32_max</code>\u51fd\u6570\u4ee3\u66ff<code>f32_add</code>\u51fd\u6570\u3002\u6d6e\u70b9\u6700\u5927\u503c\u6bd4\u8f83\u4f1a\u8003\u8651\u7279\u6b8a\u6d6e\u70b9\u503c\u5982 NaN\u3001\u00b1Infinity \u7b49\u3002</p>"},{"location":"RVV/ISA/reduction/#vfredminvs-","title":"vfredmin.vs - \u5411\u91cf-\u6807\u91cf\u6d6e\u70b9\u6700\u5c0f\u503c\u5f52\u7ea6","text":"<p>\u6307\u4ee4\u683c\u5f0f: <code>vfredmin.vs vd, vs2, vs1, vm</code></p> <p>\u529f\u80fd: \u627e\u51fa vs2 \u4e2d\u6240\u6709\u6d3b\u8dc3\u6d6e\u70b9\u5143\u7d20\u548c vs1 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u503c\uff0c\u7ed3\u679c\u653e\u5728 vd \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u3002</p> <p>SPIKE \u5b9e\u73b0:</p> <pre><code>// \u5728 riscv-isa-sim/riscv/insns/vfredmin_vs.h\nVI_VFP_LOOP_REDUCTION\n({\n  vd_0 = f32_min(vd_0, vs2);\n}, {\n  ;\n})\n</code></pre> <p>\u4e0e<code>vfredmax.vs</code>\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528<code>f32_min</code>\u51fd\u6570\u4ee3\u66ff<code>f32_max</code>\u51fd\u6570\u3002</p>"},{"location":"RVV/ISA/reduction/#_7","title":"\u5f52\u7ea6\u64cd\u4f5c\u63a9\u7801\u5904\u7406\u673a\u5236","text":"<p>\u5411\u91cf\u6307\u4ee4\u4e2d\u63a9\u7801\u5904\u7406\u662f\u4e00\u9879\u5173\u952e\u529f\u80fd\uff0c\u5b83\u63a7\u5236\u54ea\u4e9b\u5143\u7d20\u53c2\u4e0e\u64cd\u4f5c\u3002\u5728\u5f52\u7ea6\u6307\u4ee4\u4e2d\uff0c\u63a9\u7801\u5904\u7406\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>// \u63a9\u7801\u5904\u7406\u4ee3\u7801\u8be6\u89e3\nint midx = i / 64;           // \u63a9\u7801\u5b57\u7d22\u5f15\uff08\u6bcf\u4e2a\u673a\u5668\u5b57\u670964\u4f4d\uff09\nint mpos = i % 64;           // \u63a9\u7801\u5b57\u5185\u7684\u4f4d\u7d22\u5f15\nbool use_first = (P.VU.vmlen &lt; VLMAX) &amp;&amp; (LMUL &lt; 1);  // \u662f\u5426\u4f7f\u7528\u7b2c\u4e00\u4e2a\u63a9\u7801\u5b57\nbool skip = (!P.VU.get_vm()-&gt;read() &amp;&amp;                // vm=0\u8868\u793a\u4f7f\u7528\u63a9\u7801\n            !((P.VU.get_mask(midx, use_first) &gt;&gt; mpos) &amp; 0x1)); // \u68c0\u67e5\u63a9\u7801\u4f4d\n\nif (skip) {\n    continue;  // \u5982\u679c\u63a9\u7801\u4f4d\u4e3a0\uff0c\u8df3\u8fc7\u6b64\u5143\u7d20\n}\n</code></pre> <p>\u5f52\u7ea6\u64cd\u4f5c\u662f\u987a\u5e8f\u6267\u884c\u7684\uff0c\u4ece\u7d22\u5f15<code>vstart</code>\u5f00\u59cb\u5230\u5f53\u524d\u5411\u91cf\u957f\u5ea6<code>vl</code>\u7ed3\u675f\uff0c\u786e\u4fdd\u7ed3\u679c\u7684\u786e\u5b9a\u6027\u3002\u7531\u4e8e\u662f\u987a\u5e8f\u5904\u7406\uff0c\u5f52\u7ea6\u64cd\u4f5c\u4e0d\u80fd\u50cf\u666e\u901a\u5411\u91cf\u6307\u4ee4\u90a3\u6837\u5e76\u884c\u5316\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5f52\u7ea6\u6307\u4ee4\u901a\u5e38\u6027\u80fd\u8f83\u4f4e\u7684\u539f\u56e0\u3002</p>"},{"location":"RVV/ISA/reduction/#_8","title":"\u5411\u91cf\u5f52\u7ea6\u6307\u4ee4\u5e94\u7528\u793a\u4f8b","text":"<p>\u4e0b\u9762\u901a\u8fc7\u51e0\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\u793a\u4f8b\uff0c\u5c55\u793a\u5411\u91cf\u5f52\u7ea6\u6307\u4ee4\u7684\u5b9e\u9645\u5e94\u7528\u3002</p>"},{"location":"RVV/ISA/reduction/#1_1","title":"1. \u6574\u6570\u6c42\u548c\u793a\u4f8b","text":"<p>\u8ba1\u7b97\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c\uff1a</p> <pre><code># \u6570\u7ec4\u6c42\u548c\u7a0b\u5e8f\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u6570\u7ec4\u5730\u5740\uff0ca1\u5305\u542b\u6570\u7ec4\u957f\u5ea6\n    li t0, 0          # \u521d\u59cb\u5316\u5faa\u73af\u8ba1\u6570\u5668\n\n    # \u521d\u59cb\u5316\u7d2f\u79ef\u5411\u91cf\u5bc4\u5b58\u5668v0\u4e3a0\n    vsetvli t1, a1, e32, m2  # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u5143\u7d20\uff0cLMUL=2\n    vmv.v.i v0, 0            # v0 = 0\n\n    # \u8f7d\u5165\u5411\u91cf\nload_loop:\n    vsetvli t1, a1, e32, m2  # \u53ef\u80fd\u4f1a\u6839\u636e\u5269\u4f59\u5143\u7d20\u8c03\u6574vl\n    sub a1, a1, t1           # \u66f4\u65b0\u5269\u4f59\u5143\u7d20\u6570\n    vle32.v v2, (a0)         # \u52a0\u8f7d\u5411\u91cf\u6570\u636e\u5230v2\n    slli t2, t1, 2           # t2 = t1 * 4 (\u6bcf\u4e2a\u5143\u7d204\u5b57\u8282)\n    add a0, a0, t2           # \u66f4\u65b0\u6570\u7ec4\u6307\u9488\n\n    # \u8ba1\u7b97\u5f53\u524d\u5757\u7684\u548c\n    vredsum.vs v4, v2, v0    # v4[0] = sum(v2) + v0[0]\n    vmv.x.s t3, v4           # \u5c06\u7ed3\u679c\u79fb\u5230\u901a\u7528\u5bc4\u5b58\u5668\n    add t0, t0, t3           # \u7d2f\u52a0\u5230\u603b\u548c\n\n    # \u68c0\u67e5\u662f\u5426\u5b8c\u6210\n    bnez a1, load_loop\n\n    # t0\u73b0\u5728\u5305\u542b\u6570\u7ec4\u6240\u6709\u5143\u7d20\u7684\u548c\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9010\u5757\u5904\u7406\u6570\u7ec4\uff0c\u5bf9\u6bcf\u5757\u4f7f\u7528<code>vredsum.vs</code>\u8ba1\u7b97\u90e8\u5206\u548c\uff0c\u7136\u540e\u7d2f\u52a0\u5230\u6807\u91cf\u5bc4\u5b58\u5668\u3002</p>"},{"location":"RVV/ISA/reduction/#2_1","title":"2. \u67e5\u627e\u6570\u7ec4\u6700\u5927\u503c\u793a\u4f8b","text":"<p>\u67e5\u627e\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff1a</p> <pre><code># \u67e5\u627e\u6570\u7ec4\u6700\u5927\u503c\u7a0b\u5e8f\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u6570\u7ec4\u5730\u5740\uff0ca1\u5305\u542b\u6570\u7ec4\u957f\u5ea6\n\n    # \u521d\u59cb\u5316\u6700\u5927\u503c\u5411\u91cf\u5bc4\u5b58\u5668v0\u4e3a\u6700\u5c0f\u53ef\u80fd\u503c\n    vsetvli t0, a1, e32, m1   # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u5143\u7d20\n    vmv.v.i v0, 0x80000000    # v0[0] = INT_MIN (0x80000000)\n\n    # \u52a0\u8f7d\u7b2c\u4e00\u4e2a\u5411\u91cf\u5757\u5e76\u8ba1\u7b97\u6700\u5927\u503c\nmax_loop:\n    vsetvli t0, a1, e32, m1   # \u53ef\u80fd\u4f1a\u6839\u636e\u5269\u4f59\u5143\u7d20\u8c03\u6574vl\n    sub a1, a1, t0            # \u66f4\u65b0\u5269\u4f59\u5143\u7d20\u6570\n    vle32.v v1, (a0)          # \u52a0\u8f7d\u5411\u91cf\u6570\u636e\n    slli t1, t0, 2            # t1 = t0 * 4 (\u6bcf\u4e2a\u5143\u7d204\u5b57\u8282)\n    add a0, a0, t1            # \u66f4\u65b0\u6570\u7ec4\u6307\u9488\n\n    # \u67e5\u627e\u5f53\u524d\u5757\u7684\u6700\u5927\u503c\n    vredmax.vs v0, v1, v0     # v0[0] = max(v1[*], v0[0])\n\n    # \u68c0\u67e5\u662f\u5426\u5b8c\u6210\n    bnez a1, max_loop\n\n    # v0[0]\u73b0\u5728\u5305\u542b\u6574\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u503c\n    vmv.x.s a0, v0            # \u5c06\u6700\u5927\u503c\u79fb\u5230\u8fd4\u56de\u5bc4\u5b58\u5668\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521d\u59cb\u5316\u7d2f\u79ef\u503c\u4e3a INT_MIN\uff0c\u9010\u5757\u5904\u7406\u6570\u7ec4\uff0c\u5bf9\u6bcf\u5757\u4f7f\u7528<code>vredmax.vs</code>\u66f4\u65b0\u6700\u5927\u503c\u3002</p>"},{"location":"RVV/ISA/reduction/#3_1","title":"3. \u5e26\u63a9\u7801\u7684\u6d6e\u70b9\u6c42\u548c\u793a\u4f8b","text":"<p>\u8ba1\u7b97\u6570\u7ec4\u4e2d\u6240\u6709\u5076\u6570\u7d22\u5f15\u4f4d\u7f6e\u5143\u7d20\u7684\u6d6e\u70b9\u548c\uff1a</p> <pre><code># \u8ba1\u7b97\u5076\u6570\u4f4d\u7f6e\u5143\u7d20\u7684\u6d6e\u70b9\u548c\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u6d6e\u70b9\u6570\u7ec4\u5730\u5740\uff0ca1\u5305\u542b\u6570\u7ec4\u957f\u5ea6\n\n    # \u521d\u59cb\u5316\u7d2f\u79ef\u503c\u4e3a0.0\n    vsetvli t0, a1, e32, m2    # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c32\u4f4d\u6d6e\u70b9\n    vfmv.v.f v0, ft0           # v0 = 0.0 (\u5047\u8bbeft0\u5df2\u8bbe\u4e3a0.0)\n\n    # \u521b\u5efa\u63a9\u7801\u6807\u8bb0\u5076\u6570\u4f4d\u7f6e\n    vid.v v3                    # \u751f\u6210\u7d22\u5f15\u5411\u91cf [0,1,2,3...]\n    vand.vi v3, v3, 1           # \u53d6\u6700\u4f4e\u4f4d\n    vmseq.vi v0, v3, 0          # \u8bbe\u7f6e\u63a9\u7801\uff0c\u5076\u6570\u7d22\u5f15=1\n\nmask_loop:\n    vsetvli t0, a1, e32, m2     # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\n    sub a1, a1, t0              # \u66f4\u65b0\u5269\u4f59\u5143\u7d20\u6570\n    vle32.v v2, (a0), v0.t      # \u52a0\u8f7d\u5411\u91cf\uff0c\u53ea\u52a0\u8f7d\u5076\u6570\u4f4d\u7f6e\n    slli t1, t0, 2              # t1 = t0 * 4 (\u6bcf\u4e2a\u5143\u7d204\u5b57\u8282)\n    add a0, a0, t1              # \u66f4\u65b0\u6570\u7ec4\u6307\u9488\n\n    # \u8ba1\u7b97\u5f53\u524d\u5757\u7b26\u5408\u6761\u4ef6\u5143\u7d20\u7684\u548c\n    vfredosum.vs v4, v2, v0, v0.t  # v4[0] = sum(v2[\u5076\u6570\u4f4d\u7f6e]) + v0[0]\n    vmv.f.s ft1, v4                # \u5c06\u7ed3\u679c\u79fb\u5230\u6d6e\u70b9\u5bc4\u5b58\u5668\n    fadd.s ft0, ft0, ft1           # \u7d2f\u52a0\u5230\u603b\u548c\n\n    # \u68c0\u67e5\u662f\u5426\u5b8c\u6210\n    bnez a1, mask_loop\n\n    # ft0\u73b0\u5728\u5305\u542b\u6240\u6709\u5076\u6570\u4f4d\u7f6e\u5143\u7d20\u7684\u548c\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u63a9\u7801\u5411\u91cf\uff0c\u53ea\u6807\u8bb0\u5076\u6570\u7d22\u5f15\u4f4d\u7f6e\uff0c\u7136\u540e\u4f7f\u7528<code>vfredosum.vs</code>\u8ba1\u7b97\u8fd9\u4e9b\u5143\u7d20\u7684\u6d6e\u70b9\u548c\u3002</p>"},{"location":"RVV/ISA/reduction/#4","title":"4. \u5411\u91cf\u6309\u4f4d\u5f52\u7ea6\u64cd\u4f5c\u793a\u4f8b","text":"<p>\u68c0\u67e5\u5411\u91cf\u4e2d\u662f\u5426\u5b58\u5728\u4efb\u4f55\u975e\u96f6\u4f4d\uff1a</p> <pre><code># \u68c0\u67e5\u5411\u91cf\u4e2d\u662f\u5426\u6709\u4efb\u4f55\u975e\u96f6\u4f4d\n.global _start\n.section .text\n\n_start:\n    # \u5047\u8bbea0\u5305\u542b\u4f4d\u56fe\u5730\u5740\uff0ca1\u5305\u542b\u4f4d\u56fe\u957f\u5ea6(\u5b57\u8282)\n\n    # \u521d\u59cb\u5316\u7ed3\u679c\u4e3a0\n    vsetvli t0, a1, e8, m4     # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\uff0c8\u4f4d\u5143\u7d20\uff0cLMUL=4\n    vmv.v.i v0, 0              # v0 = 0\n\n    # \u5904\u7406\u4f4d\u56fe\ncheck_loop:\n    vsetvli t0, a1, e8, m4     # \u8bbe\u7f6e\u5411\u91cf\u957f\u5ea6\n    sub a1, a1, t0             # \u66f4\u65b0\u5269\u4f59\u5b57\u8282\u6570\n    vle8.v v4, (a0)            # \u52a0\u8f7d\u5411\u91cf\u6570\u636e\n    add a0, a0, t0             # \u66f4\u65b0\u4f4d\u56fe\u6307\u9488\n\n    # \u6267\u884c\u6309\u4f4d\u6216\u5f52\u7ea6\uff0c\u770b\u662f\u5426\u6709\u4efb\u4f55\u975e\u96f6\u4f4d\n    vredor.vs v0, v4, v0       # v0[0] = v0[0] | v4[0] | v4[1] | ...\n\n    # \u68c0\u67e5\u662f\u5426\u5b8c\u6210\n    bnez a1, check_loop\n\n    # v0[0]\u73b0\u5728\u5305\u542b\u7ed3\u679c\uff0c\u5982\u679c\u975e\u96f6\uff0c\u8868\u793a\u5b58\u5728\u975e\u96f6\u4f4d\n    vmv.x.s a0, v0             # \u5c06\u7ed3\u679c\u79fb\u5230\u8fd4\u56de\u5bc4\u5b58\u5668\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528<code>vredor.vs</code>\u6307\u4ee4\u6765\u6267\u884c\u6309\u4f4d\u6216\u5f52\u7ea6\uff0c\u5982\u679c\u4f4d\u56fe\u4e2d\u6709\u4efb\u4f55\u4f4d\u4e3a 1\uff0c\u6700\u7ec8\u7ed3\u679c\u5c06\u975e\u96f6\u3002\u8fd9\u79cd\u6280\u672f\u53ef\u7528\u4e8e\u5feb\u901f\u68c0\u67e5\u4f4d\u56fe\u6216\u63a9\u7801\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e9b\u6807\u8bb0\u4f4d\u3002</p>"},{"location":"blog/","title":"Blog","text":""}]}